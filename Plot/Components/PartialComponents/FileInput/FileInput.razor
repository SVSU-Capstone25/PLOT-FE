
@inject IJSRuntime JS
@using Toolbelt.Blazor.FileDropZone
@inject ILogger<FileInput> Logger

@rendermode InteractiveServer

<div class="file-input-zone d-flex @Class" id="@Id">
    @if (string.IsNullOrEmpty(Text))
    {
        <div class="no-file d-flex">
            <p><i class="fa-solid fa-upload"></i></p>
            <p>Drag and Drop</p>
            <p>or</p>
            <label for="file-upload" class="load-files-label">Select File</label>
            <div class="file-select">
                <InputFile id="file-upload" OnChange="LoadFile"/>
            </div>
        </div>
    }
    else 
    {
        <div class="has-file d-flex flex">         
            <i class="fa-regular fa-file"></i>
            <p class="file-name">@Text</p>
            <button class="remove-file-btn ms-auto" @onclick="RemoveFile" >
                <i class="fa-solid fa-xmark"></i>
            </button>
        </div>
    }
    
    
    
</div>
            
@* <script>
    var form = document.querySelector('.file-input-zone');
    var dropZone = document.querySelector('.no-file');
    var fileBlockZone = document.querySelector('.has-file')
    var fileBlockText = document.querySelector('.file-name');
    var file;

    function showDropZone() {
        dropZone.style.visibility = "visible";
    }
    function hideDropZone() {
        dropZone.style.visibility = "hidden";
    }

    function showFileBlock() {
        fileBlockZone.style.visibility = "visible";
    }

    function hideFileBlock() {
        fileBlockZone.style.visibility = "hidden";
    }

    function allowDrag(e) {
        if (true) {  // Test that the item being dragged is a valid one
            e.dataTransfer.dropEffect = 'copy';
            e.preventDefault();
            e.stopPropagation();
        }
    }

    function handleDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        hideDropZone();
        showFileBlock();

        if (e.dataTransfer.files[0]) {
            file = e.dataTransfer.files[0];
            fileBlockText.textContent = file;

            var event = document.createEvent('HTMLEvents');
            event.initEvent('submit',true,false);
            form.dispatchEvent(event);
        }

    }

    // 1
    window.addEventListener('dragenter', function(e) {
        e.preventDefault();
        e.stopPropagation();
        showDropZone();
        
    });

    form.addEventListener('submit', function(e) {
        if (file) {
            var data = new FormData(form);
            data.append()
        }
    });

    // 2
    dropZone.addEventListener('dragenter', allowDrag);
    dropZone.addEventListener('dragover', allowDrag);

    // 3
    dropZone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        e.stopPropagation();
        hideDropZone();
        
    });

    // 4
    dropZone.addEventListener('drop', handleDrop); 
</script>*@
@code {

    [Parameter]
    public string? Class {get;set;}

    [Parameter]
    public string? Id {get;set;}

    [Parameter]
    public EventCallback<IBrowserFile> OnFileSelected {get;set;}

    private IBrowserFile? LoadedFile;
    private string? Text;
    
    private bool isLoading;

    const int MAX_ALLOWED_SIZE = 1000 * 1024;
    private async Task LoadFile(InputFileChangeEventArgs e)    
    {
       isLoading = true;

        try
        {
            LoadedFile = e.File;

            Text = LoadedFile.Name;

            await OnFileSelected.InvokeAsync(LoadedFile);

            await InvokeAsync(StateHasChanged);
            

        }
        catch (Exception ex)
        {
            Logger.LogError("File: {FileName} Error: {Error}", 
                e.File.Name, ex.Message);
        }
    

        isLoading = false;
    }
    


    private async Task RemoveFile() {
        Text = "";
        LoadedFile = null;
        await InvokeAsync(StateHasChanged);
    }
    
}