@* 
    Filename:- FileInput.razor
    Part of Project: Plot

    File Purpose:
    The purpose of this file is to create a file input element.

    Program Purpose:
    The purpose of PLOT is to allow users to easily create, manage,
    and allocate floorsets for Plato's Closet.

    Author: Andrew Kennedy (2/8/2025)
*@

@inject IJSRuntime JS
@rendermode InteractiveServer
@inject ILogger<FileInput> Logger

<div class="file-input-zone d-flex @Class" id="@Id">
    @* If the user has not entered a file, or has cleared it, show the initial div *@
    @if (string.IsNullOrEmpty(Text))
    {
        <div class="no-file d-flex">
            <p><i class="fa-solid fa-upload"></i></p>
            <p>Drag and Drop</p>
            <p>or</p>
            <label for="file-upload" class="load-files-label">Select File</label>
            <div class="file-select">
                <InputFile id="file-upload" OnChange="LoadFile"/>
            </div>
        </div>
    }
    @* Otherwise, show a block with the filename, and a remove file button *@
    else 
    {
        <div class="has-file d-flex flex">         
            <i class="fa-regular fa-file"></i>
            <p class="file-name">@Text</p>
            <button class="remove-file-btn ms-auto" @onclick="RemoveFile" >
                <i class="fa-solid fa-xmark"></i>
            </button>
        </div>
    }   
</div>            

@code {

    [Parameter]
    public string? Class {get;set;}

    [Parameter]
    public string? Id {get;set;}

    [Parameter]
    public EventCallback<IBrowserFile> OnFileSelected {get;set;} // How the parent will get the file

    private IBrowserFile? LoadedFile;
    private string? Text;
    

    const int MAX_ALLOWED_SIZE = 1000 * 1024;

    /*
        The LoadFile function sends the file loaded by the user
        to the parent.
    */
    private async Task LoadFile(InputFileChangeEventArgs e)    
    {      
        try
        {
            // Get the file, then get the filename for the element text
            LoadedFile = e.File;
            Text = LoadedFile.Name;
            
            // Send the file to the parent
            await OnFileSelected.InvokeAsync(LoadedFile);

            // Update the DOM to refresh the filename on the element
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            // Log the error if an exception occurs
            Logger.LogError("File: {FileName} Error: {Error}", 
                e.File.Name, ex.Message);
        }
    }
    

    /*
        The RemoveFile function clears the Text property,
        which removes the file and puts the form in its 
        original state. 
    */
    private async Task RemoveFile() 
    {
        Text = "";
        LoadedFile = null;
        await InvokeAsync(StateHasChanged);
    }
    
}

