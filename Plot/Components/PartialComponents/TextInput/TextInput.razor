@inject IJSRuntime JSRuntime
<script>
    function updateInputStyle(elementId, borderColor, textColor) {
        var input = document.getElementById(elementId);
        if (input) {
            input.style.borderColor = borderColor;
            input.style.color = textColor;
        }
    }
</script>

@code {
    [Parameter] public string Label { get; set; } = "Enter text";
    [Parameter] public string Placeholder { get; set; } = "Type here...";
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public string Id { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public bool LabelOnTop { get; set; } = true;

    private async Task HandleInput(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        await ValueChanged.InvokeAsync(Value);

        // Determine border & text color
        var borderColor = string.IsNullOrWhiteSpace(Value) ? "red" : "#ccc";
        var textColor = string.IsNullOrWhiteSpace(Value) ? "red" : "black";

        // Call JavaScript function to update the style dynamically
        await JSRuntime.InvokeVoidAsync("updateInputStyle", Id, borderColor, textColor);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100); // Ensure the element is ready before JS call
            await JSRuntime.InvokeVoidAsync("updateInputStyle", Id, "red", "red");
        }
    }
}

<div class="text-input-container @(LabelOnTop ? "label-top" : "label-left")">
    <label for="@Id">@Label</label>
    <input id="@Id" type="text" value="@Value" @oninput="HandleInput" placeholder="@Placeholder" class="TextInput @Class" />
</div>

<style>
    .text-input-container {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .label-top {
        flex-direction: column;
        align-items: flex-start;
    }

    .label-left {
        flex-direction: row;
    }

    label {
        font-weight: bold;
        margin-bottom: 4px;
    }

    .label-left label {
        margin-right: 10px;
    }

    input {
        padding: 5px;
        border: 1px solid red; /* Default border is red */
        color: red; /* Default text is red */
        border-radius: 4px;
        outline: none;
    }
</style>
