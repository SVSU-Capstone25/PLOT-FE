@inject IJSRuntime JSRuntime

<script>
    function handleValueChanged(element)
    { 
        if (element.value.trim().length < 1)
        {
            element.style.color = 'red';
            element.style.borderColor = 'red';
        }
        else {
            element.style.color = '';
            element.style.borderColor= '';
        }
    }
</script>

<div class="text-input-container @(LabelOnTop == true ? "label-top" : "label-left")">
    <label for="@Id">@Label</label>
    <div class="input-wrapper">
        <!-- Text Input Field -->
        <input id="@Id" type="@Type" @bind="Value" oninput="handleValueChanged(this)" placeholder="@Placeholder" class="TextInput @Class" />
        
        <!-- Toggle Password Visibility Button (only for password fields) -->
        @if (Id?.ToLower().Contains("password") == true)
        {
            <button type="button" @onclick="TogglePasswordVisibility" class="toggle-password">
                <i class="fa-thin fa-eye"></i>
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public string? Label { get; set; } = "Enter text";
    [Parameter] public string Type { get; set; } = "text"; // Default value
    [Parameter] public string? Placeholder { get; set; } = "Type here...";
    [Parameter] public string? Value { get; set; } = "";
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public bool? LabelOnTop { get; set; } = true;
    private string passwordType = "password"; // Default to password type for password fields

    private string GetInputType()
    {
        // If the input is for password, set type to password, otherwise text
        return Id?.ToLower().Contains("password") == true ? "password" : "text";
    }

    // Method to toggle password visibility
    private void TogglePasswordVisibility()
    {
        if (Type == "password")
        {
            Type = "text"; // Show password
        }
        else
        {
            Type = "password"; // Mask password
        }
    }
}