<div class="ProgressBar row @Class" id = "@ID">
    <div class="col-6">
        @if(iconString != null)
        {
            <i class="@iconString me-2"></i>
        }
        @mainLabel
    </div>

    <div class="col-6">
        <label for="main-progress">@barLabel</label>
        <style type="text/CSS">
            @("#bar_" + ID)::-moz-meter-bar
            {
                background: @barColor;
            }
            @("#bar_" + ID)::-webkit-meter-even-less-good-value,
            @("#bar_" + ID)::-webkit-meter-suboptimum-value,
            @("#bar_" + ID)::-webkit-meter-optimum-value
            {
                background: @barColor;
            }
        </style>
        <meter id="bar_@ID" class=@_barClass min="@barMin" max="@barMax" value="@barValue">@barValue</meter>
    </div>
</div>

@code {
    //ID string to pass into the main HTML ID
    [Parameter]
    public String ID {get; set;}

    //Class string to pass into the main component HTML Class
    [Parameter]
    public String? Class {get; set;}

    //FontAwesome icon to display before the text.
    [Parameter]
    public String? iconString {get; set;}

    //Text to display to the left of the progress bar
    [Parameter]
    public String? mainLabel {get; set;}

    //Text to display inside the progress bar.
    [Parameter]
    public String? barLabel {get; set;}

    //Min number in the progress bar.
    [Parameter]
    public int barMin {get; set;} = 0;

    //Max number in the progress bar.
    //Must be greater than barMin
    [Parameter]
    public int barMax {get; set;} = 100;

    //Amount of current progress in the progress bar. 
    //0 <= barValue <= barMax.
    [Parameter]
    public int barValue {get; set;} = 50;


    //PROGRESS BAR COLOR
    [Parameter]
    public String barColor {get; set;} = "aliceblue";

    //Toggle for using over/underfill styling presets. Defaults to true, since this is most likely used primarily in allocations page.
    [Parameter]
    public Boolean usePresetFillWarnings {get; set;} = true;

    //Preset styling for the bar - If the barProgress is < 100%, barClass is updated to mark the bar unfulfilled.
    private String _unFilledClass = "progress-unfulfilled";

    //Preset styling for the bar - If barProgress is > 100%, barClass is updated to mark the bar overfilled
    private String _overFilledClass = "progress-overfilled";

    //The current styling class of the bar. Can be empty or set to the contents of _unFilledClass
    private String _barClass = "";

    //Progress Bar MapProgress function.
    //Takes two inputs, max value, and current value
    //Interpolates 0 -> currentValue -> maxValue into the range 0 -> 100
    //Returns the new progress bar value.
    private int MapProgress()
    {
        return Math.Clamp(
            (int) Single.Lerp(0f, 100f, ((float)barValue / (float)barMax)),
            0,
            100
        );
    }

    //Code to run when component initializes.
    //If the bar progress is not filled, add the "unfulfilled" class to the progress div.
    protected override void OnInitialized()
    {
        if (usePresetFillWarnings)
        {
            if (barMax <= barMin)
            {
                throw new ArgumentException("Bar Max cannot be less than Bar Min!");
            }
            if (barValue < barMax)
            {
                _barClass = _unFilledClass;
            }
            else if (barValue > barMax)
            {
                _barClass = _overFilledClass;
            }
        }
    }
}