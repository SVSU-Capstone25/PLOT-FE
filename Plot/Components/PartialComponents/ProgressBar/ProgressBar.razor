@* Originally by Tristan Calay *@
<div @attributes="Attributes" class="ProgressBar @Attributes?.GetValueOrDefault("class")">
    @ChildContent
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    //Preset styling for the bar - If the barProgress is < 100%, barClass is updated to mark the bar unfulfilled.
    @* private String _unFilledClass = "progress-unfulfilled"; *@

    //Preset styling for the bar - If barProgress is > 100%, barClass is updated to mark the bar overfilled
    @* private String _overFilledClass = "progress-overfilled"; *@

    //Progress Bar MapProgress function.
    //Takes two inputs, max value, and current value
    //Interpolates 0 -> currentValue -> maxValue into the range 0 -> 100
    //Returns the new progress bar value.
    @* private int MapProgress()
    {
        return Math.Clamp(
        (int)Single.Lerp(0f, 100f, ((float)barValue / (float)barMax)),
        0,
        100
        );
    } *@

    @* Tristan Calay 4/1/25
        Removed "OnInitialized" and replaced with this func to
        dynamically get the bar class for the component on render. *@
    @* private String getBarClass()
    {
        if (usePresetFillWarnings)
        {
            if (barMax <= barMin)
            {
                throw new ArgumentException("Bar Max cannot be less than Bar Min!");
            }
            if (barValue < barMax)
            {
                return _unFilledClass;
            }
            else if (barValue > barMax)
            {
                return _overFilledClass;
            }
            else
            {
                return "";
            }
        }

        return "";
    } *@
}