@*
    Filename:- DateInput.razor
    Part of Project: Plot

    File Purpose:
    The purpose of this file is to create a date input element.

    Program Purpose:
    The purpose of PLOT is to allow users to easily create, manage,
    and allocate floorsets for Plato's Closet.

    Author: Andrew Kennedy (2/10/2025)
*@

@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IJSRuntime JS

<div class="DateInput @Class " id="@Id">
    <div class="form-floating mt-3 custom-date-wrapper">
        <input type="date" class="date-input form-control custom-date-input @invalidClass" 
                                                id="date-input" @onchange="HandleDateChange" @onfocusout="HandleFocusOut"/>
        <i class="fa-regular fa-calendar custom-calendar-icon" @onclick="OpenDatePicker"></i>

        <label for="date-input" class="inner-date-label @invalidClass">
            @* If the date is valid, keep the label text the same *@            
            @* Otherwise, inform the user of the invalid date *@
            @(isValid ? Label : "Invalid Date!")
        </label>
    </div> 
    
    <label for="date-input" class="date-format-label">MM/DD/YYYY</label>
</div>

<script>
    var dateInput = document.getElementById("date-input");
    window.openDatePicker = function () {
        // Show the date picker when the date input label is clicked
        dateInput.showPicker();
    };


    window.checkValidDate = function (dotNetHelper) {
        // Invoke the CheckDateValid method 
        dotNetHelper.invokeMethodAsync("CheckDateValid",dateInput.value);
        
    };
</script>

@code 
{
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? Label { get; set; }

    // Used to send the date to the parent
    [Parameter]
    public EventCallback<DateTime?> ValueChanged { get; set; }   

    [Parameter]
    public DateTime? Value { get; set; }

    private DotNetObjectReference<DateInput>? dotNet;

    private string? invalidClass;
    private bool isValid = true;
    
       

    /*
        The OnAfterRenderAsync function is used to get an initial reference to the 

    */
    protected override void OnAfterRender(bool firstRender) {

        if (firstRender) {
            dotNet = DotNetObjectReference.Create(this);
        }        
        
    }

    /*
        The HandleDateChange function sends the date to the parent whenever the
        user changes the input text.
    */
    private async Task HandleDateChange(ChangeEventArgs e)
    {
        // If the value successfully parses, initialize a new DateTime object
        await CheckDateValid(e.Value?.ToString());
        await JS.InvokeVoidAsync("checkValidDate", dotNet);
               

    }

    /*
        The HandleFocusOut function invokes the "CheckValidDate" function 
        when the date input area loses focus.
    */
    private async Task HandleFocusOut(FocusEventArgs e) 
    {        
        await JS.InvokeVoidAsync("checkValidDate", dotNet);               
    }

    /* 
        The OpenDatePicker function invokes a JS script to open 
        the date input's DatePicker.
    */
    private void OpenDatePicker()
    {
        JS.InvokeVoidAsync("openDatePicker");
    }

    /*
        The CheckDateValid function checks the given string to ensure
        it is a date.  If not, it changes the 
    */
    [JSInvokable]
    public async Task CheckDateValid(string? input) {
        // If the value successfully parses, initialize a new DateTime object
        if (DateTime.TryParse(input, out DateTime newDateTime))
        {            
            isValid = true;
            invalidClass = "";
            Value = newDateTime;             
        }
        else
        {            
            isValid = false;
            invalidClass = "error";         
            Value = null;   
        }

        // Send the value to the parent
        await ValueChanged.InvokeAsync(Value);
    }

    
    

}
