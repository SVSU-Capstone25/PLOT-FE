<!-- Filename: AllocationsSidebar.razor
Part of Project:-- PLOT
File Purpose:
Create a component to display the sidebar for the allocations page.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Tristan Calay (3/15/2025)-->

@inject IJSRuntime JS

<div class="inner-container">
    <h3 style="font-weight: bold;"><i class="fa-solid fa-file-circle-check"></i> Category Fullfillment</h3>
    <hr style="opacity: 1.0; color:black;">

    <div class="categories-div">
        @* Danielle Smith 3/17/2025
        changed how these are being displayed to use bootstrap classes
        added params to help text input take up proper width *@
        <div class="row">
            <div class="col-md-8">
                <TextInput Id="category-search" Label="" Type="search" Placeholder="Category Search..."
                    Value="@categorySearch" ValueChanged="@(e => categorySearchChanged(e))" LabelOnTop="false"
                    Class="w-100" />
            </div>

            @* id of sorting button follows the style "sortButton" + num, from 0 to n, where n is num sort buttons - 1.
                Call JS.swapSortButtons(num) in the OnClickFunction to cycle to the next sort button in JS. *@
            <div class="col-md-2" id="sortButton0">
                <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-arrow-up-short-wide"
                    OnClickFunction="sortAscending" Class="search-button" TextAlignment="center" />
            </div>

            @* Hide the buttons not currently active via display : none *@
            <div class="col-md-2" id="sortButton1" style="display: none;">
                <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-arrow-down-wide-short"
                    OnClickFunction="sortDescending" Class="search-button" TextAlignment="center" />
            </div>

            <div class="col-md-2">
                <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-filter"
                    OnClickFunction="filterCategory" Class="search-button" TextAlignment="center" />
            </div>
        </div>

        <div class="progress-area">
            @* Danielle Smith 3/17/2025
            added classes for margins on these progressbars
            added more categories to fill this out for demo purpopses & sorted them alphabetically 
            
            Tristan Calay 3/29/25
            Created a foreach loop to iterate over cached category data and display it.*@

            @foreach(var bar in getAllCategories())
            {
                //Continue to next category if the search filter is active
                //  and the search filter is not in the bar text.
                //  Exclude headers from being skipped.
                @if (bar.isHeader)
                {
                    <hr class="category-separator">
                    <ProgressBar iconString="fa-solid fa-chevron-down" mainLabel=@bar.text barColor=@bar.color barMax=@bar.maxValue
                        barValue=@bar.currentValue barLabel=@bar.getLinearFeet() />
                }
                else 
                { 
                    @if (bar.isInSearch(categorySearch))
                    {
                        <ProgressBar mainLabel=@bar.text barColor=@bar.color barMax=@bar.maxValue
                            barValue=@bar.currentValue barLabel=@bar.getLinearFeet() />       
                    }
                }
            }
        </div>
    </div>
</div>

<script>
    //NumSortButtons needs to be equal to the number of sorting buttons defined in the html above.
    var numSortButtons = 2;
    function swapSortButtons(sortButtonNum)
    {
        var nextButtonNum = (sortButtonNum + 1) % numSortButtons;
        document.getElementById("sortButton" + sortButtonNum).style.display = "none";
        document.getElementById("sortButton" + nextButtonNum).style.display = "";
    }
</script>

@code
{
    [Parameter]
    public String? Class { get; set; }

    [Parameter]
    public String? ID { get; set; }

    private String categorySearch = ""; //Default storage of the category search textbox.

    //Tristan Calay 3/29/25
    //Create progress bar category data and store here.
    private struct categoryData
    {
        public bool isHeader {get;set;} = false;
        public String headerCategory = "";
        public String text {get;set;} = "";
        public String color {get;set;} = "red";
        public int maxValue {get;set;} = 100;
        public int currentValue {get;set;} = 0;

        public categoryData(String _headerCategory, String _text, String _color, int _maxValue, int _currentValue, bool _header = false)
        {
            headerCategory = _headerCategory;
            text = _text;
            color = _color;
            maxValue = _maxValue;
            currentValue = _currentValue;
            isHeader = _header;

            Console.WriteLine("Header is " + isHeader.ToString());
        }

        public String getLinearFeet()
        {
            return currentValue + "/" + maxValue + " LF";
        }

        public bool isInSearch(String searchText)
        {
            if (searchText == ""){
                return true;
            }
            return (headerCategory + " " + text).ToLower().Contains(searchText.ToLower());
        }

        public Double getPercent()
        {
            return Convert.ToDouble(currentValue) / Convert.ToDouble(maxValue);
        }
    }

    //Add one list for each super category
    private List<categoryData> progressCategoriesMen = [];
    private List<categoryData> progressCategoriesWomen = [];
    private List<categoryData> progressCategoriesAccessories = [];

    //When the component is initialized, retrieve info from database about categories.
    protected override void OnInitialized()
    {
        base.OnInitialized();
        //For now, hardcoded categories.
        //One exists for each super category, for ease of sorting. This can be changed.
        progressCategoriesMen = [];
        progressCategoriesWomen = [];
        progressCategoriesAccessories = [];
        @* Men's *@
        var currentColor = "#AAD9FF";
        var currentCategory = "Men's";
        progressCategoriesMen.Add(new categoryData(currentCategory,currentCategory,currentColor,480,290,true));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Pants",currentColor,100,20,false));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Shirts",currentColor,100,30,false));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Shoes",currentColor,100,60,false));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Jeans",currentColor,100,20,false));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Jackets",currentColor,100,120,false));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Shorts",currentColor,100,20,false));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Sports",currentColor,100,20,false));
        progressCategoriesMen.Add(new categoryData(currentCategory,"Suits",currentColor,100,10,false));

        @* Women's *@
        currentColor = "#FFAAD6";
        currentCategory = "Women's";
        progressCategoriesWomen.Add(new categoryData(currentCategory,currentCategory,currentColor,800,300,true));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Dresses",currentColor,100,120,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Skirts",currentColor,100,120,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Sports",currentColor,100,20,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Suits",currentColor,100,100,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Jackets",currentColor,100,120,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Jeans",currentColor,100,20,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Pants",currentColor,40,20,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Shirts",currentColor,100,30,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Shoes",currentColor,100,60,false));
        progressCategoriesWomen.Add(new categoryData(currentCategory,"Shorts",currentColor,100,20,false));
        
        @* Accessories *@
        currentColor = "#5FBD6A";
        currentCategory = "Accessories";
        progressCategoriesAccessories.Add(new categoryData(currentCategory,currentCategory,currentColor,40,80,true));
        progressCategoriesAccessories.Add(new categoryData(currentCategory,"Belts",currentColor,10,20,false));
        progressCategoriesAccessories.Add(new categoryData(currentCategory,"Hats",currentColor,10,20,false));
        progressCategoriesAccessories.Add(new categoryData(currentCategory,"Purses",currentColor,10,20,false));
        progressCategoriesAccessories.Add(new categoryData(currentCategory,"Jewelry",currentColor,10,20,false));
        
    } 
    
    //Tristan Calay 3/29/25
    //Return a joined list of all the super categories.
    //The super categories can be sorted individually before they are retrieved.
    private List<categoryData> getAllCategories()
    {
        var joinedList = new List<categoryData>();
        joinedList = [];
        joinedList.AddRange(progressCategoriesMen);
        joinedList.AddRange(progressCategoriesWomen);
        joinedList.AddRange(progressCategoriesAccessories);

        return joinedList;
    }

    //Tristan Calay 3/29/25
    //Hide categories that do not contain the string "newSearch"
    private void categorySearchChanged(String newSearch)
    {
        categorySearch = newSearch;
        StateHasChanged();
    }

    private void filterCategory()
    {
        Console.WriteLine("Filter Category Search Function");
    }

    //Tristan Calay 3/29/25
    //Generic sort - Sort by alphabetical with headers first.

    enum SORTTYPE {ASCENDING, DESCENDING};

    @* Create functions for sorting in different ways here. 
        They should invoke swapSortButtons with the 
        corresponding ID of the button that called the sort func.*@
    private void sortAscending()
    {
        sortCategory(SORTTYPE.ASCENDING);
        JS.InvokeVoidAsync("swapSortButtons",0);
    }
    private void sortDescending()
    {
        sortCategory(SORTTYPE.DESCENDING);
        JS.InvokeVoidAsync("swapSortButtons",1);
    }

    @* Sort each sub category of items by the sorttype value. *@
    private void sortCategory(SORTTYPE sort)
    {
        Console.WriteLine("Sort Category Search Function");
        progressCategoriesMen.Sort((a,b) => compareCategories(a,b,sort));
        progressCategoriesWomen.Sort((a,b) => compareCategories(a,b,sort));
        progressCategoriesAccessories.Sort((a,b) => compareCategories(a,b,sort));

        StateHasChanged();
    }

    //Sorting function for category data.
    private int compareCategories(categoryData a, categoryData b, SORTTYPE sort)
    {
        //Both are null, return equivalent
        if (a.Equals(null) && b.Equals(null))
        {
            //Console.WriteLine("Both are null!");
            return 0;
        }

        //Neither null, return header first, else sort by fullfillment percentage.
        if (!a.Equals(null) && !b.Equals(null))
        {
            if (a.isHeader)
            {
                //Console.WriteLine("A is header! Keep A first.");
                return -1;
            }
            if (b.isHeader)
            {
                //Console.WriteLine("B is header! Should swap.");
                return 1;
            }
            //Console.WriteLine("Standard Sort!");
            //Sort here by percent complete. To do different sort methods, add them here.
            switch(sort)
            {
                case SORTTYPE.ASCENDING:
                    return (a.getPercent()).CompareTo(b.getPercent());
                case SORTTYPE.DESCENDING:
                    return (b.getPercent()).CompareTo(a.getPercent());
            }
            
        }

        //First not null, return first
        if (!a.Equals(null))
        {
            //Console.WriteLine("First is only non null item!");
            return -1;
        }

        //Return second.
        //Console.WriteLine("Default to second : only non null item!");
        return 1;
    
    }
}