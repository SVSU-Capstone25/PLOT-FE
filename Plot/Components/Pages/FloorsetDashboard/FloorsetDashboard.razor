@* Filename: Floorsets.razor
Part of Project: PLOT

File Purpose:
This is the floorsets page component to showe the floorsets for a specific store 

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/13/2025)  *@

@* /floorsets/Flint, MI/3192 S Linden Rd, Flint, MI 48507 *@

@page "/floorsets/{storeId}"

@inject NavigationManager Navigation
@inject FloorsetsHttpClient FloorsetsHttpClient

@* Top portion of the page (Showing store, location, and image for the current floorset) *@
<div class="container">
    <div class="left">
        <h1 font-size="3em">Floorsets for @storeId Store</h1>
        <br>
        @* <h3>@storeLocation</h3> *@
    </div>
    <div class="right">
        <img height="auto" width="500px" src="/img/FloorsetPhotoExample.png">
    </div>
</div>

@* Div to hold the floorset cards *@
<div id="floorsetCards" class="horizontal-items">

    @* Tristan Calay - 3/22/25
    Dynamically geenrate cards from stored floorsets.
    Iterate over each name and image in the floorsets.
    *@

    @foreach (var floorset in floorsets)
    {
    <a href="@($"/floorset-editor/{floorset.TUID}")">
        <Card Id="@floorset.TUID.ToString()" Class="Card" CardText="@floorset.NAME">
            <Dropdown Class="Dropdown" Id="@floorset.TUID.ToString()" LabelText="Floorset">
                <DropdownLink Link="@($"#edit-floorset-{floorset.TUID}")" data-bs-toggle="modal"
                    Icon="fa-solid fa-pen-to-square" @onclick="() => SelectFloorset(floorset)">Edit
                </DropdownLink>
                <DropdownLink Link="@($"javascript:floorsetDashboardCopyCard('{floorset.NAME}')")"
                    Icon="fa-solid fa-copy">
                    Copy</DropdownLink>
                <DropdownLink Link="#deleteFloorsetModal" Icon="fa-solid fa-trash-can" data-bs-toggle="modal">Delete
                </DropdownLink>
            </Dropdown>
        </Card>
    </a>

        @* + Siona Beaudoin, 4/3/2025, edit the title of floorsets*@
        <Modal id="@($"edit-floorset-{floorset.TUID}")" class="standard">
            <ModalHeader Title="Edit Floorset Title" Variant="standard" />
            <EditForm Model="EditFloorsetModel" OnSubmit="async () => await OnEditFloorsetSubmit(floorset.TUID)"
                FormName="Create Floorset Form">
                <ModalBody>
                    <label>
                        Name
                        <InputText @bind-value="EditFloorsetModel!.NAME" />
                    </label>
                </ModalBody>
                <ModalFooter>
                    <Button Class="" TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                        Edit
                    </Button>
                </ModalFooter>
            </EditForm>
        </Modal>

        <Modal id="deleteFloorsetModal" class="standard">
            <ModalHeader Title="Confirm Deletion" Variant="danger" />
            <form @onsubmit="async () => await OnDeleteFloorsetSubmit(floorset.TUID)">
            @code {
                private string? deleteTextInput;
                private bool isDisabled => deleteTextInput != "DELETE";
            }
            <ModalBody>
                <h5>Are you SURE you want to delete this Floorset?</h5>
                <input type="text" placeholder="If so, type DELETE below" required pattern="DELETE"
                    @bind-value="deleteTextInput" @bind-value:event="oninput" />
            </ModalBody>

            <ModalFooter>
                <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                    data-bs-dismiss="modal">
                    Yes, Delete
                </Button>
            </ModalFooter>
        </form>
    </Modal>
        }
</div>

<Modal id="create-floorset" class="standard">
    <ModalHeader Title="Create Floorset" Variant="standard" />
    <EditForm Model="CreateFloorsetModel" OnSubmit="async () => await OnCreateFloorsetSubmit()"
        FormName="Create Floorset Form">
        <ModalBody>
            <label>
                Title:
                <InputText @bind-Value="CreateFloorsetModel!.NAME">Name</InputText>
            </label>
        </ModalBody>
        <ModalFooter>
            <Button TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                Create
            </Button>
        </ModalFooter>
    </EditForm>
</Modal>

<Button Class="position-fixed bottom-0 end-0 m-3" TextAlignment="center" Variant="primary" Icon="fa-solid fa-plus"
    data-bs-toggle="modal" data-bs-target="#create-floorset">
    Add Floorset
</Button>

<script src="js/copyFloorsetCard.js"></script>

@code {
    [Parameter] public required string storeId { get; set; }

    [SupplyParameterFromForm]
    private Data.Models.Floorsets.CreateFloorset? CreateFloorsetModel { get; set; }

    [SupplyParameterFromForm]
    private Data.Models.Floorsets.UpdatePublicInfoFloorset? EditFloorsetModel { get; set; }

    protected override void OnInitialized()
    {
        CreateFloorsetModel ??= new()
        {
            STORE_TUID = Int32.Parse(storeId),
            DATE_CREATED = DateTime.Now,
            CREATED_BY = -1,
            DATE_MODIFIED = DateTime.Now,
            MODIFIED_BY = -1
        };

        EditFloorsetModel ??= new()
        {
            STORE_TUID = Int32.Parse(storeId),
            DATE_CREATED = DateTime.Now,
            CREATED_BY = -1,
            DATE_MODIFIED = DateTime.Now,
            MODIFIED_BY = -1
        };
    }

    private List<Data.Models.Floorsets.Floorset> floorsets = new List<Data.Models.Floorsets.Floorset>();

    private async Task UpdateFloorsets()
    {
        if (storeId != null)
        {
            var response = await FloorsetsHttpClient.GetFloorsetsByStore(Int32.Parse(storeId));

            if (response != null)
            {
                floorsets = response;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateFloorsets();
    }

    private void SelectFloorset(Data.Models.Floorsets.Floorset floorset)
    {
        if (EditFloorsetModel != null)
        {
            EditFloorsetModel.NAME = floorset.NAME;
        }
    }

    private async Task OnDeleteFloorsetSubmit(int floorsetId)
    {
        await FloorsetsHttpClient.DeleteFloorset(floorsetId);
        await UpdateFloorsets();
    }

    //Siona Beaudoin - 4/3/2025
    private async Task OnEditFloorsetSubmit(int floorsetId)
    {
        if (EditFloorsetModel != null)
        {
            await FloorsetsHttpClient.UpdatePublicInfo(floorsetId, EditFloorsetModel);
            await UpdateFloorsets();
        }
    }

    private async Task OnCreateFloorsetSubmit()
    {
        if (CreateFloorsetModel != null)
        {
            await FloorsetsHttpClient.CreateFloorset(CreateFloorsetModel);
            await UpdateFloorsets();
        }
    }
}