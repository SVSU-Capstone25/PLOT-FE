@* Filename: Floorsets.razor
Part of Project: PLOT

File Purpose:
This is the floorsets page component to showe the floorsets for a specific store 

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/13/2025)  *@

@* /floorsets/Flint, MI/3192 S Linden Rd, Flint, MI 48507 *@

@page "/floorsets/{storeId}/{storeLocation}"
@inject IJSRuntime JS
@inject NavigationManager Navigation

@* Top portion of the page (Showing store, location, and image for the current floorset) *@
<div class="container">
    <div class="left">
        <h1 font-size="3em">Floorsets for @storeId Store</h1>
        <br>
        <h3>@storeLocation</h3>
    </div>
    <div class="right">
        <img height="auto" width="500px" src="/img/FloorsetPhotoExample.png">
    </div>
</div>

@* Div to hold the floorset cards *@
<div id="floorsetCards" class="horizontal-items">

    @* Tristan Calay - 3/22/25
    Dynamically geenrate cards from stored floorsets.
    Iterate over each name and image in the floorsets.
    *@

    @if(storedFloorsets != null){
        @foreach (var floorset in storedFloorsets)
        {
            <Card Id=@floorset.ID Class="Card" CardText=@floorset.Name CardImage=@floorset.ImagePath>
                <Dropdown Class="Dropdown" Id="@floorset.dropdownID" DropdownText="@(new List<string> { "Edit", "Copy", "Delete" })"
                    DropdownLinks="@(new List<string> { "#editFloorsetTitleModal", "javascript:floorsetDashboardCopyCard('"+@floorset.Name+"')", "#deleteFloorsetModal" })"
                    LabelText="Floorset"
                    DropdownIcons="@(new List<string> { "fa-solid fa-pen-to-square", "fa-solid fa-copy", "fa-solid fa-trash-can" })" />
            </Card>
        }
    }
</div>

@* + Add Floorset button fixed to the bottom right of the screen *@
<button class="fixed-bottom-right">
    <Button Class="Button" TextAlignment="center" Variant="primary" OnClickFunction="goToFloorsetEditorPage"
        Icon="fa-solid fa-plus">
        Add Floorset
    </Button>
</button>

@* + Siona Beaudoin, 4/3/2025, edit the title of floorsets*@
<Modal Title="Edit Floorset Title" Id="editFloorsetTitleModal" Class="standard" Variant="standard">
    <BodyContent>
        <TextInput type="text" Id="editFloorsetTitleModalTextInput" Label="Enter the new name for the floorset:" />
    </BodyContent>

    <FooterContent>
        <p style="margin-left: auto;"></p>
        <Button Class="Button" TextAlignment="center" Variant="primary" OnClickFunction="editFloorsetTitle">
            Confirm Edit
        </Button>
    </FooterContent>
</Modal>

@* HARD CODED MODAL: Delete Floorset modal *@
<Modal Title="Confirm Deletion" Id="deleteFloorsetModal" Class="standard" Variant="danger">

    <BodyContent>
        <h5>Are you SURE you want to delete this Floorset?</h5>
        <TextInput type="text" Id="deleteModalTextInput" Label="If so, type DELETE below" />
    </BodyContent>

    <FooterContent>
        <p style="margin-left: auto;"></p>
        <Button Class="Button" TextAlignment="center" Variant="primary" OnClickFunction="deleteFloorset">
            Yes, Delete
        </Button>
    </FooterContent>
</Modal>

<script>
    // show the whichever modal ID is passed into it
    function showModal(modalId) {
        var modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }

    function HideModal(modalId) {
        /* Danielle Smith - 3/17/2025
        hide modal function that works with button component and id of modal passed in
        call remove modal backdrop twice because opening the delete modal makes two of them for some reason
        we will need to fix this in the future */
        document.getElementById(`${modalId}`).classList.remove('show');
        document.querySelector('.modal-backdrop')?.remove();
        document.querySelector('.modal-backdrop')?.remove();
    }

    function editFloorsetTitle() {
        /* Siona Beaudoin - 4/3/2025
        Function to handle the edit floorset title modal. It retrieves the new title from the input field,
        checks if it's not empty, and then closes the modal. */
        let newTitle = document.getElementById("editFloorsetTitleModalTextInput").value;
        if (newTitle.trim() !== "") {
            console.log("New Floorset Title: " + newTitle);
            HideModal("editFloorsetTitleModal");
        } else {
            alert("Please enter a valid title.");
        }
    }

    function DeleteFloorset() {
        /* Danielle Smith - 3/18/2025
        function that mimics deleting a floorset. still checks if the text equals delete.
        if so, close the modal to mimic deleting a floorset. clear the text box for next use
        otherwise, alert the user */
        let deleteStr = document.getElementById("deleteModalTextInput").value;
        if (deleteStr.equals("DELETE")) {
            document.getElementById("deleteModalTextInput").value = "Delete";
            HideModal("deleteFloorsetModal");
        }
        else {
            alert("Incorrect input.");
        }
    }

    function GoToFloorsetEditorJS() {
        /* Danielle Smith fa-plus 4/1/2025 
        function for dropdown to go to the floorset editor that
        forces a refresh of the cache to correct styles and such */
        window.location.href="/floorset-editor";
    }
</script>

@* floorsetCopy js *@
<script src="js/copyFloorsetCard.js"></script>

@code {
    [Parameter]
    public string? storeId { get; set; }

    [Parameter]
    public string? storeLocation { get; set; }

    //Tristan Calay - 3/22/25
    //Structure to store retreived database information on floorsets for rendering and local updates without page reload.
    //Stores the database ID, the display name, and the thumbnail image path.
    private struct storedFloorset
    {
        public storedFloorset(string name, string img = "/img/FloorsetPhotoExample.png")
        {
            Name = name;
            ImagePath = img;
        }

        public string dropdownID {
            get{
                return "Dropdown" + Name;
            }
        }

        public string ID {
            get{
                return Name.Replace(" ","");
            }
        }

        public string Name {get; set;}

        public string ImagePath{get; set;}
    } 

    //Array of stored floorsets to display. Should be manipulated by copy and delete functions to have local updates.
    private List<storedFloorset>? storedFloorsets {get; set;}

    //function for deleting a store
    private async void deleteFloorset()
    {
        Console.WriteLine("DELETE THIS FLOORSET");
        await JS.InvokeVoidAsync("DeleteFloorset");
    }

    //Siona Beaudoin - 4/3/2025
    private async void editFloorsetTitle()
    {
        Console.WriteLine("Edit Floorset Title Function Called");
        await JS.InvokeVoidAsync("editFloorsetTitle");
    }
    //general function to take us to the floorsets editor page for a floorset store
    private void goToFloorsetEditorPage()
    {
        Navigation.NavigateTo("/floorset-editor", forceLoad: true);
    }


    //Tristan Calay - 3/22/25
    //Func to add a new floorset when the copy button is pressed.
    [JSInvokable("CopyFloorset")]
    public void CopyFloorset(string originalName)
    {
        Console.WriteLine("Copy Floorset Func");
        if (storedFloorsets != null){
            //Search the list for the index where the name property is the same as the original name.
            var index = storedFloorsets.FindIndex(p => p.Name == originalName);
            if (index >= 0)
            {
                storedFloorsets.Insert(index+1, new storedFloorset(originalName + " Copy"));
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Could not find index for name "+originalName);
            }
        }
        
    }

    //Retrieve the floorsets on initialization.
    protected override void OnInitialized()
    {
        getFloorsets();

        var dotNetReference = DotNetObjectReference.Create(this);
        JS.InvokeVoidAsync("floorsetDashboardSetDotNet", dotNetReference);
        base.OnInitialized();
    }

    //Function to retrieve floorsets from DB. For now, some hardcoded references.
    private void getFloorsets(){
        storedFloorsets = new List<storedFloorset> {};
        
        //This array and following foreach is for default testing floorsets.
        Console.WriteLine("Adding default floorsets to storedFloorsets");
        var floorsetNames = new String[] {
            "Nov24 Floorset",
            "Dec24 Floorset",
            "Jan25 Floorset",
            "Feb25 Floorset",
            "Mar25 Floorset",
            "Apr25 Floorset",
            "May25 Floorset",
            "Jun25 Floorset",
            "Jul25 Floorset",
            "Aug25 Floorset",
        };

        foreach (String name in floorsetNames){
            storedFloorsets.Add(new storedFloorset(name));
        }
    }
}