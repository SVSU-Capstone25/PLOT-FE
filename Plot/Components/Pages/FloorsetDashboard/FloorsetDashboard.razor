@* Filename: Floorsets.razor
Part of Project: PLOT

File Purpose:
This is the floorsets page component to showe the floorsets for a specific store 

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/13/2025)  *@

@* /floorsets/Flint, MI/3192 S Linden Rd, Flint, MI 48507 *@

@page "/floorsets/{StoreId:int}"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject FloorsetsHttpClient FloorsetsHttpClient
@inject StoresHttpClient StoresHttpClient

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@* Top portion of the page (Showing store, location, and image for the current floorset) *@
<div class="row mb-4 align-items-center">
    <div class="col-md-8">
        <h1 font-size="3em">Floorsets for @(Store?.NAME ?? "Loading...")</h1>
        <p class="small">@Store?.ADDRESS, @Store?.CITY, @Store?.STATE @Store?.ZIP</p>
        <br>
    </div>
    <div class="col-md-4">
        <img height="auto" width="550px" src="@StoreImageSrc" class="img-fluid shadow">
    </div>
</div>

@* Div to hold the floorset cards *@
<div class="d-flex flex-wrap gap-4">

    @* Tristan Calay - 3/22/25
    Dynamically geenrate cards from stored floorsets.
    Iterate over each name and image in the floorsets.
    *@
    @* Altered the image source so it would actually check if the
    byte array given was the default byte arry or if there is already
    an image being passed back. *@
    @foreach (var Floorset in floorsets)
    {
        var ImageSrc = "";
        var fimage = Floorset.FLOORSET_IMAGE;
        //the if statement is checking if the byte array
        //is null or if is set to the default
        //because the floorset was just created it evaluates to
        //true. If there is an image being passed back
        //to display it should evaluate to false and hit
        //the else statement
        if (fimage == null || fimage.Length == 0 || fimage.All(b => b == 0))
        {
            ImageSrc = "/img/default_floorset.png";
        }
        else
        {
            ImageSrc = $"data:image/jpeg;base64,{Convert.ToBase64String(fimage)}";
        }

        <Card>
            <a href="@($"/floorset-editor/{StoreId}/{Floorset.TUID}")" class="w-100 ratio ratio-4x3">
                <CardImage Image="@ImageSrc" />
            </a>
            <CardBody>
                <CardTitle class="over-hidden" style="width: 100%;">
                    <a class="text-truncate" href="@($"/floorset-editor/{StoreId}/{Floorset.TUID}")">
                        <span class="d-inline-block text-truncate" style="max-width: 100%;">@Floorset.NAME</span>
                    </a>
                </CardTitle>

                <AuthorizeView Policy="Manager">
                    <Dropdown Class="Dropdown" Id="@Floorset.TUID.ToString()" LabelText="Floorset">
                        <DropdownLink data-bs-toggle="modal" data-bs-target="@($"#edit-floorset-{Floorset.TUID}")"
                            Icon="fa-solid fa-pen-to-square">
                            Edit
                        </DropdownLink>
                        <DropdownLink Icon="fa-solid fa-copy" @onclick="async () => await OnCopyFloorsetClick(Floorset)">
                            Copy
                        </DropdownLink>
                        <DropdownLink Icon="fa-solid fa-trash-can" data-bs-toggle="modal"
                            data-bs-target="@($"#delete-floorset-{Floorset.TUID}")">
                            Delete
                        </DropdownLink>
                    </Dropdown>
                </AuthorizeView>
            </CardBody>
            @* <a href="@($"/floorset-editor/{floorset.TUID}")"></a> *@
        </Card>

        <AuthorizeView Policy="Manager">
            <EditFloorsetModal id="@($"edit-store-{Floorset.TUID}")" Floorset="Floorset" UpdateFloorsets="UpdateFloorsets"
                FloorsetId="Floorset.TUID" />

            <Modal id="@($"delete-floorset-{Floorset.TUID}")" class="standard">
                <ModalHeader Title="Confirm Deletion" Variant="danger" />
                <form @onsubmit="async () => {
                    await OnDeleteFloorsetSubmit(Floorset.TUID);
                    deleteTextInput = string.Empty;}">
                    @code {
                        private string? deleteTextInput;
                        private bool isDisabled => deleteTextInput != "DELETE";
                    }
                    <ModalBody>
                        <h5>Are you SURE you want to delete this Floorset?</h5>
                        <input class="form-control w-100" type="text" placeholder="If so, type DELETE below" required pattern="DELETE"
                            @bind-value="deleteTextInput" @bind-value:event="oninput" />
                    </ModalBody>

                    <ModalFooter>
                        <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                            data-bs-dismiss="modal">
                            Yes, Delete
                        </Button>
                    </ModalFooter>
                </form>
            </Modal>
        </AuthorizeView>
    }
</div>
<AuthorizeView Policy="Manager">
    <AddFloorsetModal id="create-floorset" UpdateFloorsets="UpdateFloorsets" StoreId="StoreId" />

    <Button Class="position-fixed bottom-0 end-0 m-3" TextAlignment="center" Variant="primary" Icon="fa-solid fa-plus"
        data-bs-toggle="modal" data-bs-target="#create-floorset">
        Add Floorset
    </Button>
</AuthorizeView>

<script src="js/copyFloorsetCard.js"></script>

@code {
    [Parameter] public required int StoreId { get; set; }
    private List<Data.Models.Floorsets.Floorset> floorsets = new List<Data.Models.Floorsets.Floorset>();
    private Data.Models.Stores.Store? Store {get;set;}

    string StoreImageSrc = "";

    private async Task UpdateFloorsets()
    {
        var response = await FloorsetsHttpClient.GetFloorsetsByStore(StoreId);

        if (response != null)
        {
            floorsets = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await StoresHttpClient.GetStore(StoreId);

        if (response != null)
        {
            Store = response;
            
            StoreImageSrc = $"data:image/jpeg;base64,{Convert.ToBase64String(response.BLUEPRINT_IMAGE!)}";
        }

        await UpdateFloorsets();
    }

    private async Task OnDeleteFloorsetSubmit(int floorsetId)
    {
        await FloorsetsHttpClient.DeleteFloorset(floorsetId);
        await UpdateFloorsets();
    }

    private async Task OnCopyFloorsetClick(Data.Models.Floorsets.Floorset Floorset)
    {
        Data.Models.Floorsets.CreateFloorset createFloorset = new Data.Models.Floorsets.CreateFloorset
        {
            NAME = Floorset.NAME,
            CREATED_BY = -1,
            DATE_CREATED = DateTime.Now,
            DATE_MODIFIED = DateTime.Now,
            MODIFIED_BY = -1,
            STORE_TUID = StoreId
        };

        await FloorsetsHttpClient.CreateFloorset(createFloorset);
        await UpdateFloorsets();
    }

}