@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient

@using Plot.Components.PartialComponents.SlideOut
@using Microsoft.AspNetCore.Components.Authorization
@using Plot.Data.Models.Fixtures

<SlideOutHeader>
    <h3 class="header " @onclick="ToggleAddFixture">
        <i class="fas fa-couch"></i> Add Fixture
    </h3>
</SlideOutHeader>

<SlideOutBody>
    <AuthorizeView Policy="Manager">
        <div class="p-3 mb-2 border-bottom">
            <div class="d-flex align-items-center m-0 gap-2">
                <div class="w-100 search-text">
                    <InputText class="form-control p-2 " id="search" type="search" placeholder="Search"
                        @bind-Value="FixtureSearch" @oninput="FixtureSearchChanged" />
                </div>
                <Button Variant="primary" Icon="fa-solid fa-arrow-up-short-wide" TextAlignment="center"
                    @onclick="OnSortAscendingClick" />
                <Button Variant="primary" Icon="fa-solid fa-arrow-down-wide-short" TextAlignment="center"
                    @onclick="OnSortDescendingClick" />
            </div>
            <div class="align-items-center mt-3 d-flex">
                <Button class="btn btn-large w-100" Variant="primary" data-bs-toggle="modal"
                    data-bs-target="#create-fixture">
                    <i class="fa-solid fa-plus" style="margin-right: .5rem;"></i>
                    Add Fixture
                </Button>
            </div>
        </div>


        @* Fixture Area *@
        <div class="p-3 mt-3 d-flex flex-column gap-4 mb-2 h-100">
            @* Create fixture tile for each fixture in dictionary *@
            @foreach (var fixtureModel in FixtureModels)
            {
                @if (FixtureSearch != "" && fixtureModel.NAME != null)
                {
                    @if (!fixtureModel.NAME.ToLower().Contains(FixtureSearch))
                    {
                        continue;
                    }
                }
                var ImageSrc = fixtureModel.ICON != null ?
                $"data:image/jpeg;base64,{Convert.ToBase64String(fixtureModel.ICON)}" :
                "https://placecats.com/200/200";

                <div class="d-flex align-items-center gap-3 grab-cursor" data-name="@fixtureModel.NAME"
                    data-fixture-tuid="@fixtureModel.TUID" data-store-tuid="@fixtureModel.STORE_TUID"
                    data-width="@fixtureModel.WIDTH" data-height="@fixtureModel.LENGTH" draggable="true"
                    ondragstart="window.createDraggable(event)" @ondragenter="() => FixtureDragged(fixtureModel)">
                    <img class="disable-select grab-cursor" src="@ImageSrc" alt="" draggable="false" width="100px"
                        height="100px" />
                    <p class="fixture-text m-0 disable-select text-truncate">@fixtureModel.NAME</p>
                    <Dropdown class="fixture-options ms-auto disable-select" id="@($"fixture-options{fixtureModel.NAME}")"
                        LabelText="Fixture">
                        <DropdownLink data-bs-target="@($"#edit-fixture-{fixtureModel.TUID}")" data-bs-toggle="modal"
                            @onclick="() => OnEditClick(fixtureModel)" Icon="fa-regular fa-pen-to-square">
                            Edit
                        </DropdownLink>
                        <DropdownLink data-bs-target="@($"#delete-fixture-model-{fixtureModel.TUID}")"
                            Icon="fa-regular fa-trash-can" data-bs-toggle="modal">
                            Delete
                        </DropdownLink>
                    </Dropdown>
                </div>
            }
        </div>
    </AuthorizeView>
</SlideOutBody>

@code {
    private string FixtureSearch = "";

    [Parameter] public required int StoreId { get; set; }
    [Parameter] public required List<Data.Models.Fixtures.FixtureModel> FixtureModels { get; set; }

    /* Danielle Smith - 3/24/2025
    added back add fixture stuff & also made it so expansions work properly with it */
    [Parameter] public EventCallback ToggleAddFixture { get; set; }

    [Parameter] public EventCallback OnFixtureClicked { get; set; }

    [Parameter] public EventCallback UpdateFixtureModels { get; set; }

    [Parameter] public EventCallback<Data.Models.Fixtures.FixtureModel> FixtureDraggedEvent { get; set; }

    private void FixtureSearchChanged(ChangeEventArgs e)
    {
        FixtureSearch = e.Value as String ?? "";
    }
    private void FixtureDragged(Data.Models.Fixtures.FixtureModel currFixture)
    {
        FixtureDraggedEvent.InvokeAsync(currFixture);
    }
    protected override async Task OnInitializedAsync()
    {
        await UpdateFixtureModels.InvokeAsync();
    }


    @*
    The FilterBtn function calls a JS function to flip the order of the fixture tiles.
    *@
    @* private async Task FilterBtn()
    {
        await JS.InvokeVoidAsync("flipOrder");
    } *@

    @* Tristan Calay
    Sort fixture models in ascending order by comparing fixture a to fixture b *@
    private void OnSortAscendingClick()
    {
        FixtureModels.Sort(delegate (Data.Models.Fixtures.FixtureModel a, Data.Models.Fixtures.FixtureModel b)
        {
            if (a.NAME == null && b.NAME == null) return 0;
            else if (a.NAME == null) return -1;
            else if (b.NAME == null) return 1;
            else return (a.NAME.CompareTo(b.NAME));
        });
    }

    @* Tristan Calay
    Sort fixture models in descending order by comparing fixture b to fixture a *@
    private void OnSortDescendingClick()
    {
        FixtureModels.Sort(delegate (Data.Models.Fixtures.FixtureModel a, Data.Models.Fixtures.FixtureModel b)
        {
            if (a.NAME == null && b.NAME == null) return 0;
            else if (a.NAME == null) return -1;
            else if (b.NAME == null) return 1;
            else return (b.NAME.CompareTo(a.NAME));
        });
    }

    @*
    The OnFixtureAddClick function calls a JS function to toggle the add fixture modal.
    *@
    private async Task OnFixtureAddClick()
    {
        await JS.InvokeVoidAsync("toggleModal", "addFixture", true);
    }

    @*
    The OnEditClick function is called when the user clicks the edit button on a fixture.
    *@
    private async Task OnEditClick(FixtureModel currFixture)
    {

        await Task.Run(() => Console.WriteLine(currFixture.NAME));
    }
}