@inject IJSRuntime JS

<div class="expanded">
    <div class="inner-container add-fixture-panel">
        <h3 class="header pt-3" @onclick="ToggleAddFixture">
            <i class="fas fa-couch"></i> Add Fixture
        </h3>
        <hr style="opacity:1">

        <!-- Search Bar -->
        <div class="p-3 mb-2 border-bottom">
            <div class="d-flex align-items-center m-0">
                <div class="w-100 search-text">
                    <TextInput class="form-control p-2 " Id="search" Label="" Type="search" placeholder="Search" />
                </div>
                <Button class="filter-btn mb-2" Icon="fa-solid fa-filter" OnClickFunction="FilterBtn" />
            </div>
            <div class="align-items-center mt-3 d-flex">
                <Button class="btn add-fixture btn-lg w-100 p-0" Variant="primary" OnClickFunction="OnFixtureAddClick">
                    <i class="fa-solid fa-plus" style="margin-right: .5rem;"></i>
                    Add Fixture
                </Button>
            </div>
        </div>


        @* Fixture Area *@
        <div class="fixture-area p-3 mt-3 d-flex mb-2">
            @* Create fixture tile for each fixture in dictionary *@
            @foreach (Fixture currFixture in Fixture.fixtures.Values)
            {
                <div class="fixture mb-3 grab-cursor" data-value="@currFixture.Name"
                    @ondragstart="@((e) => OnDragStart(e, currFixture.Length + " x" + currFixture.Width, "green" ))"
                    draggable="true" @ondragstart:preventDefault="true">
                    <div class="drag-start-area d-flex flex-row">
                        <img class="fixture-img disable-select grab-cursor" src="@currFixture.FixtureImg" alt="">
                        <p class="fixture-text m-2 disable-select grab-cursor">@currFixture.Name</p>
                    </div>
                    @{
                        @* Make a link to a modal for each fixture *@
                        string id = currFixture.Name.Replace(" ", "");
                        List<string> links = new List<string> { "#editFixture-" + id, "#deleteFixture-" + id };
                    }
                    <Dropdown DropdownLinks="@links" DropdownIcons="@icons" DropdownText="@texts"
                        class="fixture-options ms-auto disable-select" id="@(" fixture-options" + currFixture.Name)"
                        LabelText="Fixture">
                    </Dropdown>
                </div>
            }
        </div>
    </div>
</div>

@code {
    /* Danielle Smith - 3/24/2025
    added back add fixture stuff & also made it so expansions work properly with it */
    [Parameter] public EventCallback ToggleAddFixture { get; set; }

    /*
    The FilterBtn function calls a JS function to flip the order of the fixture tiles.
    */
    private async Task FilterBtn()
    {
        await JS.InvokeVoidAsync("flipOrder");
    }

    // Lists for holding icons and texts for the Dropdown component
    private List<string> icons = new List<string> { "fa-regular fa-pen-to-square", "fa-regular fa-trash-can" };
    private List<string> texts = new List<string> { "Edit", "Delete" };

    /*
    The OnDragStart function calls a JS function to create a draggable fixture.
    */
    private async Task OnDragStart(DragEventArgs e, string size, string color)
    {
        await JS.InvokeVoidAsync("createDraggable", e, size, color);
    }

    /*
    The OnFixtureAddClick function calls a JS function to toggle the add fixture modal.
    */
    private async Task OnFixtureAddClick()
    {
        await JS.InvokeVoidAsync("toggleModal", "addFixture", true);
    }
}
}