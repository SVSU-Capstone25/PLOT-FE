@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient

@using Plot.Components.PartialComponents.SlideOut

<SlideOutHeader>
    <h3 class="header pt-3" @onclick="ToggleAddFixture">
        <i class="fas fa-couch"></i> Add Fixture
    </h3>
</SlideOutHeader>

<SlideOutBody>
    <div class="p-3 mb-2 border-bottom">
        <div class="d-flex align-items-center m-0">
            <div class="w-100 search-text">
                <InputText class="form-control p-2 " id="search" type="search" placeholder="Search"
                    @bind-value="FixtureSearch" />
            </div>
            <Button class="filter-btn mb-2" Icon="fa-solid fa-filter" OnClickFunction="FilterBtn" />
        </div>
        <div class="align-items-center mt-3 d-flex">
            <Button class="btn btn-large w-100" Variant="primary" OnClickFunction="OnFixtureAddClick">
                <i class="fa-solid fa-plus" style="margin-right: .5rem;"></i>
                Add Fixture
            </Button>
        </div>
    </div>


    @* Fixture Area *@
    <div class="fixture-area p-3 mt-3 d-flex gap-4 mb-2">
        @* Create fixture tile for each fixture in dictionary *@
        @foreach (Data.Models.Fixtures.FixtureModel fixtureModel in FixtureModels)
        {
            var ImageSrc = fixtureModel.ICON != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(fixtureModel.ICON)}" :
            "https://placecats.com/200/200";

        <div class="fixture d-flex align-items-center gap-3 grab-cursor" data-value="@fixtureModel.NAME" draggable="true"
            data-width="@fixtureModel.WIDTH" data-height="@fixtureModel.LENGTH" ondragstart="createDraggable(event)"
            @ondragenter="() => FixtureDragged(fixtureModel)">
            <img class="fixture-img disable-select grab-cursor" src="@ImageSrc" alt="" draggable="false" />
            <p class="fixture-text m-0 disable-select text-truncate">@fixtureModel.NAME</p>
            <Dropdown class="fixture-options ms-auto disable-select" id="@($"fixture-options{fixtureModel.NAME}")"
                LabelText="Fixture">
                <DropdownLink href="@($"#editFixture-{fixtureModel.NAME}")" @onclick="() => OnEditClick(fixtureModel)"
                    Icon="fa-regular fa-pen-to-square">
                    Edit
                </DropdownLink>
                <DropdownLink data-bs-target="@($"#delete-fixture-model-{fixtureModel.TUID}")" Icon="fa-regular fa-trash-can" data-bs-toggle="modal">
                    Delete
                </DropdownLink>
            </Dropdown>
        </div>

            @* Delete store modal *@
            <Modal id="@($"delete-fixture-model-{fixtureModel.TUID}")" class=".z-1060 standard">
                <ModalHeader Title="Confirm Deletion" Variant="danger" />
                <form @onsubmit="async () => {
                    await OnDeleteFixtureModelSubmit(fixtureModel.TUID);
                    deleteTextInput = string.Empty;}">
                @code {
                    private string? deleteTextInput;
                    private bool isDisabled => deleteTextInput != "DELETE";
                }
                <ModalBody>
                    <h5>Are you SURE you want to delete this Fixture?</h5>
                    <input class="form-control w-100" type="text" placeholder="If so, type DELETE below" required pattern="DELETE"
                        @bind-value="deleteTextInput" @bind-value:event="oninput" />
                </ModalBody>

                <ModalFooter>
                    <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                        data-bs-dismiss="modal">
                        Yes, Delete
                    </Button>
                </ModalFooter>
            </form>
        </Modal>
                }
    </div>
</SlideOutBody>

@code {
    private string FixtureSearch = "";

    [Parameter] public required int StoreId { get; set; }
    [Parameter] public required List<Data.Models.Fixtures.FixtureModel> FixtureModels { get; set; }

    [SupplyParameterFromForm] private Data.Models.Fixtures.CreateFixtureModel? CreateFixtureModel { get; set; }

    /* Danielle Smith - 3/24/2025
    added back add fixture stuff & also made it so expansions work properly with it */
    [Parameter] public EventCallback ToggleAddFixture { get; set; }

    [Parameter] public EventCallback OnFixtureClicked { get; set; }

    [Parameter] public EventCallback UpdateFixtureModels { get; set; }

    [Parameter] public EventCallback<Data.Models.Fixtures.FixtureModel> FixtureDraggedEvent { get; set; }

    private void FixtureDragged(Data.Models.Fixtures.FixtureModel currFixture)
    {
        FixtureDraggedEvent.InvokeAsync(currFixture);
    }
    protected override async Task OnInitializedAsync()
    {
        await UpdateFixtureModels.InvokeAsync();
    }


    @*
    The FilterBtn function calls a JS function to flip the order of the fixture tiles.
    *@
    private async Task FilterBtn()
    {
        await JS.InvokeVoidAsync("flipOrder");
    }


    @*
    The OnFixtureAddClick function calls a JS function to toggle the add fixture modal.
    *@
    private async Task OnFixtureAddClick()
    {
        await JS.InvokeVoidAsync("toggleModal", "addFixture", true);
    }

    @*
    The OnEditClick function is called when the user clicks the edit button on a fixture.
    *@
    private async Task OnEditClick(Data.Models.Fixtures.FixtureModel currFixture)
    {

        await Task.Run(() => Console.WriteLine(currFixture.NAME));
    }

    private async Task OnDeleteFixtureModelSubmit(int fixtureModelId)
    {
        var response = await FixturesHttpClient.DeleteFixtureModel(fixtureModelId);

        if(response == System.Net.HttpStatusCode.OK) {
            await UpdateFixtureModels.InvokeAsync();
        }
    }
}