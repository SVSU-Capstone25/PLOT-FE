@inject IJSRuntime JS

@using Plot.Components.PartialComponents.NumericInput

@* Edit Fixture Modal *@  
@{

    string id = "";
    
    <Modal IsStatic=true Class="modal-xl fixture-modal" Id="editFixture" Title="Edit Fixture">
        <BodyContent>
            <TextInput Label="Name" Placeholder="Three Way Rack" Type="text" Value="@editedFixtureInfo?.Name" 
                ValueChanged="@(e=>{if (editedFixtureInfo != null) editedFixtureInfo.Name=e;})" />
            <div class="d-flex flex-row align-items-center justify-content-between">
                <div class="dimension">
                    <NumericInput Id="@(id + "-edit-length")" Class="dimension" Label="Length" Placeholder="2ft" Description="Enter the length in feet"
                    Value="@editedFixtureInfo?.Length" ValueChanged="(v) => {
                            if (editedFixtureInfo != null) {
                                editedFixtureInfo.Length = v;
                                // If the length and the width have values, calculate LF capacity
                                if (!editedFixtureInfo.Length.Equals(string.Empty) && !editedFixtureInfo.Width.Equals(string.Empty)) {
                                    editedFixtureInfo.UpdateLFCapacity();
                                    editedFixtureInfo.UpdateTotalLF();
                                } else {
                                    editedFixtureInfo.TotalLF = string.Empty;
                                }
                            }
                        }" />
                </div>
                @* The X to separate the two inputs *
                    @* Making X clickable to swap dimensions (Width -> Length; Length -> Width) -- Zach Ventimiglia *
                    Edited by Danielle Smith to use different implementation*@
                <i onclick="SwapDimensions('@(id + "-edit-length-number-input")','@(id + "-edit-width-number-input")')"
                class="fa-solid fa-xmark" style="cursor: pointer;"></i>

                <div class="dimension">
                    <NumericInput Id="@(id + "-edit-width")" Class="dimension" Label="Width" Placeholder="2ft" Description="Enter the width in feet"
                    Value="@editedFixtureInfo?.Width" ValueChanged="(v) => {
                            if (editedFixtureInfo != null) {
                                editedFixtureInfo.Width = v;
                                // If the length and the width have values, calculate LF capacity
                                if (!editedFixtureInfo.Length.Equals(string.Empty) && !editedFixtureInfo.Width.Equals(string.Empty)) {
                                    editedFixtureInfo.UpdateLFCapacity();
                                    editedFixtureInfo.UpdateTotalLF();
                                } else {
                                    editedFixtureInfo.TotalLF = string.Empty;
                                }
                            }
                        }" />
                </div>
            </div>

            <NumericInput Id="@(id + "-edit-LFCapacity")" Label="Linear Feet Capacity" Placeholder="2ft"
            Description="Enter the capacity of the first layer of hangers on the rack in feet" ReadOnly="true"
            Value="@editedFixtureInfo?.LFCapacity" ValueChanged="(v) => {
                        if (editedFixtureInfo != null) {
                            editedFixtureInfo.LFCapacity = v;
                            // If the LF capacity and the hanger stack have values, calculate total LF
                            if (!editedFixtureInfo.LFCapacity.Equals(string.Empty) && !editedFixtureInfo.HangerStack.Equals(string.Empty)) {
                                editedFixtureInfo.UpdateTotalLF();
                            } else {
                                editedFixtureInfo.TotalLF = string.Empty;
                            }
                        }
                    }" />

            <NumericInput Id="@(id + "-edit-HangerStack")" Label="Hanger Stack" Placeholder="2" Description="Enter the number of vertically stacked racks"
            Value="@editedFixtureInfo?.HangerStack" ValueChanged="(v) => {
                        if (editedFixtureInfo != null) {
                            editedFixtureInfo.HangerStack = v;
                            // If the LF capacity and the hanger stack have values, calculate total LF
                            if (editedFixtureInfo.LFCapacity != null && !editedFixtureInfo.LFCapacity.Equals(string.Empty) && !editedFixtureInfo.HangerStack.Equals(string.Empty)) {
                                editedFixtureInfo.UpdateTotalLF();
                            } else {
                                editedFixtureInfo.TotalLF = string.Empty;
                            }
                        }
                    }" />

            <NumericInput Id="@(id + "-edit-TotalLF")" Label="Total Linear Feet" Placeholder="4"
            Description="The final calculation of linear feet (LF capacity x hanger stack)" Value="@editedFixtureInfo?.TotalLF"
            ValueChanged="(v)=>{if (editedFixtureInfo != null) editedFixtureInfo.TotalLF = v;}"
            ReadOnly="true" />

            <div class="img-input">
                <ImageInput Height="400px" Width="400px" Label="Fixture Image" 
                Id="@("ImageInput-" + editedFixtureInfo?.Name)"/>
            </div>
        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async () => {
                    await UpdateFixture(id);                    
                })>
                Update
            </Button>
        </FooterContent>
    </Modal>

    <Modal Title="Delete Fixture"  Id="deleteFixture">

        <BodyContent>
            Are you sure you want to delete "@(deletingFixture?.Name ?? "")" ?
        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async ()=>{
                    DeleteFixture(id);
                    await JS.InvokeVoidAsync("toggleModal","deleteFixture"+id,false);
                })>
                Delete
            </Button>
        </FooterContent>
    </Modal>
}

@code {
    public Fixture? selectedFixture;
    public Fixture? editedFixtureInfo;
    public Fixture? deletingFixture;

    protected override void OnParametersSet() {
        selectedFixture = AddFixturePanel.selectedFixture;
        editedFixtureInfo = AddFixturePanel.editedFixtureInfo;
    }

    /*
        The UpdateFixture function refreshes the current fixture and closes the Edit Fixture modal.
    */
    public async Task UpdateFixture(string id)
    {
        // If the fixture has valid values, remove and readd the fixture with the new name, 
        // since the dictionary key is the fixture name.
        if (editedFixtureInfo != null && selectedFixture != null) {
            if (!editedFixtureInfo.HasNullProperties()) {
                await JS.InvokeVoidAsync("toggleModal","editFixture-"+id,false);
                Fixture.fixtures.Remove(selectedFixture.Name);
                Fixture.fixtures.Add(editedFixtureInfo.Name,editedFixtureInfo);
            } else {
                // If not, tell the user to fill out all fields.
                await JS.InvokeVoidAsync("displayAlert","Please fill out all fields.");
            }        
        }

    }

    /*
        The DeleteFixture function removes the fixture from the dictionary, 
        removing it from the fixture area in the sidebar.
    */
    public void DeleteFixture(string id) 
    {

        Fixture.fixtures.Remove(deletingFixture?.Name ?? "");
    }
}