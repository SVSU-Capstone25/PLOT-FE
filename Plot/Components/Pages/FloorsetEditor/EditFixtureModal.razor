@inject IJSRuntime JS

@* Edit Fixture Modal *@


<Modal @attributes="Attributes" SizeClass="modal-lg">
    <ModalHeader Title="Update Fixture Information" />
    <EditForm Model="EditFixtureModel" OnValidSubmit="async () => await OnEditFixtureSubmit()">
        @*
        <AddUpdateStoreModalBody AddUpdateStoreModel="EditStoreModel" StoreId="StoreId" />
        *@
        <AddUpdateFixtureModalBody AddUpdateFixtureModel="UpdateFixtureModel" FixtureModelId="FixtureModelID" />
        <ModalFooter OnCancelClick="ClearEditFixtureModel">
            <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                Update Fixture
            </Button>
        </ModalFooter>
    </EditForm>
</Modal>






@code {
    [Parameter] public required Data.Models.Fixtures.FixtureModel Model { get; set; }
    [Parameter] public required EventCallback UpdateFixtureModel { get; set; }
    [Parameter] public required int FixtureModelId { get; set; }

    [SupplyParameterFromForm] private Data.Models.Fixtures.UpdateFixtureModel? EditFixtureModel { get; set; }

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    protected override void OnInitialized()
    {
        EditFixtureModel ??= new Data.Models.Fixtures.UpdateFixtureModel
        {
            NAME = Model.NAME!,
            WIDTH = Model.WIDTH,
            HEIGHT = Model.HEIGHT,
            LF_CAP = Model.LF_CAP,
            ICON = Model.ICON,

        };
    }

    private async Task OnEditFixtureSubmit()
    {
        await Task.Run(() => Console.WriteLine("Update Fixture: " + FixtureModelId));

        if (EditFixtureModel == null) return;


        var response = await FixturesHttpClient.UpdateFixtureModel(StoreId, EditStoreModel);

        Console.WriteLine(response);

        if (response != System.Net.HttpStatusCode.OK) return;

        await UpdateFixtureModel.InvokeAsync();

        //usersToAdd.Clear();

        //ClearEditStoreModel();

        StateHasChanged();
    }

    private void ClearEditFixtureModel()
    {
        EditFixtureModel = new();
    }
}