@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient
@inject ToastService ToastService

@using Plot.Services

@* Edit Fixture Modal *@

<Modal @attributes="Attributes" SizeClass="modal-lg">
    <ModalHeader Title="Edit Fixture" />
    <EditForm Model="EditFixtureModel" OnValidSubmit="async () => await OnEditFixtureSubmit()">

        <AddUpdateFixtureModalBody AddUpdateFixtureModel="EditFixtureModel" FixtureId="FixtureId" />

        <ModalFooter OnCancelClick="ClearEditFixtureModel">
            <Button class="btn add-btn ms-auto" Variant="primary" type="submit" data-bs-dismiss="modal">Save</Button>
        </ModalFooter>
    </EditForm>
</Modal>

@code {
    /// <summary>
    /// Holds the current fixture that is being edited.
    /// </summary>
    [Parameter] public required Data.Models.Fixtures.FixtureModel Fixture { get; set; }

    /// <summary>
    /// Method passed in from parent (Floorset Editor) to update the current fixture modals.
    /// </summary>
    [Parameter] public EventCallback UpdateFixtureModels { get; set; }
    
    /// <summary>
    /// Captures and stores any additional attributes that are not explicitly defined on the component.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }
    
    /// <summary>
    /// Stores the fixture ID of the current fixture.
    /// </summary>
    [Parameter] public required int FixtureId { get; set; }
    
    /// <summary>
    /// Stores the current store ID.
    /// </summary>
    [Parameter] public required int StoreId { get; set; }

    /// <summary>
    /// Model used to set/get values of fixtures from the Edit Modal form.
    /// </summary>
    [SupplyParameterFromForm] private Data.Models.Fixtures.CreateFixtureModel? EditFixtureModel { get; set; } = new();

    /// <summary>
    /// Creates a new EditFixtureModel with the data from 
    /// the current fixture.
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    protected override void OnParametersSet()
    {
        //if (Fixture != null)
        //{
        Console.WriteLine("Reached");
        EditFixtureModel = new Data.Models.Fixtures.CreateFixtureModel
        {

            NAME = Fixture.NAME!,
            WIDTH = Fixture.WIDTH!,
            LENGTH = Fixture.LENGTH!,
            LF_CAP = Fixture.LF_CAP!,
            STORE_TUID = Fixture.STORE_TUID!,
            ICON = Fixture.ICON,
        };
        //}
    }

    /// <summary>
    /// Sends the current data from the EditFixtureModel to the FixturesHttpClient
    /// to update the fixture in the database.
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    public async Task OnEditFixtureSubmit()
    {
        if (EditFixtureModel == null)
        {
            ToastService.ShowError("There was an error editing the fixture!");
            return;
        }
        await Task.Run(() => Console.WriteLine("Edit Fixture"));

        if (EditFixtureModel != null)
        {
            var response = await FixturesHttpClient.UpdateFixtureModel(FixtureId, EditFixtureModel);

            if (response != System.Net.HttpStatusCode.OK)
            {
                ToastService.ShowError("There was an error editing the fixture!");
            }
            else
            {
                await UpdateFixtureModels.InvokeAsync();
                ToastService.ShowSuccess("Your edits have been saved!");
            }
        }


        ClearEditFixtureModel();
    }

    /// <summary>
    /// Clears the current EditFixtureModel.
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    private void ClearEditFixtureModel()
    {
        EditFixtureModel = new();
    }
}