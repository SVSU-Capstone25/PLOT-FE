@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient

@* Edit Fixture Modal *@

<Modal @attributes="Attributes" SizeClass="modal-xl">
    <ModalHeader Title="Edit Fixture" />
    <EditForm Model="EditFixtureModel" OnValidSubmit="async () => await OnEditFixtureSubmit()">

        <AddUpdateFixtureModalBody AddUpdateFixtureModel="EditFixtureModel" />

        <ModalFooter OnCancelClick="ClearEditFixtureModel">
            <Button class="btn add-btn ms-auto" Variant="primary" type="submit" data-bs-dismiss="modal">Save</Button>
        </ModalFooter>
    </EditForm>
</Modal>

@code {
    [Parameter] public required Data.Models.Fixtures.FixtureModel Fixture { get; set; }

    [Parameter] public EventCallback UpdateFixtureModels { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }
    [Parameter] public required int FixtureId { get; set; }
    [Parameter] public required int StoreId { get; set; }
    [SupplyParameterFromForm] private Data.Models.Fixtures.CreateFixtureModel? EditFixtureModel { get; set; } = new();

    protected override void OnInitialized()
    {
        if (Fixture != null)
        {
            EditFixtureModel ??= new Data.Models.Fixtures.CreateFixtureModel
            {
                NAME = Fixture.NAME!,
                WIDTH = Fixture.WIDTH!,
                LENGTH = Fixture.LENGTH!,
                LF_CAP = Fixture.LF_CAP!,
                STORE_TUID = Fixture.STORE_TUID!,
                ICON = Fixture.ICON,
            };
        }
    }

    public async Task OnEditFixtureSubmit()
    {
        await Task.Run(() => Console.WriteLine("Edit Fixture"));

        if (EditFixtureModel != null)
        {
            var response = await FixturesHttpClient.UpdateFixtureModel(FixtureId, EditFixtureModel);

            await UpdateFixtureModels.InvokeAsync();
        }

        ClearEditFixtureModel();
    }

    private void ClearEditFixtureModel()
    {
        EditFixtureModel = new();
    }
}