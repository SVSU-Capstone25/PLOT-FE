@inject IJSRuntime JS

@* Edit Fixture Modal *@


<Modal @attributes="Attributes" SizeClass="modal-lg">
    <ModalHeader Title="Update Fixture Information" />
    <EditForm Model="EditFixtureModel" OnValidSubmit="async () => await OnEditFixtureSubmit()">
        @*
        <AddUpdateStoreModalBody AddUpdateStoreModel="EditStoreModel" StoreId="StoreId" />
        *@
        <AddUpdateFixtureModalBody />
        <ModalFooter OnCancelClick="ClearEditStoreModel">
            <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                Update Store
            </Button>
        </ModalFooter>
    </EditForm>
</Modal>







@{
    <Modal class="modal-xl fixture-modal" id="EditFixture">
        <ModalHeader Title="Edit Fixture" />
        <EditForm Model="EditFixtureModel" OnValidSubmit="OnEditFixtureSubmit">
            <ModalBody>
                <label>
                    Name
                    <InputText @bind-value="EditFixtureModel!.NAME">Three Way Rack</InputText>
                </label>
                <div class="row">
                    <div class="col-md-5">
                        <label>
                            Length
                            <InputNumber @bind-Value="EditFixtureModel!.LENGTH" />
                        </label>
                    </div>
                    <div class="col-md-auto my-auto">
                        <i class="fa-solid fa-xmark mx-auto mt-4 ms-3"></i>
                    </div>
                    <div class="col-md-5">
                        <label>
                            Width
                            <InputNumber @bind-Value="EditFixtureModel!.WIDTH" />
                        </label>
                    </div>
                </div>

                <label>
                    Linear Feet Capacity
                    <InputNumber @bind-Value="EditFixtureModel!.LF_CAP" />
                </label>

                <label>
                    Total Linear Feet
                    @EditFixtureModel!.WIDTH * @EditFixtureModel!.LENGTH
                    @* <InputNumber @bind-Value="TotalLinearFeet" disabled /> *@
                </label>

                <div class="img-input">
                    <ImageInput Height="400px" Width="400px" Label="Fixture Image" Id="Edit-fixtureimg" />
                </div>
            </ModalBody>
            <ModalFooter>
                <Button class="btn Edit-btn ms-auto" Variant="primary" type="submit">Edit</Button>
            </ModalFooter>
        </EditForm>
    </Modal>
}

@code {
    [Parameter] public required Data.Models.Fixtures.FixtureModel Model { get; set; }
    [Parameter] public required EventCallback UpdateFixtureModel { get; set; }
    [Parameter] public required int FixtureModelId { get; set; }

    [SupplyParameterFromForm] private Data.Models.Fixtures.UpdateFixtureModel? EditFixtureModel { get; set; }

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    protected override void OnInitialized()
    {
        EditFixtureModel ??= new Data.Models.Fixtures.UpdateFixtureModel
        {
            NAME = Model.NAME!,
            WIDTH = Model.WIDTH,
            HEIGHT = Model.HEIGHT,
            LF_CAP = Model.LF_CAP,

            ICON = Model.ICON,

        };
    }

    private async Task OnEditStoreSubmit()
    {
        await Task.Run(() => Console.WriteLine("Update store: " + StoreId));

        if (EditStoreModel == null) return;


        if (usersToAdd.Count > 0)
        {
            EditStoreModel.USER_TUIDS = "";
            foreach (var user in usersToAdd)
            {
                EditStoreModel.USER_TUIDS += user.TUID + ",";
            }
            if (EditStoreModel.USER_TUIDS != null)
            {
                EditStoreModel.USER_TUIDS = EditStoreModel.USER_TUIDS.TrimEnd(',');
            }
        }

        var response = await StoresHttpClient.UpdatePublicInfo(StoreId, EditStoreModel);

        Console.WriteLine(response);

        if (response != System.Net.HttpStatusCode.OK) return;

        await UpdateStores.InvokeAsync();

        usersToAdd.Clear();

        //ClearEditStoreModel();

        StateHasChanged();
    }

    private void ClearEditStoreModel()
    {
        EditStoreModel = new();
    }
}