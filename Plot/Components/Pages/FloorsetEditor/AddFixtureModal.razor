@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient
@inject ToastService ToastService
@using Plot.Services

@* Add Fixture Modal *@

<Modal @attributes="Attributes" SizeClass="modal-lg">
    <ModalHeader Title="Add Fixture" />
    <EditForm Model="AddFixtureModel" OnValidSubmit="async () => await OnAddFixtureSubmit()">

        <AddUpdateFixtureModalBody AddUpdateFixtureModel="AddFixtureModel" />

        <ModalFooter OnCancelClick="ClearAddFixtureModel">
            <Button class="btn add-btn ms-auto" Variant="primary" type="submit" data-bs-dismiss="modal">Add</Button>
        </ModalFooter>
    </EditForm>
</Modal>

@code {
    /// <summary>
    /// Method passed in from parent (Floorset Editor) to update the current fixture modals.
    /// </summary>
    [Parameter] public EventCallback UpdateFixtureModels { get; set; }

    /// <summary>
    /// Captures and stores any additional attributes that are not explicitly defined on the component.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    /// <summary>
    /// Stores the current store ID.
    /// </summary>
    [Parameter] public required int StoreId { get; set; }

    /// <summary>
    /// Model used to set/get values of fixtures from the Add Modal form.
    /// </summary>
    [SupplyParameterFromForm] private Data.Models.Fixtures.CreateFixtureModel? AddFixtureModel { get; set; }

    /// <summary>
    /// The linear feet of the fixture, stored locally for calculations.
    /// </summary>
    private string LinearFeet = "";

    /// <summary>
    /// Creates a new AddFixtureModel when the modal is created.
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    protected override void OnInitialized()
    {
        AddFixtureModel ??= new();
    }

    /// <summary>
    /// Sends the current data from the AddFixtureModel to the FixturesHttpClient
    /// to create a new fixture in the database.
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    public async Task OnAddFixtureSubmit()
    {
        await Task.Run(() => Console.WriteLine("Add Fixture"));

        if (AddFixtureModel != null)
        {
            var response = await FixturesHttpClient.CreateFixtureModel(StoreId, AddFixtureModel);

            await UpdateFixtureModels.InvokeAsync();
            ToastService.ShowSuccess("The fixture was created.");
        }
        else
        {
            ToastService.ShowError("There was an error adding a fixture!");
        }

        ClearAddFixtureModel();
    }

    /// <summary>
    /// Updates the current linear feet of the fixture
    /// when the length field changes
    /// </summary>
    /// <param name="e"> ChangeEventArgs object that holds the event properties </param>
    /// <returns> void </returns>
    public void HandleLengthChange(ChangeEventArgs e)
    {
        // Parse Length - Send value if there is one, else send null
        int? Length = int.TryParse(e.Value?.ToString(), out int result) ? (int?)result : null;
        CalcLinearFeet(Length, AddFixtureModel!.WIDTH);
    }

    /// <summary>
    /// Updates the current linear feet of the fixture
    /// when the width field changes
    /// </summary>
    /// <param name="e"> ChangeEventArgs object that holds the event properties </param>
    /// <returns> void </returns>
    public void HandleWidthChange(ChangeEventArgs e)
    {
        // Parse Width - Send value if there is one, else send null
        int? Width = int.TryParse(e.Value?.ToString(), out int result) ? (int?)result : null;
        CalcLinearFeet(AddFixtureModel!.LENGTH, Width);
    }

    /// <summary>
    /// Calculates the current linear feet of the fixture.
    /// </summary>
    /// <param name="length"> the length of the fixture</param>
    /// <param name="width"> the width of the fixture</param>
    /// <returns> void </returns>
    public void CalcLinearFeet(int? length, int? width)
    {
        // Calculates linear feet (length * width) and sets text of bound
        // LinearFeet variable to result, or empty if length
        // or width is not defined

        if (length.HasValue && width.HasValue)
        {
            LinearFeet = (length.Value * width.Value).ToString();
        }
        else
        {
            LinearFeet = "";
        }
        StateHasChanged();
    }

    /// <summary>
    /// Clears the current AddFixtureModel.
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    private void ClearAddFixtureModel()
    {
        AddFixtureModel = new();
    }
}