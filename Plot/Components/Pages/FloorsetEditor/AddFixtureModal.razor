@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient

@* Add Fixture Modal *@

<Modal class="modal-xl fixture-modal" id="add-fixture" OnCancelClick="">
    <ModalHeader Title="Add Fixture" />
    <EditForm Model="AddFixtureModel" OnValidSubmit="OnAddFixtureSubmit">
        <ModalBody>
            <label class="w-100 d-flex">
                <span class="mt-2 me-2 fw-bold">Name</span>
                <InputText @bind-value="AddFixtureModel!.NAME" class="form-control">Three Way Rack</InputText>
            </label>
            <div class="d-flex align-items-center w-100 gap-3 my-2">
                <label class="d-flex align-items-center flex-fill">
                    <span class="fw-bold me-2">Length</span>
                    <div class="flex-grow-1">
                        <InputNumber @bind-Value="AddFixtureModel!.LENGTH"
                        @oninput="HandleLengthChange"
                        class="form-control" />
                    </div>
                </label>

                <div class="d-flex justify-content-center align-items-center">
                    <i class="fa-solid fa-xmark fs-4"></i>
                </div>

                <label class="d-flex align-items-center flex-fill my-2">
                    <span class="fw-bold me-2">Width</span>
                    <div class="flex-grow-1">
                        <InputNumber @bind-Value="AddFixtureModel!.WIDTH"
                        @oninput="HandleWidthChange"
                        class="form-control" />
                    </div>
                </label>
            </div>

            <label class="w-100 d-flex my-2">
                <span class="fw-bold">Linear Feet Capacity</span>
                <InputNumber @bind-Value="AddFixtureModel!.LF_CAP"/>
            </label>

            <label class="w-100 d-flex">
                <span class="fw-bold">Linear Feet: @LinearFeet </span>
            </label>

            <ImageInput Label="Upload Image" Id="@($"ImageUpload-{StoreId}")" Height="300px"
                OnImageUpload="OnImageUpload" ImageSrc="ImageSrc" />
        </ModalBody>
        <ModalFooter OnCancelClick="ClearAddFixtureModel">
            <Button class="btn add-btn ms-auto" Variant="primary" type="submit" data-bs-dismiss="modal">Add</Button>
        </ModalFooter>
    </EditForm>
</Modal>

@code {

    [Parameter] public EventCallback UpdateFixtureModels { get; set; }

    [Parameter] public required int StoreId { get; set; }

    [SupplyParameterFromForm] private Data.Models.Fixtures.CreateFixtureModel? AddFixtureModel { get; set; }

    private string LinearFeet = "";

    protected override void OnInitialized()
    {
        AddFixtureModel ??= new();
    }

    public async Task OnAddFixtureSubmit()
    {
        await Task.Run(() => Console.WriteLine("Add Fixture"));

        if (AddFixtureModel != null)
        {
            var response = await FixturesHttpClient.CreateFixtureModel(StoreId, AddFixtureModel);

            await UpdateFixtureModels.InvokeAsync();
        }

        ClearAddFixtureModel();
    }

    public void HandleLengthChange(ChangeEventArgs e)
    {
        // Parse Length - Send value if there is one, else send null
        int? Length = int.TryParse(e.Value?.ToString(), out int result) ? (int?)result : null;
        CalcLinearFeet(Length, AddFixtureModel!.WIDTH);
    }

    public void HandleWidthChange(ChangeEventArgs e)
    {
        // Parse Width - Send value if there is one, else send null
        int? Width = int.TryParse(e.Value?.ToString(), out int result) ? (int?)result : null;
        CalcLinearFeet(AddFixtureModel!.LENGTH, Width);
    }

    public void CalcLinearFeet(int? length, int? width){
        // Calculates linear feet (length * width) and sets text of bound
        // LinearFeet variable to result, or empty if length
        // or width is not defined

        if (length.HasValue && width.HasValue)
        {
            LinearFeet = (length.Value * width.Value).ToString();
        }
        else
        {
            LinearFeet = "";
        }
        StateHasChanged();
    }

    private async Task OnImageUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();

        AddFixtureModel!.ICON = bytes;
    }

    private void ClearAddFixtureModel()
    {
        AddFixtureModel = new();
    }
}