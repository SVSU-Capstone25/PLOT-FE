@inject IJSRuntime JS

@using Plot.Components.PartialComponents.NumericInput

@* Add Fixture Modal *@
@{    
    <Modal Class="modal-xl fixture-modal" Id="addFixture" Title="Add Fixture" IsStatic=true OnCancelFunction="ClearTempFixtureData">
        <BodyContent>
            <TextInput Label="Name" Placeholder="Three Way Rack" Type="text" Value="@ModalName" ValueChanged="@((v)=> ModalName = v)"/>
            <div class="d-flex flex-row align-items-center justify-content-between">

                <div class="dimension">
                    <NumericInput Id="add-length" Class="dimension" Label="Length" Placeholder="2ft" Description="Enter the length in feet"
                    Value="@ModalLength" ValueChanged="(v) => {
                            ModalLength = v;
                            // If the length and width boxes have values, calculate the LF capacity
                            if (!ModalLength.Equals(string.Empty) && !ModalWidth.Equals(string.Empty)) {
                                try {
                                    ModalLFCapacity = (int.Parse(ModalLength) * int.Parse(ModalWidth)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                                // If the LF capacity and the hanger stack have values, calculate total LF
                                try {
                                    ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                            } else {
                                ModalTotalLF = string.Empty;
                            }
                        }" />
                </div>

                    @* The X to separate the two inputs *
                    @* Making X clickable to swap dimensions (Width -> Length; Length -> Width) -- Zach Ventimiglia *
                    Edited by Danielle Smith to use different implementation*@
                <i class="fa-solid fa-xmark" onclick="SwapDimensions('add-length-number-input','add-width-number-input')" 
                style="cursor: pointer;"></i>

                <div class="dimension">
                    <NumericInput Id="add-width" Class="dimension" Label="Width" Placeholder="2ft" Description="Enter the width in feet"
                    Value="@ModalWidth" ValueChanged="(v) => {
                            ModalWidth = v;
                            // If the length and width boxes have values, calculate the LF capacity
                            if (!ModalLength.Equals(string.Empty) && !ModalWidth.Equals(string.Empty)) {
                                try {
                                    ModalLFCapacity = (int.Parse(ModalLength) * int.Parse(ModalWidth)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                                // If the LF capacity and the hanger stack have values, calculate total LF
                                try {
                                    ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                            } else {
                                ModalTotalLF = string.Empty;
                            }
                        }" />
                </div>
            </div>

            <NumericInput Id="add-lfcapacity" Label="Linear Feet Capacity" Placeholder="2ft"
            Description="Enter the capacity of the first layer of hangers on the rack in feet" ReadOnly="true"
            Value="@ModalLFCapacity" ValueChanged="@(v => {
                        ModalLFCapacity = v; 
                        
                        // If the LF capacity and the hanger stack have values, calculate total LF
                        if (ModalLFCapacity.Equals("") || ModalHangerStack.Equals("")) {
                            ModalTotalLF = "";
                        } else {
                            try {
                                ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)).ToString();
                            } catch (FormatException e) {
                                Console.WriteLine(e.GetBaseException());
                            }
                        }
                    })" />

            <NumericInput Id="add-hanger-stack" Label="Hanger Stack" Placeholder="2" Description="Enter the number of vertically stacked racks"
            Value="@ModalHangerStack" ValueChanged="@(v => {
                        ModalHangerStack = v; 
                        
                        // If the LF capacity and the hanger stack have values, calculate total LF
                        if (ModalLFCapacity.Equals("") || ModalHangerStack.Equals("")) {
                            ModalTotalLF = "";
                        } else {
                            try {
                                ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)).ToString();
                            } catch (FormatException e) {
                                Console.WriteLine(e.GetBaseException());
                            }
                        }
                    })" />

            <NumericInput Id="add-total-lf" Label="Total Linear Feet" Placeholder="4"
            Description="The final calculation of linear feet (LF capacity x hanger stack)" ReadOnly="true" @bind-value="ModalTotalLF" />


            <div class="img-input">
                <ImageInput Height="400px" Width="400px" Label="Fixture Image" 
                Id="add-fixtureimg" />
            </div>




        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async (e) => {
                await AddFixture();
                StateHasChanged();
            })>Add</Button>
        </FooterContent>
    </Modal>
}

<script>
    function SetFixtureImage(elementID,strUrl) {

    }

</script>


@code {
    // Temporary fields for the Add Fixture modal.
    string ModalName = "";
    string ModalLength = "";
    string ModalWidth = "";
    string ModalLFCapacity = "";
    string ModalHangerStack = "";
    string ModalTotalLF = "";

    /*
        The AddFixture function adds the fixture to the dictionary and clears the temporary fields.
    */
    public async Task AddFixture()
    {
        try {
            Fixture newFixture = new Fixture(
                ModalName,
                ModalLength,
                ModalWidth,
                ModalHangerStack,
                await getImageUrlAdd()
            );

            // If the fixture has valid values, add to the dictionary and close the modal.
            if (!newFixture.HasNullProperties()) {
                Fixture.fixtures.Add(newFixture.Name, newFixture);
                await JS.InvokeVoidAsync("toggleModal","addFixture",false);
                await ClearTempFixtureData();
                StateHasChanged();
            } else {
                // If not, tell the user to fill out all fields.
                await JS.InvokeVoidAsync("displayAlert","Please fill out all fields.");
            }
            
        } catch (ArgumentException)
        {
            // If the name matches an existing fixture, tell the user to choose another name.
            await JS.InvokeVoidAsync("displayAlert",
                "A fixture with that name has already been used.  Please choose another name.");
        }

    
    }

    // function to get the url of the image. This calls the JS method getBackgroundImageUrl that grabs the URL form the imageInput style tag
    private async Task<string> getImageUrlAdd()
    {
        string strImageUrl = await JS.InvokeAsync<string>("getBackgroundImageUrl", "add-fixtureimg");

        // Check if the string is null or empty, return default image if true
        return string.IsNullOrEmpty(strImageUrl) ? "/img/LayoutPhotoExample.png" : strImageUrl;
    }

    /*
        The ClearTempFixtureData function clears the data from the fields in the Add Fixture modal.
    */
    [JSInvokable]
    public async Task ClearTempFixtureData() {
        ModalName = "";
        ModalLength = "";
        ModalWidth = "";
        ModalLFCapacity = "";
        ModalHangerStack = "";
        ModalTotalLF = "";

        await JS.InvokeVoidAsync("ClearBackgroundImage","add-fixtureimg");

    }
}