@* @inject IJSRuntime JS *@
<!-- Author: Andrew Fulton, Andrew Kennedy
The floorset fixture config modal allows right-click editing of a fixture on the floorset grid.
It allows changing the category, hanging, and notes of a fixture.
It also allows you to delete a fixture on the grid. -->
@* Add fixture edit modal to the floorset editor. - Tristan Calay *@

@inject SalesHttpClient SalesHttpClient
@inject FixturesHttpClient FixturesHttpClient
@inject IJSRuntime JSRuntime

@using Plot.Components.PartialComponents.OptionInput
@using Microsoft.JSInterop;
@using Plot.Data.Models.Fixtures

@* TODO: Fixture employee painting happening when dragging to make the text area bigger *@
<div id="fixtureContextMenu" class="dropdown z-0 position-absolute">
    <div class="dropdown-menu">
        <EditForm Model="UpdateFixtureInstanceModel" OnValidSubmit="OnUpdateFixtureInstanceSubmit"
            class="d-flex flex-column justify-content-center">
            <div>
                <p class="px-4 dropdown-header">Fixture Configuration</p>
                <h5 class="px-4">@FixtureInstance?.NAME</h5>
            </div>

            <div class="dropdown-divider"></div>

            <div class="d-flex flex-column gap-2 px-2">
                <OptionInput>
                    <OptionInputHeader>Select Category</OptionInputHeader>
                    <InputSelect class="form-select" @bind-Value="@UpdateFixtureInstanceModel!.SUBCATEGORY">
                        <OptionInputOption selected="@(UpdateFixtureInstanceModel?.SUBCATEGORY == null)" value="">None
                        </OptionInputOption>
                        @foreach (var Subcategory in Subcategories.Keys.ToList())
                        {
                            <OptionInputOption value="@Subcategory"
                                selected="@(UpdateFixtureInstanceModel?.SUBCATEGORY == Subcategory)">
                                @Subcategory</OptionInputOption>
                        }
                    </InputSelect>
                </OptionInput>
            </div>

            <br />

            <div class="d-flex flex-column gap-2 px-2">
                <OptionInput>
                    <OptionInputHeader>Select Hanging</OptionInputHeader>
                    <InputSelect class="form-select" @bind-Value="UpdateFixtureInstanceModel!.HANGER_STACK">
                        <OptionInputOption value="1" selected="@(FixtureInstance?.HANGER_STACK == 1)">Single Hung
                        </OptionInputOption>
                        <OptionInputOption value="2" selected="@(FixtureInstance?.HANGER_STACK == 2)">Double Hung
                        </OptionInputOption>
                        <OptionInputOption value="3" selected="@(FixtureInstance?.HANGER_STACK == 3)">Triple Hung
                        </OptionInputOption>
                        <OptionInputOption value="4" selected="@(FixtureInstance?.HANGER_STACK == 4)">Quadruple Hung
                        </OptionInputOption>
                    </InputSelect>
                </OptionInput>
            </div>

            <div class="dropdown-divider"></div>

            <div class="d-flex flex-column gap-2 px-2">
                <div class="d-flex flex-row gap-2 align-items-center px-2">
                    <i class="fa-solid fa-pencil"></i>
                    <p class="d-flex justify-content-center m-0">Fixture Notes</p>
                </div>
                <InputTextArea class=" d-flex justify-self-center" style="border: none;" placeholder="Notes"
                    @bind-Value="UpdateFixtureInstanceModel!.NOTE"></InputTextArea>
            </div>

            <div class="dropdown-divider"></div>

            <div class="d-flex flex-row gap-2 align-items-center px-2 justify-content-between">
                <Button Class="Button" TextAlignment="center" Variant="danger"
                    @onclick="async () => await OnDeleteFixtureInstanceSubmit()">Delete</Button>
                <Button Class="Button" TextAlignment="center" Variant="success" type="submit">Save</Button>
            </div>
        </EditForm>
    </div>
</div>

@code
{
    [Parameter] public required int FloorsetId { get; set; }
    [Parameter] public FixtureInstance? FixtureInstance { get; set; }

    [SupplyParameterFromForm] private UpdateFixtureInstance? UpdateFixtureInstanceModel { get; set; }

    private Dictionary<string, Data.Models.Allocations.AllocationFulfillments> Subcategories = new
    Dictionary<string, Data.Models.Allocations.AllocationFulfillments>();

    protected override void OnInitialized()
    {
        UpdateFixtureInstanceModel ??= new()
        {
            TUID = FixtureInstance?.TUID ?? -1,
            FLOORSET_TUID = FloorsetId,
            HANGER_STACK = FixtureInstance?.HANGER_STACK,
            NOTE = FixtureInstance?.NOTE,
            SUBCATEGORY = FixtureInstance?.SUBCATEGORY
        };
    }

    protected override void OnParametersSet()
    {
        if (UpdateFixtureInstanceModel == null) return;

        UpdateFixtureInstanceModel.TUID = FixtureInstance?.TUID ?? -1;
        UpdateFixtureInstanceModel.SUBCATEGORY = FixtureInstance?.SUBCATEGORY;
        UpdateFixtureInstanceModel.HANGER_STACK = FixtureInstance?.HANGER_STACK;
        UpdateFixtureInstanceModel.NOTE = FixtureInstance?.NOTE;
    }
    private async Task UpdateAllocationFulfillments()
    {
        var response = await SalesHttpClient.GetAllocationFulfillments(FloorsetId);

        if (response != null)
        {
            foreach (var subcategory in response)
            {
                Subcategories.TryAdd(subcategory.SUBCATEGORY, subcategory);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAllocationFulfillments();
    }

    private async Task OnUpdateFixtureInstanceSubmit()
    {
        if (UpdateFixtureInstanceModel != null)
        {
            Console.WriteLine(UpdateFixtureInstanceModel);

            var subcategory = Subcategories.GetValueOrDefault(UpdateFixtureInstanceModel.SUBCATEGORY ?? "None");

            UpdateFixtureInstanceModel.SUPERCATEGORY_TUID = subcategory?.TUID;

            var response = await FixturesHttpClient.UpdateFixtureInstance(UpdateFixtureInstanceModel);

            await JSRuntime.InvokeVoidAsync("window.gridInstance.updateFixtureByTuid",
            UpdateFixtureInstanceModel.TUID,
            UpdateFixtureInstanceModel.HANGER_STACK, UpdateFixtureInstanceModel.SUBCATEGORY,
            UpdateFixtureInstanceModel.SUPERCATEGORY_TUID, subcategory?.SUPERCATEGORY_COLOR ?? "white",
            UpdateFixtureInstanceModel.NOTE);

            await JSRuntime.InvokeVoidAsync("showDropdown", false);
            await FloorsetEditorService.TriggerUpdateAsync();
        }
    }

    private async Task OnDeleteFixtureInstanceSubmit()
    {
        if (UpdateFixtureInstanceModel != null)
        {
            var response = await FixturesHttpClient.DeleteFixtureInstance(UpdateFixtureInstanceModel.TUID);

            await JSRuntime.InvokeVoidAsync("window.gridInstance.deleteFixtureByTuid", UpdateFixtureInstanceModel.TUID);

            await JSRuntime.InvokeVoidAsync("showDropdown", false);
            await FloorsetEditorService.TriggerUpdateAsync();
        }
    }
}
