@inject IJSRuntime JS
@inject FloorsetsHttpClient FloorsetsHttpClient
@using Plot.Components.PartialComponents.OptionInput
@using Plot.Components.PartialComponents.Checkbox
@using Plot.Components.PartialComponents.Modal

<script src="js/floorsetEditor.js"></script>
<script src="js/floorsetGridCanvas.js"></script>

@*Print Modal *@
@*Tristan Calay *@
<Modal id="printModal" SizeClass="modal-md">
    <ModalHeader Title="Print Layout" Variant="standard"/>
    <ModalBody>
        <h6 style="opacity: 0.5;">Select print options for how you would like your printed document to be formatted.
        </h6>
        @if (base64Image == null || base64Image.Length == 0 || base64Image.All(b => b == 0))
        {
            <img class="w-100" src="/img/printpreview.png">
        }
        else
        {
            <img class="w-100" src="data:image/png;base64,{Convert.ToBase64String(base64Image)}" />
        }

        @* Danielle Smith - 3/17/2025
        changed to use bootstrap classes and added some margin *@
        <div class="row">
            <div class="col-md-6">
                <OptionInput ID="printerInput" Class="optionInput my-3" label="Select a Printer"
                    optionsText="@(new List<String> { "Printer 1", "Printer 2" })"
                    optionsValues="@(new List<String> { "Printer 1", "Printer 2" })" />
            </div>

            <div class="col-md-6">
                <OptionInput ID="pageInput" Class="optionInput my-3" label="Page Size"
                    optionsText="@(new List<String> { "8.5x11", "A4" })"
                    optionsValues="@(new List<String> { "standard", "a4" })" />
            </div>
        </div>

        <Checkbox id="checkWithAllocations" Text="With Allocations" />
        <Checkbox id="checkWithNotes" Text="With Notes" />
    </ModalBody>

    <ModalFooter>
        <Button Variant="primary" data-bs-dismiss="modal" isDisabled="false" OnClickFunction="printLayout" >
            Print
        </Button>
    </ModalFooter>
</Modal>

@code {
    [Parameter] public required int FloorsetId {get;set;}
    public required Data.Models.Floorsets.Floorset? Floorset {get;set;}

    private string? base64Image;
    protected override async Task OnInitializedAsync()
    {
        var response = await FloorsetsHttpClient.GetFloorsetById(FloorsetId);
        if (response != null)
        {
            Floorset = response;
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            base64Image = await JS.InvokeAsync<string>("getCanvasAsBase64Png");
            StateHasChanged();
        }
    }
    
    //printLayout Task
    //Asynchronously prints the current grid layout from specified printer and options.
    //Called by the "Print" button in the print modal.
    private async Task printLayout()
    {
        try
        {
            // Call JS to get the PNG image as a base64 string
            
            if (string.IsNullOrEmpty(base64Image))
            {
                Console.WriteLine("PNG data is null or empty.");
                return;
            }

            // Strip data URL prefix and decode
            var base64Data = base64Image.Substring(base64Image.IndexOf(",") + 1);
            Console.WriteLine(base64Data);
            byte[] pngBytes = Convert.FromBase64String(base64Data);

            // Create PDF
            byte[] pdfBytes = CanvasPdfExporter.GeneratePdfFromImage(pngBytes);

            // Trigger download
            await JS.InvokeVoidAsync("saveAsFile", $"{Floorset?.NAME ?? "layout"}.pdf", Convert.ToBase64String(pdfBytes));

            Console.WriteLine("Printed floorset layout as PDF.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating PDF: {ex.Message}");
        }

    }
}