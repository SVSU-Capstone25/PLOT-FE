@inject IJSRuntime JS
@inject FloorsetsHttpClient FloorsetsHttpClient
@using Plot.Components.PartialComponents.OptionInput
@using Plot.Components.PartialComponents.Checkbox
@using Plot.Components.PartialComponents.Modal

<script src="js/floorsetEditor.js"></script>
<script src="js/floorsetGridCanvas.js"></script>

@*Print Modal *@
@*Tristan Calay *@
<Modal id="print-modal" SizeClass="modal-lg">
    <ModalHeader Title="Print Layout" Variant="standard" />
    <ModalBody>
        <h6 style="opacity: 0.5;">Select print options for how you would like your printed document to be formatted.
        </h6>
        @if (base64ImageThumbnail == null || base64ImageThumbnail.Length == 0 || base64ImageThumbnail.All(b => b == 0))
        {
            <img class="w-100" src="/img/printpreview.png">
        }
        else
        {
            <img class="w-100" src="@base64ImageThumbnail" />
        }

        @* Danielle Smith - 3/17/2025
        changed to use bootstrap classes and added some margin *@
        <div class="d-flex flex-row gap-2">
            <OptionInput id="printerInput" Class="flex-grow-1">
                <OptionInputHeader>Select a Printer</OptionInputHeader>
                <OptionInputOptions>
                    <OptionInputOption value="printer-1">Printer 1
                    </OptionInputOption>
                    <OptionInputOption value="printer-2">Printer 2</OptionInputOption>
                </OptionInputOptions>
            </OptionInput>

            <OptionInput id="pageInput" Class="flex-grow-1">
                <OptionInputHeader>Page Size</OptionInputHeader>
                <OptionInputOptions>
                    <OptionInputOption value="standard">8.5x11
                    </OptionInputOption>
                    <OptionInputOption value="a4">A4</OptionInputOption>
                </OptionInputOptions>
            </OptionInput>
        </div>

        <Checkbox id="checkWithAllocations" Text="With Allocations" />
        <Checkbox id="checkWithNotes" Text="With Notes" />
    </ModalBody>

    <ModalFooter>
        <Button Variant="primary" data-bs-dismiss="modal" isDisabled="false" OnClickFunction="printLayout">
            Print
        </Button>
    </ModalFooter>
</Modal>

@code {
    [Parameter] public required int FloorsetId {get;set;}
    public required Data.Models.Floorsets.Floorset? Floorset {get;set;}
    private string? base64Image;
    private string? base64ImageThumbnail;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await FloorsetsHttpClient.GetFloorsetById(FloorsetId);
        if (response != null)
        {
            Floorset = response;
            Console.WriteLine("got floorset!!!");
        }

    }

    //Asynchronously get the image preview of the canvas when opening the modal
    //this ensures we always get the current canvas image 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isInitialized)
        {
            isInitialized = false;

            try
            {
                // These canvas functions should now succeed because the modal is rendered
                base64ImageThumbnail = await JS.InvokeAsync<string>("getCanvasBase64Thumbnail");
                Console.WriteLine("Got preview image!");

                await Task.Delay(800);
                base64Image = await JS.InvokeAsync<string>("getCanvasBase64Image");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading image: {ex.Message}");
            }

            StateHasChanged(); // Ensure the new image is shown
        }
    }

    //helper method for the rendering on the preview image on open
    public async Task OnModalOpenedAsync()
    {
        // This flag defers the image load until after the modal is rendered
        isInitialized = true;

        // Kick off rendering now so OnAfterRenderAsync runs
        await InvokeAsync(StateHasChanged);
    }


    //printLayout Task
    //Asynchronously prints the current grid layout from specified printer and options.
    //Called by the "Print" button in the print modal.
    private async Task printLayout()
    {
        try
        {
            if (string.IsNullOrEmpty(base64Image))
            {
                Console.WriteLine("PNG data is null or empty.");
                return;
            }

            //Strip data URL prefix and encode into bytes
            var base64Data = base64Image.Substring(base64Image.IndexOf(",") + 1);  
            byte[] pngBytes = Convert.FromBase64String(base64Data);

            //Create PDF
            byte[] pdfBytes = CanvasPdfExporter.GeneratePdfFromImage(pngBytes);

            // Trigger download
            await JS.InvokeVoidAsync("saveAsFile", $"{Floorset?.NAME ?? "layout"}.pdf", Convert.ToBase64String(pdfBytes));

            Console.WriteLine("Printed floorset layout as PDF.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating PDF: {ex.Message}");
        }

    }
}