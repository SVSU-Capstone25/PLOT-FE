@inject IJSRuntime JS

@using Plot.Components.PartialComponents.NumericInput

<div class="walls-container">
    <h3 class="header pt-3" style="font-weight: bold;" onclick="ToggleBuildingWalls"><i class="fas fa-edit"></i>
        Edit Building Walls
    </h3>
    <hr style="opacity: 1.0; color:black;">
    <label>Dimensions</label>
    <div class="horizantal-inputs">
        <NumericInput Id="width" Class="numeric-input" Label="" Placeholder="" Description="" value="@width.ToString()"
            ValueChanged="@(str => NumberChanged(str, value => width = value))" />
        @* The X to separate the two inputs *@
        <span class="dimension-separator" onclick="SwapDimensions('width-number-input','length-number-input')"
            style="cursor: pointer;">X</span>
        <NumericInput Id="length" Class="numeric-input" Label="" Placeholder="" Description=""
            value="@length.ToString()" ValueChanged="@(str => NumberChanged(str, value => length = value))" />
    </div>
    <label>Enter the Dimensions (length and width) in feet</label>

    @* Tristan Calay 4/2/25 - Added new employee area controls *@

    <div style="display: flex; flex-direction: column; row-gap: 16px;">
        <Button Class="button-green" Id="buttonApply" Variant="primary" OnClickFunction="ApplyDimensions"
            Icon="fa-solid fa-check" IsDisabled="false" TextAlignment="center">
            Apply
        </Button>

        <Button Class="button-green" IsDisabled="false" Variant=@getEmployeePaintVariant() Icon="fa-solid fa-brush"
            OnClickFunction="toggleEmployeePaint" TextAlignment="center">
            Toggle Paint Employee Area
        </Button>

        <Button Class="button-green" IsDisabled="false" Variant=@getEmployeeEraseVariant() Icon="fa-solid fa-eraser"
            OnClickFunction="toggleEmployeeErase" TextAlignment="center">
            Toggle Erase Employee Area
        </Button>
    </div>
</div>

@code {

    private double width { get; set; }
    private double length { get; set; }

    @* Track state for the two buttons so that bootstrap classes can be applied to them. *@
    private bool employeePaintEnabled = false;
    private bool employeeEraseEnabled = false;

    private String getEmployeePaintVariant()
    {
        if (employeePaintEnabled)
        {
            return "primary";
        }
        return "secondary";
    }

    private String getEmployeeEraseVariant()
    {
        if (employeeEraseEnabled)
        {
            return "primary";
        }
        return "secondary";
    }

    /* This function is called when the number is changed */
    private async Task NumberChanged(string strNumber, Action<double> setValue)
    {
        Double.TryParse(strNumber, out double newNumber);

        setValue(newNumber);

        await InvokeAsync(StateHasChanged);
    }
    //this method is called when teh apply button in the edit floor layout panel is clicked
    private async Task ApplyDimensions()
    {
        //if either length and width are null
        if (length <= 0 || width <= 0)
        {
            //alerts the user that the data entered is invalid
            await JS.InvokeVoidAsync("alert", "Please enter valid dimensions greater than 0.");
            return;
        }
        await JS.InvokeVoidAsync("UpdateGridDimensions", length, width);
    }

    @* Tristan Calay 4/2/25
    Start and Stop employee paint toggle a JS variable which enables or
    disables event listeners for click/drag on the grid. *@
    private async Task toggleEmployeePaint()
    {
        employeePaintEnabled = !employeePaintEnabled;
        employeeEraseEnabled = false;
        await JS.InvokeVoidAsync("setEmployeePaint", employeePaintEnabled);
        await JS.InvokeVoidAsync("setEmployeeErase", employeeEraseEnabled);
    }
    
    private async Task toggleEmployeeErase()
    {
        employeeEraseEnabled = !employeeEraseEnabled;
        employeePaintEnabled = false;
        await JS.InvokeVoidAsync("setEmployeePaint", employeePaintEnabled);
        await JS.InvokeVoidAsync("setEmployeeErase", employeeEraseEnabled);
    }
}