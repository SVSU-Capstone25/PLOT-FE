@inject StoresHttpClient StoresHttpClient

@using Plot.Components.PartialComponents.NumericInput
@using Plot.Components.PartialComponents.SlideOut

<SlideOutHeader>
    <h3 class="header pt-3" onclick="ToggleBuildingWalls">
        <i class="fas fa-edit"></i>
        Edit Building Walls
    </h3>
</SlideOutHeader>

<SlideOutBody>
    <EditForm Model="UpdateSizeStoreModel" class="walls-container flex-grow-1 d-flex flex-column gap-2"
        OnValidSubmit="OnUpdateSizeStoreSubmit">
        <label>
            Dimensions
            <div class="d-flex flex-row gap-2 align-items-center">
                <div class="input-group">
                    <InputNumber class="form-control" @bind-value="UpdateSizeStoreModel!.LENGTH" min="1" />
                    <span class="input-group-text">ft</span>
                </div>
                <button type="button" class="btn" data-bs-toggle="tooltip" data-bs-placement="top"
                    title="Swap Dimensions" @onclick="OnSwapDimensionsClick">
                    <i class="fa fa-times" aria-hidden="true"></i>
                </button>
                <div class="input-group">
                    <InputNumber class="form-control" @bind-value="UpdateSizeStoreModel!.WIDTH" min="1" />
                    <span class="input-group-text">ft</span>
                </div>
            </div>
            <div class="form-text">Enter the Dimensions (length and width) in feet</div>
        </label>

        @* Tristan Calay 4/2/25 - Added new employee area controls *@

        <div style="display: flex; flex-direction: column; row-gap: 16px;">
            <Button type="submit" Class="button-green" Variant="primary" Icon="fa-solid fa-check"
                TextAlignment="center">
                Apply
            </Button>

            <Button Class="button-green" Icon="fa-solid fa-brush" TextAlignment="center"
                OnClickFunction="EmployeePaintOnClick">
                Toggle Paint Employee Area
            </Button>

            <Button Class="button-green" Icon="fa-solid fa-eraser" TextAlignment="center"
                OnClickFunction="EmployeeEraseOnClick">
                Toggle Erase Employee Area
            </Button>
        </div>
    </EditForm>

</SlideOutBody>

@code {

    [Parameter] public required int StoreId { get; set; }
    [Parameter] public required Data.Models.Stores.Store Store { get; set; }
    [Parameter] public EventCallback ToggleBuildingWalls { get; set; }

    [Parameter] public EventCallback UpdateStore { get; set; }
    [Parameter] public EventCallback<bool> EmployeePaintToggle { get; set; }
    [Parameter] public EventCallback<bool> EmployeeEraseToggle { get; set; }
    [SupplyParameterFromForm] private Data.Models.Stores.UpdateSizeStore? UpdateSizeStoreModel { get; set; }

    //Determines the state of the buttons for employee paint and erase mode
    //Should be passed to the floorsetGridCanvas.js file on click.
    private bool employeePaintMode = false;
    private bool employeeEraseMode = false;

    //Toggle the employee paint mode booleans and send the updated value to event listeners.
    private void EmployeePaintOnClick()
    {
        employeePaintMode = !employeePaintMode;
        EmployeePaintToggle.InvokeAsync(employeePaintMode);
    }
    private void EmployeeEraseOnClick()
    {
        employeeEraseMode = !employeeEraseMode;
        EmployeeEraseToggle.InvokeAsync(employeeEraseMode);
    }

    protected override void OnInitialized()
    {
        UpdateSizeStoreModel ??= new()
        {
            LENGTH = Store.LENGTH,
            WIDTH = Store.WIDTH
        };
    }

    private void OnSwapDimensionsClick()
    {
        if (UpdateSizeStoreModel != null)
        {
            var temp = UpdateSizeStoreModel.LENGTH;
            UpdateSizeStoreModel.LENGTH = UpdateSizeStoreModel.WIDTH;
            UpdateSizeStoreModel.WIDTH = temp;
        }
    }

    private async Task OnUpdateSizeStoreSubmit()
    {
        if (UpdateSizeStoreModel != null)
        {

            await Task.Run(() => Console.WriteLine(UpdateSizeStoreModel));

            var response = await StoresHttpClient.UpdateStoreSize(StoreId, UpdateSizeStoreModel);

            Console.WriteLine(response);

            if (response == System.Net.HttpStatusCode.OK)
            {
                await UpdateStore.InvokeAsync();
            }
        }
    }
}