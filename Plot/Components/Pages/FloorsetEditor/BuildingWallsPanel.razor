@inject StoresHttpClient StoresHttpClient
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

@using Plot.Services
@using Plot.Components.PartialComponents.NumericInput
@using Plot.Components.PartialComponents.SlideOut
@using Microsoft.AspNetCore.Components.Authorization

<SlideOutHeader>
    <h3 class="header" @onclick="ToggleBuildingWalls">
        <i class="fas fa-edit"></i>
        Edit Building Walls
    </h3>
</SlideOutHeader>

<SlideOutBody>
    <AuthorizeView Policy="Manager">
        <EditForm Context="form_context" Model="UpdateSizeStoreModel"
            class="walls-container flex-grow-1 d-flex flex-column gap-2" OnValidSubmit="OnUpdateSizeStoreSubmit">
            <label>
                Dimensions
                <div class="d-flex flex-row gap-2 align-items-center">
                    <div class="input-group">
                        <InputNumber class="form-control" @bind-value="UpdateSizeStoreModel!.LENGTH" min="1" />
                        <span class="input-group-text">ft</span>
                    </div>
                    <button type="button" class="btn" data-bs-toggle="tooltip" data-bs-placement="top"
                        title="Swap Dimensions" @onclick="OnSwapDimensionsClick">
                        <i class="fa fa-times" aria-hidden="true"></i>
                    </button>
                    <div class="input-group">
                        <InputNumber class="form-control" @bind-value="UpdateSizeStoreModel!.WIDTH" min="1" />
                        <span class="input-group-text">ft</span>
                    </div>
                </div>
                <div class="form-text">Enter the Dimensions (length and width) in feet</div>
            </label>

            @* Tristan Calay 4/2/25 - Added new employee area controls *@

            <div class="d-flex flex-column gap-2">
                <Button type="submit" Variant="primary" Icon="fa-solid fa-check" TextAlignment="center">
                    Apply
                </Button>

                <Button Variant="primary" Icon="fa-solid fa-brush" TextAlignment="center" type="button"
                    @onclick="async () => await OnEmployeeAreaPaint()">
                    Toggle Paint Employee Area
                </Button>

                <Button Variant="primary" Icon="fa-solid fa-eraser" TextAlignment="center" type="button"
                    @onclick="async () => await OnEmployeeAreaErase()">
                    Toggle Erase Employee Area
                </Button>
            </div>
        </EditForm>
    </AuthorizeView>
</SlideOutBody>

@code {

    [Parameter] public required int StoreId { get; set; }
    [Parameter] public required Data.Models.Stores.Store Store { get; set; }
    [Parameter] public EventCallback ToggleBuildingWalls { get; set; }

    [Parameter] public EventCallback UpdateStore { get; set; }

    [SupplyParameterFromForm] private Data.Models.Stores.UpdateSizeStore? UpdateSizeStoreModel { get; set; }

    protected override void OnInitialized()
    {
        UpdateSizeStoreModel ??= new()
        {
            LENGTH = Store.LENGTH,
            WIDTH = Store.WIDTH
        };
    }

    private void OnSwapDimensionsClick()
    {
        if (UpdateSizeStoreModel != null)
        {
            var temp = UpdateSizeStoreModel.LENGTH;
            UpdateSizeStoreModel.LENGTH = UpdateSizeStoreModel.WIDTH;
            UpdateSizeStoreModel.WIDTH = temp;
        }
    }

    private async Task OnUpdateSizeStoreSubmit()
    {
        if (UpdateSizeStoreModel == null)
        {
            ToastService.ShowError("There was an error updating the building size!");
            return;
        }

        var response = await StoresHttpClient.UpdateStoreSize(StoreId, UpdateSizeStoreModel);

        if (response != System.Net.HttpStatusCode.OK)
        {
            ToastService.ShowError("There was an error updating the building size!");
        }
        else
        {
            await UpdateStore.InvokeAsync();
            ToastService.ShowSuccess("The building size has been updated.");
        }
    }

    private async Task OnEmployeeAreaPaint()
    {
        await JSRuntime.InvokeVoidAsync("window.setEmployeeAreaPaint");
        ToastService.ShowInfo("Employee area painting has been toggled.");
    }

    private async Task OnEmployeeAreaErase()
    {
        await JSRuntime.InvokeVoidAsync("window.setEmployeeAreaErase");
        ToastService.ShowInfo("Employee area erasing has been toggled.");
    }
}