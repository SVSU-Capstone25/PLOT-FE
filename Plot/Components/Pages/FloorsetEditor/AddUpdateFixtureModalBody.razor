@* Danielle Smith - 4/21/2025 *@
@inject FixturesHttpClient FixturesHttpClient

@using Plot.Data.Models.Fixtures

<ModalBody>
    <label class="w-100 d-flex">
        <span class="mt-2 me-2 fw-bold">Name</span>
        <InputText @bind-value="AddUpdateFixtureModel!.NAME" class="w-75 form-control ms-auto input-field" type="text"/>
    </label>
    <div class="d-flex align-items-center w-100 gap-3 my-2">
        <label class="d-flex align-items-center flex-fill">
            <span class="fw-bold me-2">Length</span>
            <div class="flex-grow-1">
                <InputNumber @bind-Value="AddUpdateFixtureModel!.LENGTH" @oninput="HandleLengthChange"
                    class="form-control" />
            </div>
        </label>

        <div class="d-flex justify-content-center align-items-center">
            <i class="fa-solid fa-xmark fs-4"></i>
        </div>

        <label class="d-flex align-items-center flex-fill my-2">
            <span class="fw-bold me-2">Width</span>
            <div class="flex-grow-1">
                <InputNumber @bind-Value="AddUpdateFixtureModel!.WIDTH" @oninput="HandleWidthChange"
                    class="form-control" />
            </div>
        </label>
    </div>

    <label class="w-100 d-flex my-2">
        <span class="fw-bold">Linear Feet Capacity</span>
        <InputNumber class="form-control" @bind-Value="AddUpdateFixtureModel!.LF_CAP" />
    </label>

    <label class="w-100 d-flex">
        <span class="fw-bold">Linear Feet: @LinearFeet </span>
    </label>

    <ImageInput Label="Upload Image" Id="@($"ImageUpload-{FixtureId}")" Height="300px" OnImageUpload="OnImageUpload"
        ImageSrc="ImageSrc" />
</ModalBody>

@code {
    [Parameter] public Data.Models.Fixtures.CreateFixtureModel? AddUpdateFixtureModel { get; set; }
    [Parameter] public string? FixtureName { get; set; } = "";
    [Parameter] public required int FixtureId { get; set; }

    private string ImageSrc = "";
    private string LinearFeet = "";

    protected override void OnInitialized()
    {
        if (AddUpdateFixtureModel == null) return;

        ImageSrc = AddUpdateFixtureModel.ICON != null ?
        $"data:image/jpeg;base64,{Convert.ToBase64String(AddUpdateFixtureModel.ICON)}" : "";
    }

    private async Task OnImageUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();

        AddUpdateFixtureModel!.ICON = bytes;
    }

    public void HandleLengthChange(ChangeEventArgs e)
    {
        // Parse Length - Send value if there is one, else send null
        int? Length = int.TryParse(e.Value?.ToString(), out int result) ? (int?)result : null;
        CalcLinearFeet(Length, AddUpdateFixtureModel!.WIDTH);
    }

    public void HandleWidthChange(ChangeEventArgs e)
    {
        // Parse Width - Send value if there is one, else send null
        int? Width = int.TryParse(e.Value?.ToString(), out int result) ? (int?)result : null;
        CalcLinearFeet(AddUpdateFixtureModel!.LENGTH, Width);
    }

    public void CalcLinearFeet(int? length, int? width)
    {
        // Calculates linear feet (length * width) and sets text of bound
        // LinearFeet variable to result, or empty if length
        // or width is not defined

        if (length.HasValue && width.HasValue)
        {
            LinearFeet = (length.Value * width.Value).ToString();
        }
        else
        {
            LinearFeet = "";
        }
        StateHasChanged();
    }
}