<!-- Filename: AllocationsSidebar.razor
Part of Project:-- PLOT
File Purpose:
Create a component to display the sidebar for the allocations page.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Tristan Calay (3/15/2025)-->

@rendermode InteractiveServer
@inject IJSRuntime JS

<div class="AllocationsSidebar scrollable">
    <div class="inner-container">
        <h3 style="font-weight: bold;"><i class="fa-solid fa-file-circle-check"></i> Category Fullfillment</h3>
        <hr style="opacity: 1.0; color:black;">

        @* Danielle Smith 3/17/2025
        changed how these are being displayed to use bootstrap classes
        added params to help text input take up proper width *@
        <div class="row">
            <div class="col-md-8">
                <InputText id="category-search" type="search" placeholder="Category Search..."
                    @bind-value="categorySearch"
                    class="w-100"/>
            </div>

            @* id of sorting button follows the style "sortButton" + num, from 0 to n, where n is num sort buttons - 1.
                Call JS.swapSortButtons(num) in the OnClickFunction to cycle to the next sort button in JS. *@
            <div class="col-md-2" id="sortButton0">
                <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-arrow-up-short-wide"
                    OnClickFunction="sortAscending" Class="search-button" TextAlignment="center" />
            </div>

            @* Hide the buttons not currently active via display : none *@
            <div class="col-md-2" id="sortButton1" style="display: none;">
                <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-arrow-down-wide-short"
                    OnClickFunction="sortDescending" Class="search-button" TextAlignment="center" />
            </div>

            <div class="col-md-2">
                <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-filter"
                    OnClickFunction="filterCategory" Class="search-button" TextAlignment="center" />
            </div>
        </div>

        <div class="progress-area">
            @* Danielle Smith 3/17/2025
            added classes for margins on these progressbars
            added more categories to fill this out for demo purpopses & sorted them alphabetically 
            
            Tristan Calay 3/29/25
            Created a foreach loop to iterate over cached category data and display it.*@

            @* Tristan Calay 3/27/25
            Added UL / LI with onclick to set the painting color. *@
            <ul style="list-style: none;">
            
            @foreach (var bar in getAllCategories())
            {
                    //Continue to next category if the search filter is active
                    //  and the search filter is not in the bar text.
                    //  Exclude headers from being skipped.
                    @if (bar.isHeader)
                    {
                            <hr class="category-separator">
                            <li><ProgressBar iconString="fa-solid fa-chevron-down" mainLabel=@bar.text barColor=@bar.color barMax=@bar.maxValue
                                barValue=@bar.currentValue barLabel=@bar.getLinearFeet() /></li>
                    }
                    else
                    {
                            @if (bar.isInSearch(categorySearch))
                            {
                                    <li @onclick=@(e => categoryOnClick(bar)) style=@bar.getStyle()><ProgressBar mainLabel=@bar.text barColor=@bar.color barMax=@bar.maxValue
                                        barValue=@bar.currentValue barLabel=@bar.getLinearFeet() /></li>     
                            }
                    }
            }
            </ul>
        </div>
    </div>
</div>

@* Tristan Calay - Scripts for category onclick *@
<script>
        //NumSortButtons needs to be equal to the number of sorting buttons defined in the html above.
    var numSortButtons = 2;
    function swapSortButtons(sortButtonNum)
    {
        var nextButtonNum = (sortButtonNum + 1) % numSortButtons;
        document.getElementById("sortButton" + sortButtonNum).style.display = "none";
        document.getElementById("sortButton" + nextButtonNum).style.display = "";
    }    
</script>
@code
{
    private String categorySearch = ""; //Default storage of the category search textbox.

    /*
    //Tristan Calay 3/29/25
    //Create progress bar category data and store here.
    private struct categoryData
    {
        public bool isHeader {get;set;} = false;
        public String headerCategory = "";
        public String text {get;set;} = "";
        public String color {get;set;} = "red";
        public int maxValue {get;set;} = 100;
        public int currentValue {get;set;} = 0;

        @* Tristan Calay 4/2/25
        Added selection tracking to this struct, for state persistence. *@
        public bool isSelected {get;set;} = false;

        //Returns "Transparent" or the green selected color for the bar,
        // depending on isSelected.
        public String getStyle()
        {
            if(isSelected)
            {
                Console.WriteLine("A selected style is being applied...");
                return "background-color: rgba(0,255,0,.3);";
            }
            return "background-color: transparent;";
        }

        public categoryData(String _headerCategory, String _text, String _color, int _maxValue, int _currentValue, bool _header = false)
        {
            headerCategory = _headerCategory;
            text = _text;
            color = _color;
            maxValue = _maxValue;
            currentValue = _currentValue;
            isHeader = _header;

            Console.WriteLine("Header is " + isHeader.ToString());
        }

        public String getLinearFeet()
        {
            return currentValue + "/" + maxValue + " LF";
        }

        public bool isInSearch(String searchText)
        {
            if (searchText == ""){
                return true;
            }
            return (headerCategory + " " + text).ToLower().Contains(searchText.ToLower());
        }

        public Double getPercent()
        {
            return Convert.ToDouble(currentValue) / Convert.ToDouble(maxValue);
        }

        override public String ToString()
        {
            return String.Format("{0} {1} ({2}): {3} of {4}. Header : {5}. Selected : {6}",headerCategory,text,color,currentValue,maxValue,isHeader,isSelected);
        }
    } */

    @* Tristan Calay 4/2/25
    Moved category on click/selection logic into C# @onclick functionality *@

    private static Category nullCategory = new Category("null", "null", "transparent", 0, 0, false);
    private Category lastSelectedCategory = nullCategory;
    

    //Func to find data in the three reference lists.
    private void findListAndIndex(ref String list, ref int index, Category category)
    {
        index = progressCategoriesMen.FindIndex(x => x.Equals(category));
        list = "mens";
        if (index < 0)
        {
            index = progressCategoriesWomen.FindIndex(x => x.Equals(category));
            list = "womens";
        }
        if (index < 0)
        {
            index = progressCategoriesAccessories.FindIndex(x => x.Equals(category));
            list = "accessories";
        }
        if (index < 0)
        {
            throw new IndexOutOfRangeException("Could not find selected category reference in men's, women's or accessories.");
        }

        Console.WriteLine("Selected index: " + index + " in list " + list);
    }
           
    //categoryOnClick takes the ID of the list item and highlights that item for noting the selected category.
    //A reference is stored to the last selected item, if there is one, and it is unselected.
    private async Task categoryOnClick(Category category)
    {
        Console.WriteLine("Category Onclick " + category.ToString());
        //Don't do anything if we click the current selection.
        if (lastSelectedCategory.Equals(category))
        {
            return;
        }
        if (!lastSelectedCategory.Equals(nullCategory))
        {
            lastSelectedCategory.isSelected = false;
            /*
            //Since we cannot pass a reference to a struct, find index and set.
            int index = -1;
            String list = "null";

            try
            {
                Console.WriteLine("Finding last category " + lastSelectedCategory.ToString());
                findListAndIndex(ref list, ref index, lastSelectedCategory);
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
                return;
            }

            //Deselect the last category.
            switch(list)
            {
                case "mens":
                    lastSelectedCategory = progressCategoriesMen[index]; //It would be good to put these ops in a lambda func.
                    lastSelectedCategory.isSelected = false;
                    progressCategoriesMen[index] = lastSelectedCategory;
                    break;
                case "womens":
                    lastSelectedCategory = progressCategoriesWomen[index];
                    lastSelectedCategory.isSelected = false;
                    progressCategoriesWomen[index] = lastSelectedCategory;
                    break;
                case "accessories":
                    lastSelectedCategory = progressCategoriesAccessories[index];
                    lastSelectedCategory.isSelected = false;
                    progressCategoriesAccessories[index] = lastSelectedCategory;
                    break;
            } */
        }
        
        if (!category.Equals(nullCategory))
        {
            category.isSelected = true;
            /*
            //Find again for the new category.
            int index = -1;
            String list = "null";

            try
            {
                Console.WriteLine("Finding new category " + category.ToString());
                findListAndIndex(ref list, ref index, category);
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
                return;
            }

            //Store the reference in lastSelectedCategory and select the index.
            switch(list)
            {
                case "mens":
                    lastSelectedCategory = progressCategoriesMen[index];
                    lastSelectedCategory.isSelected = true;
                    progressCategoriesMen[index] = lastSelectedCategory;
                    break;
                case "womens":
                    lastSelectedCategory = progressCategoriesWomen[index];
                    lastSelectedCategory.isSelected = true;
                    progressCategoriesWomen[index] = lastSelectedCategory;
                    break;
                case "accessories":
                    lastSelectedCategory = progressCategoriesAccessories[index];
                    lastSelectedCategory.isSelected = true;
                    progressCategoriesAccessories[index] = lastSelectedCategory;
                    break;
            }
            */
        }
        
        
        //Update the UI.
        StateHasChanged();

        //Call into the FloorsetEditor script for setting the paint color.
        //This requires the general category, specific category, and category color split by | characters.
        await JS.InvokeVoidAsync("setPaint", category.color);
    }

    //Function to clear the styling and last selected ID for the category list.
    public async Task clearSelectedCategory()
    {
        if (!lastSelectedCategory.Equals(nullCategory))
        {
            //Unselect current category
            Console.WriteLine("Removing selection of painting category");
            await categoryOnClick(nullCategory);
        }
    }

    //Add one list for each super category
    private List<Category> progressCategoriesMen = [];
    private List<Category> progressCategoriesWomen = [];
    private List<Category> progressCategoriesAccessories = [];

    
    //When the component is initialized, retrieve info from database about categories.
    protected override void OnInitialized()
    {
        base.OnInitialized();
        //For now, hardcoded categories.
        //One exists for each super category, for ease of sorting. This can be changed.
        progressCategoriesMen = [];
        progressCategoriesWomen = [];
        progressCategoriesAccessories = [];
        @* Men's *@
        var currentColor = "#AAD9FF";
        var currentCategory = "Men\'s";
        progressCategoriesMen.Add(new Category(currentCategory, currentCategory, currentColor, 480, 290, true));
        progressCategoriesMen.Add(new Category(currentCategory, "Pants", currentColor, 100, 20, false));
        progressCategoriesMen.Add(new Category(currentCategory, "Shirts", currentColor, 100, 30, false));
        progressCategoriesMen.Add(new Category(currentCategory, "Shoes", currentColor, 100, 60, false));
        progressCategoriesMen.Add(new Category(currentCategory, "Jeans", currentColor, 100, 20, false));
        progressCategoriesMen.Add(new Category(currentCategory, "Jackets", currentColor, 100, 120, false));
        progressCategoriesMen.Add(new Category(currentCategory, "Shorts", currentColor, 100, 20, false));
        progressCategoriesMen.Add(new Category(currentCategory, "Sports", currentColor, 100, 20, false));
        progressCategoriesMen.Add(new Category(currentCategory, "Suits", currentColor, 100, 10, false));

        @* Women's *@
        currentColor = "#FFAAD6";
        currentCategory = "Women\'s";
        progressCategoriesWomen.Add(new Category(currentCategory, currentCategory, currentColor, 800, 300, true));
        progressCategoriesWomen.Add(new Category(currentCategory, "Dresses", currentColor, 100, 120, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Skirts", currentColor, 100, 120, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Sports", currentColor, 100, 20, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Suits", currentColor, 100, 100, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Jackets", currentColor, 100, 120, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Jeans", currentColor, 100, 20, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Pants", currentColor, 40, 20, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Shirts", currentColor, 100, 30, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Shoes", currentColor, 100, 60, false));
        progressCategoriesWomen.Add(new Category(currentCategory, "Shorts", currentColor, 100, 20, false));
        
        @* Accessories *@
        currentColor = "#5FBD6A";
        currentCategory = "Accessories";
        progressCategoriesAccessories.Add(new Category(currentCategory, currentCategory, currentColor, 40, 80, true));
        progressCategoriesAccessories.Add(new Category(currentCategory, "Belts", currentColor, 10, 20, false));
        progressCategoriesAccessories.Add(new Category(currentCategory, "Hats", currentColor, 10, 20, false));
        progressCategoriesAccessories.Add(new Category(currentCategory, "Purses", currentColor, 10, 20, false));
        progressCategoriesAccessories.Add(new Category(currentCategory, "Jewelry", currentColor, 10, 20, false));
        
    }
    
    //Tristan Calay 3/29/25
    //Return a joined list of all the super categories.
    //The super categories can be sorted individually before they are retrieved.
    public List<Category> getAllCategories()
    {
        var joinedList = new List<Category>();
        joinedList = [];
        joinedList.AddRange(progressCategoriesMen);
        joinedList.AddRange(progressCategoriesWomen);
        joinedList.AddRange(progressCategoriesAccessories);

        return joinedList;
    }

    //Tristan Calay 3/29/25
    //Hide categories that do not contain the string "newSearch"
    private void categorySearchChanged(String newSearch)
    {
        categorySearch = newSearch;
        StateHasChanged();
    }

    private void filterCategory()
    {
        Console.WriteLine("Filter Category Search Function");
    }

    //Tristan Calay 3/29/25
    //Generic sort - Sort by alphabetical with headers first.

    @* Create functions for sorting in different ways here. 
        They should invoke swapSortButtons with the 
        corresponding ID of the button that called the sort func.*@
    private void sortAscending()
    {
        sortCategory(Category.SORTTYPE.ASCENDING);
        JS.InvokeVoidAsync("swapSortButtons", 0);
    }
    private void sortDescending()
    {
        sortCategory(Category.SORTTYPE.DESCENDING);
        JS.InvokeVoidAsync("swapSortButtons", 1);
    }

    @* Sort each sub category of items by the sorttype value. *@
    private void sortCategory(Category.SORTTYPE sort)
    {
        Console.WriteLine("Sort Category Search Function");
        progressCategoriesMen.Sort((a, b) => Category.compareCategories(a, b, sort));
        progressCategoriesWomen.Sort((a, b) => Category.compareCategories(a, b, sort));
        progressCategoriesAccessories.Sort((a, b) => Category.compareCategories(a, b, sort));

        StateHasChanged();
    }

    
}