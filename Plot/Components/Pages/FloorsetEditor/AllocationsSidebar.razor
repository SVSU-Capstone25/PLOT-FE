<!-- Filename: AllocationsSidebar.razor
Part of Project:-- PLOT
File Purpose:
Create a component to display the sidebar for the allocations page.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Tristan Calay (3/15/2025)-->

@* Danielle Smith 3/17/2025
            added classes for margins on these progressbars
            added more categories to fill this out for demo purpopses & sorted them alphabetically 
            
            Tristan Calay 3/29/25
            Created a foreach loop to iterate over cached category data and display it.*@

@* Tristan Calay 3/27/25
            Added UL / LI with onclick to set the painting color. *@

@rendermode InteractiveServer
@inject IJSRuntime JS
@inject SalesHttpClient SalesHttpClient

@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.ProgressBar

<SlideOutHeader>
    <h3 style="font-weight: bold;"><i class="fa-solid fa-file-circle-check"></i> Category Fullfillment</h3>
</SlideOutHeader>

<SlideOutBody>
    @* Danielle Smith 3/17/2025
        changed how these are being displayed to use bootstrap classes
        added params to help text input take up proper width *@
    <div class="d-flex flex-row gap-2 form-control">
        <InputText id="category-search" type="search" placeholder="Search..." ValueExpression="() => CategorySearch"
            ValueChanged="OnSearchChange" class="w-100 form-control" />
        <Button Variant="primary" Icon="fa-solid fa-arrow-up-short-wide" Class="search-button" TextAlignment="center"
            @onclick="OnSortAscendingClick" />
        <Button Variant="primary" Icon="fa-solid fa-arrow-down-wide-short" Class="search-button" TextAlignment="center"
            @onclick="OnSortDescendingClick" />
        <Button Variant="primary" Icon="fa-solid fa-filter" Class="search-button" TextAlignment="center"
            @onclick="OnFilterClick" />
    </div>

    <div class="progress-area">
        <ul class="list-group list-group-flush">

            @foreach (var allocationFufillmentList in allocationFufillmentLists)
            {
                var SuperCategoryColor = allocationFufillmentList.Value.First().SUPERCATEGORY_COLOR;
                var SuperCategoryTotalSales = allocationFufillmentList.Value.Sum((allocationFufillment) =>
                allocationFufillment.TOTAL_SALES);

                <li class="list-group-item">
                    <ProgressBar>
                        <ProgressBarHeader class="fs-5" Icon="fa-solid fa-chevron-down">@allocationFufillmentList.Key
                        </ProgressBarHeader>
                        <ProgressBarBar Color="@SuperCategoryColor" max="100" value="100" min="0">
                            @SuperCategoryTotalSales
                        </ProgressBarBar>
                    </ProgressBar>
                </li>

                @foreach (var allocationFufillment in allocationFufillmentList.Value.Where((allocationFufillment) =>
                            allocationFufillment.SUBCATEGORY.Contains(CategorySearch)))
                {
                    <li class="list-group-item" @onclick="() => OnCategoryClick(allocationFufillment.SUPERCATEGORY_COLOR)">
                        <ProgressBar>
                            <ProgressBarHeader class="fs-6">@allocationFufillment.SUBCATEGORY
                            </ProgressBarHeader>
                            <ProgressBarBar Color="@allocationFufillment.SUPERCATEGORY_COLOR" max="100"
                                value="@allocationFufillment.TOTAL_SALES" min="0">
                                @allocationFufillment.TOTAL_SALES
                            </ProgressBarBar>
                        </ProgressBar>
                    </li>
                }
            }
        </ul>
    </div>
</SlideOutBody>

@code
{
    [Parameter] public required int FloorsetId { get; set; }

    private String CategorySearch { get; set; } = "";

    private Dictionary<string, List<Data.Models.Allocations.AllocationFufillments>> allocationFufillmentLists = new
    Dictionary<string,
    List<Data.Models.Allocations.AllocationFufillments>>();

    private async Task UpdateAllocationFufillments()
    {
        var response = await SalesHttpClient.GetAllocationFufillments(FloorsetId);

        Console.WriteLine(response);

        if (response != null)
        {
            response.ForEach((allocationFufillment) =>
            {
                if (allocationFufillmentLists.TryGetValue(allocationFufillment.SUPERCATEGORY_NAME, out
    List<Data.Models.Allocations.AllocationFufillments>? list))
                {
                    list.Add(allocationFufillment);
                }
                else
                {
                    allocationFufillmentLists.Add(allocationFufillment.SUPERCATEGORY_NAME, new
        List<Data.Models.Allocations.AllocationFufillments> {
allocationFufillment
            });
                }
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAllocationFufillments();
    }

    private void OnSearchChange(string value)
    {
        CategorySearch = value;
        StateHasChanged();
    }

    private async void OnCategoryClick(string color)
    {
        Console.WriteLine("Category Onclick " + color);

        await JS.InvokeVoidAsync("window.setPaint", color);
    }

    private void OnSortAscendingClick()
    {
        throw new NotImplementedException();
    }

    private void OnSortDescendingClick()
    {
        throw new NotImplementedException();
    }

    private void OnFilterClick()
    {
        throw new NotImplementedException();
    }

}