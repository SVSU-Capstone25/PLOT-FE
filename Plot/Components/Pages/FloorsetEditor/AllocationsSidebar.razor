<!-- Filename: AllocationsSidebar.razor
Part of Project:-- PLOT
File Purpose:
Create a component to display the sidebar for the allocations page.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Tristan Calay (3/15/2025)-->

@* Danielle Smith 3/17/2025
            added classes for margins on these progressbars
            added more categories to fill this out for demo purpopses & sorted them alphabetically 
            
            Tristan Calay 3/29/25
            Created a foreach loop to iterate over cached category data and display it.*@

@* Tristan Calay 3/27/25
            Added UL / LI with onclick to set the painting color. *@

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject SalesHttpClient SalesHttpClient

@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.ProgressBar

<SlideOutHeader>
    <h3 style="font-weight: bold;"><i class="fa-solid fa-file-circle-check"></i> Category Fulfillment</h3>
</SlideOutHeader>

<SlideOutBody>
    @* Danielle Smith 3/17/2025
        changed how these are being displayed to use bootstrap classes
        added params to help text input take up proper width *@
    <div class="d-flex flex-row gap-2">
        <InputText id="category-search" type="search" placeholder="Search..." @bind-Value="CategorySearch"
            @oninput="OnSearchChange" class="w-100 form-control" />
        <Button Variant="primary" Icon="fa-solid fa-arrow-up-short-wide" Class="search-button" TextAlignment="center"
            @onclick="OnSortAscendingClick" />
        <Button Variant="primary" Icon="fa-solid fa-arrow-down-wide-short" Class="search-button" TextAlignment="center"
            @onclick="OnSortDescendingClick" />
        @* <Button Variant="primary" Icon="fa-solid fa-filter" Class="search-button" TextAlignment="center"
            @onclick="OnFilterClick" /> *@
    </div>

    <div class="progress-area">
        <ul class="list-group list-group-flush">

            @foreach (var allocationFulfillmentList in allocationFulfillmentLists)
            {
                var SuperCategoryColor = allocationFulfillmentList.Value.First().SUPERCATEGORY_COLOR;
                var SuperCategoryCurrent = allocationFulfillmentList.Value.Sum((allocationFulfillment) =>
                allocationFulfillment.CURRENT_LF);
                var SuperCategoryNeeded = allocationFulfillmentList.Value.Sum((allocationFulfillment) =>
                allocationFulfillment.NEEDED_LF);

                <li class="list-group-item">
                    <ProgressBar>
                        <ProgressBarHeader class="fs-5" Icon="fa-solid fa-chevron-down">@allocationFulfillmentList.Key
                        </ProgressBarHeader>
                        <ProgressBarBar Color="@SuperCategoryColor" max="@SuperCategoryNeeded" value="@SuperCategoryCurrent"
                            min="0">
                            @SuperCategoryCurrent / @SuperCategoryNeeded
                        </ProgressBarBar>
                    </ProgressBar>
                </li>

                @foreach (var AllocationFulfillment in allocationFulfillmentList.Value.Where((AllocationFulfillmentList) =>
                            AllocationFulfillmentList.SUBCATEGORY.ToLower().Contains(CategorySearch)))
                {
                    string activeClass = AllocationFulfillment == SelectedFufillment ? "active" : "";

                    <li class="@($"list-group-item d-flex {activeClass}")">
                        <button type="button" class="btn d-flex p-0 flex-grow-1"
                            @onclick="() => OnCategoryClick(AllocationFulfillment)">
                            <ProgressBar class="flex-grow-1">
                                <ProgressBarHeader class="d-flex">
                                    <span class="badge text-white fs-6"
                                        style="background-color: @AllocationFulfillment.SUPERCATEGORY_COLOR;">@AllocationFulfillment.SUBCATEGORY</span>
                                </ProgressBarHeader>
                                <ProgressBarBar Color="@AllocationFulfillment.SUPERCATEGORY_COLOR"
                                    max="@AllocationFulfillment.NEEDED_LF" value="@AllocationFulfillment.CURRENT_LF" min="0">
                                    @AllocationFulfillment.CURRENT_LF / @AllocationFulfillment.NEEDED_LF
                                </ProgressBarBar>
                            </ProgressBar>
                        </button>
                    </li>
                }
            }
        </ul>
    </div>
</SlideOutBody>

@code
{
    [Parameter] public required int FloorsetId { get; set; }

    private Data.Models.Allocations.AllocationFulfillments? SelectedFufillment;
    private String CategorySearch { get; set; } = "";
    private Dictionary<string, List<Data.Models.Allocations.AllocationFulfillments>> allocationFulfillmentLists = new
    Dictionary<string, List<Data.Models.Allocations.AllocationFulfillments>>();

    private async Task UpdateAllocationFulfillments()
    {
        var response = await SalesHttpClient.GetAllocationFulfillments(FloorsetId);

        if (response != null)
        {
            allocationFulfillmentLists = new
            Dictionary<string, List<Data.Models.Allocations.AllocationFulfillments>>();
            response.ForEach((allocationFulfillment) =>
            {
                if (allocationFulfillmentLists.TryGetValue(allocationFulfillment.SUPERCATEGORY_NAME, out
    List<Data.Models.Allocations.AllocationFulfillments>? list))
                {
                    list.Add(allocationFulfillment);
                }
                else
                {
                    allocationFulfillmentLists.Add(allocationFulfillment.SUPERCATEGORY_NAME, new
        List<Data.Models.Allocations.AllocationFulfillments> {
allocationFulfillment
            });
                }
            });
        }
    }

    protected override void OnInitialized()
    {
        FloorsetEditorService.OnUpdate += async () =>
        {
            await UpdateAllocationFulfillments();
            this.StateHasChanged();
        };
    }

    public void Dispose()
    {
        FloorsetEditorService.OnUpdate -= async () => { await InvokeAsync(StateHasChanged); };
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAllocationFulfillments();
    }

    private void OnSearchChange(ChangeEventArgs e)
    {

        CategorySearch = e.Value as String ?? "";
    }

    private async void OnCategoryClick(Data.Models.Allocations.AllocationFulfillments AllocationFulfillment)
    {
        SelectedFufillment = AllocationFulfillment;
        await JSRuntime.InvokeVoidAsync("window.setPaint", AllocationFulfillment.SUPERCATEGORY_COLOR,
        AllocationFulfillment.TUID, AllocationFulfillment.SUBCATEGORY);
    }

    private void OnSortAscendingClick()
    {
        foreach (var allocationFufillmentList in allocationFulfillmentLists)
        {
            allocationFufillmentList.Value.Sort(delegate (Data.Models.Allocations.AllocationFulfillments a,
            Data.Models.Allocations.AllocationFulfillments b)
            {
                if (a.SUBCATEGORY == null && b.SUBCATEGORY == null) return 0;
                else if (a.SUBCATEGORY == null) return -1;
                else if (b.SUBCATEGORY == null) return 1;
                else return (a.SUBCATEGORY.CompareTo(b.SUBCATEGORY));
            });
        }
    }

    private void OnSortDescendingClick()
    {
        foreach (var allocationFufillmentList in allocationFulfillmentLists)
        {
            allocationFufillmentList.Value.Sort(delegate (Data.Models.Allocations.AllocationFulfillments a,
            Data.Models.Allocations.AllocationFulfillments b)
            {
                if (a.SUBCATEGORY == null && b.SUBCATEGORY == null) return 0;
                else if (a.SUBCATEGORY == null) return -1;
                else if (b.SUBCATEGORY == null) return 1;
                else return (b.SUBCATEGORY.CompareTo(a.SUBCATEGORY));
            });
        }
    }
}