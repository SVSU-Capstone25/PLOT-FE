@* Josh Rodack 4/23/25 *@

@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient
@inject ToastService ToastService

@using Plot.Services

<Modal id="@($"delete-fixture-model-{Fixture.TUID}")" class="standard">
    <ModalHeader Title="Confirm Deletion" Variant="danger" />
    <form @onsubmit="async () => await OnDeleteFixtureSubmit(Fixture.TUID)">
        @code {
            private string? deleteTextInput;
            private bool isDisabled => deleteTextInput != "DELETE";
        }
        <ModalBody>
            <h5>Are you SURE you want to delete this Fixture?</h5>
            <input type="text" placeholder="If so, type DELETE below" required pattern="DELETE"
                @bind-value="deleteTextInput" @bind-value:event="oninput" class="form-control w-100" />
        </ModalBody>

        <ModalFooter>
            <Button TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                data-bs-dismiss="modal">
                Yes, Delete
            </Button>
        </ModalFooter>
    </form>
</Modal>

@code {
    [Parameter] public required Data.Models.Fixtures.FixtureModel Fixture { get; set; }
    [Parameter] public required EventCallback UpdateFixtureModels { get; set; }

    private async Task OnDeleteFixtureSubmit(int fixtureId)
    {
        var response = await FixturesHttpClient.DeleteFixtureModel(fixtureId);

        if (response == System.Net.HttpStatusCode.OK)
        {
            ToastService.ShowSuccess("The fixture has been deleted!");
        }

        await UpdateFixtureModels.InvokeAsync();
        StateHasChanged();
    }
}