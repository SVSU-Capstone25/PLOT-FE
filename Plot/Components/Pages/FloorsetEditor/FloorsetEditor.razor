@* 
    Filename: FloorsetEditor.razor
    Part of Project: Plot

    File Purpose:
    The purpose of this file is to let the user edit a floorplan.

    Program Purpose:
    The purpose of PLOT is to allow users to easily create, manage,
    and allocate floorsets for Plato's Closet.

    Authors: 
    - Andrew Kennedy (Add fixture & fixture grid) (3/19/2025)
    - Tristan Calay (Print) (3/17/2025)
    - Andrew Miller (Import)
    - Luke Wollenweber (Edit Building Walls) (3/22/2025)
*@

@page "/floorset-editor/{StoreId:int}/{FloorsetId:int}"
@layout Plot.Components.Layout.FloorsetEditorLayout
@rendermode InteractiveServer

@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient
@inject StoresHttpClient StoresHttpClient
@inject FloorsetsHttpClient FloorsetsHttpClient;
@inject AuthHttpClient AuthHttpClient

@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.NumericInput
@using Plot.Components.PartialComponents.OptionInput
@using Plot.Components.PartialComponents.TextInput
@using Plot.Components.PartialComponents.Modal
@using Plot.Components.PartialComponents.FileInput
@using Plot.Data.Models.Users
@using Plot.Data.Models.Floorsets


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="js/copyFloorsetCard.js"></script>
<script src="js/floorsetEditor.js"></script>
<FloorsetCanvas />

@* Sidebar *@
<SlideOut>
    @if (allocationsOpen)
    {
        <AllocationsSidebar FloorsetId="FloorsetId" />

        <ToolbarButtons ToggleAllocationsOpen="ToggleAllocations"/>
    }
    else
    {
        @if (addFixtureExpanded || buildingWallsExpanded)
        {
            @if (addFixtureExpanded)
            {
                <AddFixturePanel StoreId="StoreId" ToggleAddFixture="ToggleAddFixture" FixtureModels="FixtureModels" />
            }
            @if (buildingWallsExpanded)
            {
                <BuildingWallsPanel StoreId="StoreId" Store="Store" UpdateStore="UpdateStore"
                    ToggleBuildingWalls="ToggleBuildingWalls" />
            }

        }

        <div class="d-flex flex-column gap-2">
            @if (!addFixtureExpanded)
            {
                <Button Class="Button button-with-spacing" Id="buttonAddFixture" Variant="primary"
                    OnClickFunction="ToggleAddFixture" Icon="fas fa-edit" TextAlignment="center">
                    Add Fixture
                </Button>
            }

            @if (!buildingWallsExpanded)
            {
                <Button Class="Edit Building Walls Button button-with-spacing" Id="buttonEditWalls" Variant="primary"
                    OnClickFunction="ToggleBuildingWalls" Icon="fas fa-edit" TextAlignment="center">
                    Edit Building Walls
                </Button>
            }

            <Button Class="Button" Id="buttonViewAllocations" Variant="primary" OnClickFunction="ToggleAllocations"
                Icon="fa-solid fa-eye" TextAlignment="center">
                View Allocations
            </Button>

            <Button Class="Button" Id="buttonImportFile" Variant="primary" data-bs-target="#import-excel-modal"
                data-bs-toggle="modal" Icon="fa-solid fa-file-import" TextAlignment="center">
                Import Excel File
            </Button>

            <Button Icon="fa-solid fa-print" Id="printLayout" Variant="primary" TextAlignment="center"
                data-bs-toggle="modal" data-bs-target="#print-modal">
                Print Layout
            </Button>

            <Button Icon="fa-solid fa-floppy-disk" Variant="success" OnClickFunction="saveCanvas" TextAlignment="center">
                Save
            </Button>

            <div class="toast-container position-fixed p-5 bottom-0 start-0 float-left" id="toastPlacement"
                data-original-class="toast-container position-fixed p-5">

                <div class="toast align-items-center text-white bg-success border-0" id="saveToast" role="alert"
                    aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            Floorset saved.
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                            aria-label="Close"></button>
                    </div>
                </div>
            </div>

            
        </div>
    }
</SlideOut>

<ImportExcelModal FloorsetId="FloorsetId" />

<PrintModal FloorsetId="FloorsetId" />

<AddFixtureModal StoreId="StoreId" UpdateFixtureModels="UpdateFixtureModels" />

<EditFixtureModal />

<HelpModal />



@code {
    [Parameter] public required int StoreId { get; set; }
    [Parameter] public required int FloorsetId { get; set; }

    private List<Data.Models.Fixtures.FixtureModel> FixtureModels = new List<Data.Models.Fixtures.FixtureModel>();



    // Used when the save button is pressed. Calls js to take a picture of the floorset
    // and update the database with the new image- Michael Polhill
    private async Task saveCanvas()
    {
        // Get the image as a base64 string from the browser
        string base64Image = await JS.InvokeAsync<string>("captureFloorsetThumbnail");


        if (!string.IsNullOrEmpty(base64Image))
        {
            // Take off header and convert to byte array
            var imageBytes = Convert.FromBase64String(base64Image.Split(',')[1]);

            // Get the current logged in user to add their information
            // to the floorset update
            var response = await AuthHttpClient.GetCurrentUser();

            if (response != null)
            {
                UserDTO currentUser = response;

                //Create an update model for the floorset
                UpdatePublicInfoFloorset updatePublicInfoFloorset = new UpdatePublicInfoFloorset
                {
                    STORE_TUID = StoreId,
                    DATE_MODIFIED = DateTime.UtcNow,
                    MODIFIED_BY = currentUser.TUID,
                    FLOORSET_IMAGE = imageBytes
                };

                // Send updated to the BE API
                var saveResponse = await FloorsetsHttpClient.UpdatePublicInfo(FloorsetId, updatePublicInfoFloorset);

                // If the floorset successfully saved, show a success message as a bootstrap toast.
                if (saveResponse == System.Net.HttpStatusCode.OK)
                {
                    await JS.InvokeVoidAsync("openSaveToast", "saveToast");
                }
            }
        }
        else
        {
            Console.WriteLine("JS returned null image.");
        }
    }

    private async Task UpdateFixtureModels()
    {
        var response = await FixturesHttpClient.GetFixtureModelsByStore(StoreId);

        if (response != null)
        {
            FixtureModels = response;
        }

    }

    private Data.Models.Stores.Store? Store;
    private async Task UpdateStore()
    {
        var response = await StoresHttpClient.GetStore(StoreId);


        if (response != null)
        {
            Store = response;

            Console.WriteLine(response.LENGTH);

            await JS.InvokeVoidAsync("window.updateStoreSize", response.LENGTH, response.WIDTH);
        }

    }

    protected override async Task OnInitializedAsync()
    {

        var response = await StoresHttpClient.GetStore(StoreId);
        if (response != null)
        {
            Store = response;
        }

        await UpdateFixtureModels();
        @* addFixtureInstanceToGrid *@

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("render");
        await UpdateStore();
        @* if (firstRender)
        {

            var response = await FixturesHttpClient.GetFloorsetFixtureInformation(FloorsetId);

            if (response != null)
            {
                response.ForEach(async (fixtureInstance) =>
                {
                    Console.WriteLine(fixtureInstance.EDITOR_ID);
                    await JS.InvokeVoidAsync("window.addFixture", fixtureInstance.EDITOR_ID, fixtureInstance.X_POS,
    fixtureInstance.Y_POS, 1, 1);
                });
            }
        } *@
    }

    @* private int? selectedFixtureID; *@
    @* private FixtureConfigModal? configModal; *@


    /*
    The UpdateImage function updates the image data in a fixture.
    */
    [JSInvokable]
    public void UpdateImage(string value)
    {
        Console.WriteLine(value);
    }

    private bool buildingWallsExpanded = false;
    private bool printLayoutOpen = false;
    private bool allocationsOpen = false;
    private bool addFixtureExpanded = false;

    private void ToggleBuildingWalls()
    {
        buildingWallsExpanded = !buildingWallsExpanded;
        if (buildingWallsExpanded == true)
        {
            addFixtureExpanded = false;
        }
    }

    /* Danielle Smith - 3/24/2025
    added back add fixture stuff & also made it so expansions work properly with it */
    private void ToggleAddFixture()
    {
        addFixtureExpanded = !addFixtureExpanded;
        if (addFixtureExpanded == true)
        {
            buildingWallsExpanded = false;
        }
    }

    private void ToggleAllocations()
    {
        buildingWallsExpanded = false;
        allocationsOpen = !allocationsOpen;
    }
    private void OpenPrintLayout()
    {
        printLayoutOpen = !printLayoutOpen;
    }

    private async Task editFixture()
    {
        Console.WriteLine("Edit Fixture Function");
        await JS.InvokeVoidAsync("setPlace");
        allocationsOpen = false;
    }

    private async Task OpenPrint()
    {
        await Task.Run(() => Console.WriteLine("Open Print"));
    }

    private async Task OpenImportModal()
    {
        await Task.Run(() => Console.WriteLine("Open Import"));
    }

}