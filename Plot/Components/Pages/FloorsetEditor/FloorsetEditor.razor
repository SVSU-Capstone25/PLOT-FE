@* 
    Filename: FloorsetEditor.razor
    Part of Project: Plot

    File Purpose:
    The purpose of this file is to let the user edit a floorplan.

    Program Purpose:
    The purpose of PLOT is to allow users to easily create, manage,
    and allocate floorsets for Plato's Closet.

    Authors: 
    - Andrew Kennedy (Add fixture & fixture grid) (3/19/2025)
    - Tristan Calay (Print) (3/17/2025)
    - Andrew Miller (Import)
    - Luke Wollenweber (Edit Building Walls) (3/22/2025)
*@

@rendermode InteractiveServer
@inject IJSRuntime JS
@inject FixturesHttpClient FixturesHttpClient
@inject StoresHttpClient StoresHttpClient
@page "/floorset-editor/{StoreId:int}/{FloorsetId:int}"
@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.NumericInput
@using Plot.Components.PartialComponents.OptionInput
@using Plot.Components.PartialComponents.TextInput
@using Plot.Components.PartialComponents.Modal
@using Plot.Components.PartialComponents.FileInput

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="js/copyFloorsetCard.js"></script>
<script src="js/floorsetEditor.js"></script>
<FloorsetCanvas />

@* Sidebar *@
<SlideOut>
    @if (allocationsOpen)
    {
        <AllocationsSidebar @ref="allocationsSidebar" />

        <ToolbarButtons ToggleAllocationsOpen="ToggleAllocations" EraseClicked="EraseCategoryClicked" />
    }
    else
    {
        @if (addFixtureExpanded || buildingWallsExpanded)
        {
            @if (addFixtureExpanded)
            {
                <AddFixturePanel StoreId="StoreId" OnFixtureClicked="TriggerStateChange" ToggleAddFixture="ToggleAddFixture"
                    FixtureDraggedEvent="OnFixtureDragged" FixtureModels="FixtureModels" />
            }
            @if (buildingWallsExpanded)
            {
                <BuildingWallsPanel StoreId="StoreId" Store="Store" UpdateStore="UpdateStore"
                    ToggleBuildingWalls="ToggleBuildingWalls" />
            }

        }

        <div class="d-flex flex-column gap-2">
            @if (!addFixtureExpanded)
            {
                <Button Class="Button button-with-spacing" Id="buttonAddFixture" Variant="primary"
                    OnClickFunction="ToggleAddFixture" Icon="fas fa-edit" IsDisabled="false" TextAlignment="center">
                    Add Fixture
                </Button>
            }

            @if (!buildingWallsExpanded)
            {
                <Button Class="Edit Building Walls Button button-with-spacing" Id="buttonEditWalls" Variant="primary"
                    OnClickFunction="ToggleBuildingWalls" Icon="fas fa-edit" IsDisabled="false" TextAlignment="center">
                    Edit Building Walls
                </Button>
            }

            <Button Class="Button" Id="buttonViewAllocations" Variant="primary" OnClickFunction="ToggleAllocations"
                Icon="fa-solid fa-eye" IsDisabled=false TextAlignment="center">
                View Allocations
            </Button>

            <Button Class="Button" Id="buttonImportFile" Variant="primary" data-bs-target="importExcelModal"
                data-bs-toggle="modal" Icon="fa-solid fa-file-import" IsDisabled=false TextAlignment="center">
                Import Excel File
            </Button>

            <Button Icon="fa-solid fa-print" Variant="primary" isDisabled="false" TextAlignment="center"
                data-bs-target="printModal" data-bs-toggle="modal">
                Print Layout
            </Button>

            <Button Icon="fa-solid fa-floppy-disk" Variant="success" isDisabled="false" TextAlignment="center">
                Save
            </Button>

            <FixtureConfigModal />
        </div>
    }
</SlideOut>

<ImportExcelModal FloorsetId="floorsetId" />

<PrintModal />

<AddFixtureModal StoreId="StoreId" UpdateFixtureModels="UpdateFixtureModels" />

<EditFixtureModal />

<HelpModal />

@code {
    [Parameter] public int StoreId { get; set; }
    [Parameter] public int FloorsetId { get; set; }

    private List<Data.Models.Fixtures.FixtureModel> FixtureModels = new List<Data.Models.Fixtures.FixtureModel>();

    private async Task UpdateFixtureModels()
    {
        var response = await FixturesHttpClient.GetFixtureModelsByStore(StoreId);

        if (response != null)
        {
            FixtureModels = response;
        }

    }

    private Data.Models.Stores.Store? Store;

    private async Task UpdateStore()
    {
        var response = await StoresHttpClient.GetStore(StoreId);

        if (response != null)
        {
            Store = response;

            Console.WriteLine(response.LENGTH);

            await JS.InvokeVoidAsync("window.updateStoreSize", response.LENGTH, response.WIDTH);
        }

    }

    protected override async Task OnInitializedAsync()
    {

        var response = await StoresHttpClient.GetStore(StoreId);

        if (response != null)
        {
            Store = response;
        }

        await UpdateFixtureModels();

        @* addFixtureInstanceToGrid *@
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("render");
        await UpdateStore();
        @* if (firstRender)
        {

            var response = await FixturesHttpClient.GetFloorsetFixtureInformation(FloorsetId);

            if (response != null)
            {
                response.ForEach(async (fixtureInstance) =>
                {
                    Console.WriteLine(fixtureInstance.EDITOR_ID);
                    await JS.InvokeVoidAsync("window.addFixture", fixtureInstance.EDITOR_ID, fixtureInstance.X_POS,
    fixtureInstance.Y_POS, 1, 1);
                });
            }
        } *@
    }

    @* private int? selectedFixtureID; *@
    @* private FixtureConfigModal? configModal; *@

    @* Tristan Calay 4/7/25
    Hold a reference to the fixture model that gets dragged onto the grid, so that when the JS 
    calls for a new ID, an instance is ready to be created.*@

    private Data.Models.Fixtures.FixtureModel? currentDraggedFixture { get; set; }

    @*
    Tristan Calay 4/7/25
    To be called by the AddFixturePanel : FixtureDraggedEvent callback. 
    Caches a fixture model to be used as a FixtureInstance and sent to the grid.*@
    public void OnFixtureDragged(Data.Models.Fixtures.FixtureModel model)
    {
        currentDraggedFixture = model;
    }


    /* Tristan Calay 3/28/25
    The allocations sidebar reference allows methods to be called from here to the sidebar.
    It should be set by @ref in the page layout above.
    */
    private AllocationsSidebar? allocationsSidebar;

    /*Tristan Calay 4/7/25
    Compute the totals for each category in the allocation sidebar, based on the fixtures dict*/
    private void ComputeAllocationTotals()
    {
        //Break if the allocations sidebar reference is null.
        if (allocationsSidebar == null)
        {
            return;
        }

        Console.WriteLine("Compute Allocation Totals");

        List<Category> categories = allocationsSidebar.getAllCategories();
        //Set all start values to zero. They are computed by adding the fixture LF to the categories.

        foreach (Category category in categories)
        {
            category.currentValue = 0;
        }
        @* foreach (Data.Models.Fixtures.FixtureInstance fixture in fixturesDict.Values)
        {
            //Find the progress bar representing the category, and add the current hanging capacity to it.
            foreach (Category category in categories)
            {
                if (category.isHeader)
                {
                    if (category.headerCategory == fixture.CATEGORY)
                    {
                        category.currentValue += fixture.TOT_LF;
                    }
                }
                else if (category.headerCategory == fixture.CATEGORY && category.text == fixture.CATEGORY)
                {
                    category.currentValue += fixture.TOT_LF;
                }


            }
        } *@

        allocationsSidebar.notifyCategoryUpdates();
    }


    /*
    The UpdateImage function updates the image data in a fixture.
    */
    [JSInvokable]
    public void UpdateImage(string value)
    {
        Console.WriteLine(value);
    }

    private bool buildingWallsExpanded = false;
    private bool allocationsOpen = false;
    private bool addFixtureExpanded = false;

    private void ToggleBuildingWalls()
    {
        buildingWallsExpanded = !buildingWallsExpanded;
        if (buildingWallsExpanded == true)
        {
            addFixtureExpanded = false;
        }
    }

    /* Danielle Smith - 3/24/2025
    added back add fixture stuff & also made it so expansions work properly with it */
    private void ToggleAddFixture()
    {
        addFixtureExpanded = !addFixtureExpanded;
        if (addFixtureExpanded == true)
        {
            buildingWallsExpanded = false;
        }
    }

    private void ToggleAllocations()
    {
        buildingWallsExpanded = false;
        allocationsOpen = !allocationsOpen;
    }

    private async Task editFixture()
    {
        Console.WriteLine("Edit Fixture Function");
        await JS.InvokeVoidAsync("setPlace");
        allocationsOpen = false;
    }

    private async Task OpenPrint()
    {
        await Task.Run(() => Console.WriteLine("Open Print"));
    }

    private async Task OpenImportModal()
    {
        await Task.Run(() => Console.WriteLine("Open Import"));
    }

    private void EraseCategoryClicked()
    {
        Console.WriteLine("Erase Category Function");
        JS.InvokeVoidAsync("setErase");
        //Call the func in AllocationsSidebar to remove the styling of the selected category.
        if (allocationsSidebar != null)
        {
            InvokeAsync(allocationsSidebar.clearSelectedCategory);
        }
    }

    private int fixturesCount = 0;

    /* Tristan Calay 4/6/25
    Add a new fixture when a fixture is dragged into the grid. */
    [JSInvokable]
    public async Task<int> dictAddNewFixture(String fixtureName)
    {
        Console.WriteLine("DotNet adding new fixture - Fixture Name: " + fixtureName);
        @* int newID = fixturesCount + 1;
        foreach (Fixture fixture in Fixture.fixtures.Values)
        {
            if (fixture.Name == fixtureName)
            {
                FixtureInstance newFixture = new FixtureInstance(fixture, newID);
                fixturesDict.Add(newFixture.editorID, newFixture);
                fixturesCount += 1;
                Console.WriteLine("Created new fixture! Returning ID " + newID);
                return newID;
            }
        } *@

        @*We have a reference to the dragged fixture model in currentDraggedFixture. 
        Create an instance from it and append to dict. Return id.
        
        Data.Models.Fixtures.FixtureInstance
        *@
        if (currentDraggedFixture == null)
        {
            Console.WriteLine("currentDraggedFixture is null! Somewhing went wrong.");
            return -1;
        }

        int newEditorID = fixturesCount + 1;
        Data.Models.Fixtures.FixtureInstance newFixture = new Data.Models.Fixtures.FixtureInstance();
        newFixture.EDITOR_ID = newEditorID;
        newFixture.X_POS = -1;
        newFixture.Y_POS = -1;
        if (currentDraggedFixture.LF_CAP != null)
        {
            newFixture.TOT_LF = (int)currentDraggedFixture.LF_CAP;
        }
        @* fixturesDict.Add(newEditorID, newFixture); *@
        fixturesCount += 1;
        //AddFixtureModel.STORE_TUID = StoreId;
        Data.Models.Fixtures.Fixtures_State state = new Data.Models.Fixtures.Fixtures_State();
        @* state.CurrentFixtures = fixturesDict.Values; *@
        var response = await FixturesHttpClient.UpdateFixtureInformation(FloorsetId, state);
        Console.WriteLine(response);
        Console.WriteLine("Created new fixture! Returning ID " + newEditorID);
        return newEditorID;
    }

    @*  Andrew Kennedy 4/7/25
        This function triggers a state change for the whole page, 
        used for updating the fixture list and fixture data.
    *@
    public void TriggerStateChange()
    {
        StateHasChanged();
    }
}