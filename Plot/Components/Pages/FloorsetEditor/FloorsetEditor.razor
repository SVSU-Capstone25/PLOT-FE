@* 
    Filename: FloorsetEditor.razor
    Part of Project: Plot

    File Purpose:
    The purpose of this file is to let the user edit a floorplan.

    Program Purpose:
    The purpose of PLOT is to allow users to easily create, manage,
    and allocate floorsets for Plato's Closet.

    Authors: 
    - Andrew Kennedy (Add fixture & fixture grid) (3/19/2025)
    - Tristan Calay (Print) (3/17/2025)
    - Andrew Miller (Import)
    - Luke Wollenweber (Edit Building Walls) (3/22/2025)
*@

@rendermode InteractiveServer
@inject IJSRuntime JS
@page "/floorset-editor"
@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.NumericInput
@using Plot.Components.PartialComponents.OptionInput
@using Plot.Components.PartialComponents.TextInput
@using Plot.Components.PartialComponents.Modal
@using Plot.Components.PartialComponents.FileInput

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<link rel="stylesheet" href="AddFixtureModal.razor.css">

<FloorsetGrid />

@* Sidebar *@
<SlideOut Id="FloorsetSlideOut" Class="d-flex flex-column p-2">
    @if (allocationsOpen)
    {
        <AllocationsSidebar @ref="allocationsSidebar" />

        <ToolbarButtons ToggleAllocationsOpen="@ToggleAllocations" />
    }
    else
    {
        @if (addFixtureExpanded || buildingWallsExpanded)
        {
            <div class="expanded flex-grow-1">
                @if (addFixtureExpanded)
                {

                    <AddFixturePanel OnFixtureClicked="TriggerStateChange" />
                }

                @if (buildingWallsExpanded)
                {
                    <BuildingWallsPanel />
                }
            </div>
        }

        <div class="vertical-sidebar-buttons">
            @if (!addFixtureExpanded)
            {
                <Button Class="Button button-with-spacing" Id="buttonEditWalls" Variant="primary"
                    OnClickFunction="ToggleAddFixture" Icon="fas fa-edit" IsDisabled="false" TextAlignment="center">
                    Add Fixture
                </Button>
            }

            @if (!buildingWallsExpanded)
            {
                <Button Class="Edit Building Walls Button button-with-spacing" Id="buttonEditWalls" Variant="primary"
                    OnClickFunction="ToggleBuildingWalls" Icon="fas fa-edit" IsDisabled="false" TextAlignment="center">
                    Edit Building Walls
                </Button>
            }

            <Button Class="Button" Id="buttonImportFile" Variant="primary" OnClickFunction="ToggleAllocations"
                Icon="fa-solid fa-eye" IsDisabled=false TextAlignment="center">
                View Allocations
            </Button>

            <Button Class="Button" Id="buttonImportFile" Variant="primary" OnClickFunction="OpenImportModal"
                Icon="fa-solid fa-file-import" IsDisabled=false TextAlignment="center">
                Import Excel File
            </Button>

            <Button Icon="fa-solid fa-print" Variant="primary" isDisabled="false" TextAlignment="center"
                OnClickFunction="openPrint">
                Print Layout
            </Button>

            <Button Icon="fa-solid fa-floppy-disk" Variant="success" isDisabled="false" TextAlignment="center">
                Save
            </Button>
        </div>
    }
</SlideOut>

<ImportExcelModal />

<PrintModal />

<AddFixtureModal FixtureAdded="TriggerStateChange" />

<EditFixtureModal FixtureEdited="TriggerStateChange" />



}

<script src="js/floorsetEditor.js"></script>

@code {
    @* Tristan Calay 3/28/25
    The allocations sidebar reference allows methods to be called from here to the sidebar.
    It should be set by @ref in the page layout above.
     *@
    private AllocationsSidebar? allocationsSidebar;

    @* Tristan Calay 3/30/25
    The paint mode button adds the return of getPaintClass() to its class when clicked.
    Track paint mode here.*@

    protected override void OnParametersSet() 
    {
        
    }

    private bool paintModeEnabled = false;
    private String getPaintClass()
    {
        if (paintModeEnabled)
        {
            //TODO - Somehow, apply styling to the buttons when they get clicked! Adding a class here does not work.
            return "";
        }
        return "";
    }

    DotNetObjectReference<FloorsetEditor>? dotNet; // Reference to .NET functions in JS

    /*
    The OnAfterRenderAsync function is called after the page is rendered.
    This creates event listeners for the image input and the add button in the Add Fixture modal.
    */
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNet = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("imageEventListener", dotNet);
            await JS.InvokeVoidAsync("eval", "floorsetGrid.init()");
        }
    }
        

    /*
    The SetSearchEvent function calls a JS function to create a search input event listener.
    */
    public async Task SetSearchEvent()
    {
        await JS.InvokeVoidAsync("searchInputChange");
    }

    /*
    The UpdateImage function updates the image data in a fixture.
    */
    [JSInvokable]
    public void UpdateImage(string value)
    {
        Console.WriteLine(value);
    }

    private bool buildingWallsExpanded = false;
    private bool allocationsOpen = false;
    private bool addFixtureExpanded = false;

    private void ToggleBuildingWalls()
    {
        buildingWallsExpanded = !buildingWallsExpanded;
        if (buildingWallsExpanded == true)
        {
            addFixtureExpanded = false;
        }
    }

    /* Danielle Smith - 3/24/2025
    added back add fixture stuff & also made it so expansions work properly with it */
    private async Task ToggleAddFixture()
    {
        addFixtureExpanded = !addFixtureExpanded;
        if (addFixtureExpanded == true)
        {
            await SetSearchEvent();
            buildingWallsExpanded = false;
        }
    }

    private void ToggleAllocations()
    {
        buildingWallsExpanded = false;
        allocationsOpen = !allocationsOpen;
    }

    /* Danielle Smith - 3/16/2025
    function that calls a javascript function to open the import file modal */
    private async Task OpenImportModal()
    {
        await JS.InvokeVoidAsync("toggleModal", "importExcelModal", true);
    }

    //openPrint Task
    //Asynchronous task to find and open the print modal on the page.
    //Called by the "Print Layout" button in the sidebar component.
    private async Task openPrint()
    {
        Console.WriteLine("Showing Print Layout Modal...");
        await JS.InvokeVoidAsync("toggleModal", "printModal", true);
    }

    private async Task editFixture()
    {
        Console.WriteLine("Edit Fixture Function");
        await JS.InvokeVoidAsync("setPlace");
        allocationsOpen = false;
    }

    //The paintCategory button toggles the paint mode of the floorset editor.
    //It passes that information to the javascript.
    private async Task togglePaintClicked()
    {
        await JS.InvokeVoidAsync("togglePaint");
    }

    private async Task eraseCategoryClicked()
    {
        Console.WriteLine("Erase Category Function");
        await JS.InvokeVoidAsync("setErase");

        //Call the func in AllocationsSidebar to remove the styling of the selected category.
        if (allocationsSidebar != null)
        {
            await allocationsSidebar.clearSelectedCategory();
        }
    }

    private void viewFulfillment()
    {
        Console.WriteLine("View Fulfillment Function");
    }

    private void editLayout()
    {
        Console.WriteLine("Edit Layout Function");
    }

    

    /*
    The FilterBtn function calls a JS function to flip the order of the fixture tiles.
    */
    private async Task FilterBtn()
    {
        await JS.InvokeVoidAsync("flipOrder");
    }

    // Lists for holding icons and texts for the Dropdown component
    private List<string> icons = new List<string> { "fa-regular fa-pen-to-square", "fa-regular fa-trash-can" };
    private List<string> texts = new List<string> { "Edit", "Delete" };

    /*
    The OnFixtureAddClick function calls a JS function to toggle the add fixture modal.
    */
    private async Task OnFixtureAddClick()
    {
        await JS.InvokeVoidAsync("toggleModal", "addFixture", true);
    }

    /*
        The OnEditClick function is called when the user clicks the edit button on a fixture.
    */
    private async Task OnEditClick(Fixture currFixture)
    {
        await JS.InvokeVoidAsync("toggleModal","editFixture",true);

        Fixture.selectedFixture = currFixture;

        Fixture.editedFixtureInfo = new Fixture(
            Fixture.selectedFixture.Name,
            Fixture.selectedFixture.Length,
            Fixture.selectedFixture.Width,
            Fixture.selectedFixture.HangerStack,
            Fixture.selectedFixture.FixtureImg
        );
        if (Fixture.selectedFixture.FixtureImg.Contains("base64"))
        {
            await JS.InvokeVoidAsync("SetBackgroundImage","EditImageInput","url("+Fixture.selectedFixture.FixtureImg+")");
        }
        else
        {
            await JS.InvokeVoidAsync("SetBackgroundImage","EditImageInput",Fixture.selectedFixture.FixtureImg);
        }
                
    }    

    public void TriggerStateChange() 
    {
        StateHasChanged();
    }
}