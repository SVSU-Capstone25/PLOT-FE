@page "/floorset-editor"
@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.NumericInput

<!-- Grid Area -->
<div class="wrapper" width="500px" height="500px">
    <div class="main-content">
        <div class="grid">
            @for (int i = 0; i < 50; i++)
            {
                @for (int j = 0; j < 50; j++)
                {
                    <div class="grid-cell" id="cell-@i-@j"></div>
                }
            }
        </div>
    </div>
</div>

<SlideOut Id="FloorsetSlideOut" Class="slide-out-container">
    @if (isPaneExpanded)
    {
        <div class="expanded-container">
            <h3 class="header" @onclick="TogglePane">Header of Expanded Area</h3>
            <!-- Add other components here when the pane is expanded -->
            <div class="horizantal-inputs">
                <NumericInput Label="" Placeholder="" Description="Enter the Dimensions (width and length) in feet"
                ValueChanged="NumberChanged" />
                <span class="dimension-separator">X</span> <!-- The X to separate the two inputs -->
                <NumericInput Label="" Placeholder="" Description=""
                ValueChanged="NumberChanged" />
            </div>
            <Checkbox id="checkboxOne" Text="Employee Only Area" />
            <Button Class="Apply button-green" Id="buttonApply" Variant="primary" OnClickFunction="ApplyDimensions"
                Icon="" IsDisabled="false" TextAlignment="center">
                Apply
            </Button>
        </div>
    }
    else
    {
        <Button Class="Edit Building Walls Button button-with-spacing" Id="buttonEditWalls" Variant="primary" OnClickFunction="TogglePane"
        Icon="fas fa-edit" IsDisabled="false" TextAlignment="center">
            Edit Building Walls
        </Button>
    }
</SlideOut>

@code
{
    private bool isPaneExpanded = false;

    private void TogglePane()
    {
        isPaneExpanded = !isPaneExpanded;
    }

    private double currentNumber;

    /* This function is called when the number is changed */
    private async Task NumberChanged(string strNumber)
    {
        // String will be either a positive number or ""
        Double.TryParse(strNumber, out double newNumber);

        currentNumber = newNumber; // Number will be 0 if string is ""

        await InvokeAsync(StateHasChanged);
    }

    private void ApplyDimensions()
    {

    }
}

