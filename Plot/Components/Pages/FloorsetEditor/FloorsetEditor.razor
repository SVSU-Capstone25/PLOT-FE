@page "/floorset-editor"
@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.NumericInput
@rendermode InteractiveServer
@inject IJSRuntime JS

@* 
https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js
https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/TweenMax.min.js
https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/utils/Draggable.min.js
 *@

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/TweenMax.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/utils/Draggable.min.js"></script>


<!-- Grid Area -->
<div id="container">
</div>


<!-- Sidebar -->
<SlideOut Id="FloorsetSlideOut">
    <!-- Header -->
    <div class="sidebar-header p-3">
        <div class="d-flex align-items-center justify-content-between">
            <h5 class="mb-0"> Add Fixture </h5>

        </div>
    </div>

    <!-- Search Bar -->
    <div class="p-3 mb-2 border-bottom">
        <div class="d-flex align-items-center mb-2">

            <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
            <Button class="filter-btn" OnClickFunction="FilterBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter"
                viewBox="0 0 16 16">
                    <path
                    d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5m-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5m-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5" />
                </svg>
            </Button>

        </div>
        <div class="align-items-center mt-3 d-flex">
            <Button class="btn add-fixture btn-lg w-100" Variant="primary" OnClickFunction=@(async (e) => {
                    
                    await JS.InvokeVoidAsync("toggleModal","addFixture",true);

                })>
                <i class="fa-solid fa-plus" style="margin-right: .5rem;" ></i>
                Add Fixture
            </Button>
        </div>

    </div>


    <!-- Fixture Area -->
    <div class="fixture-area p-3 mt-3 d-flex mb-2">

        @foreach (Fixture currFixture in fixtures.Values)
        {

            <div class="fixture mb-3 d-flex flex-row" data-value="@currFixture.Name"
            @ondragstart="@((e) => OnDragStart(e, currFixture.Length + "x" + currFixture.Width))" draggable="true"
            @ondragstart:preventDefault="true">
                <div class="drag-start-area d-flex flex-row">
                    <img class="fixture-img disable-select grab-cursor" src="@currFixture.FixtureImg" alt="">
                    <p class="fixture-text m-2 disable-select grab-cursor">@currFixture.Name</p>
                </div>
                @{
                    string id = currFixture.Name.Replace(" ", "");
                    List<string> links = new List<string> { "#editFixture-" + id, "#deleteFixture-" + id };

                }
                <Dropdown DropdownLinks="@links" DropdownIcons="@icons" DropdownText="@texts"
                class="fixture-options ms-auto disable-select" id="@("fixture-options" + currFixture.Name)"
                LabelText="Fixture">
                </Dropdown>
            </div>



        }

    </div>

</SlideOut>

@* Add Fixture Modal *@
@{    


    <Modal Class="modal-xl fixture-modal" Id="addFixture" Title="Add Fixture">
        <BodyContent>
            <TextInput Label="Name" Placeholder="Three Way Rack" Type="text" Value="@ModalName" ValueChanged="@((v)=> ModalName = v)"/>
            <div class="d-flex flex-row align-items-center justify-content-between">

                <div class="dimension">
                    <NumericInput Id="add-length" Class="dimension" Label="Length" Placeholder="2ft" Description="Enter the length in feet"
                    Value="@ModalLength" ValueChanged="(v) => {
                            ModalLength = v;
                            if (!ModalLength.Equals(string.Empty) && !ModalWidth.Equals(string.Empty)) {
                                try {
                                    ModalLFCapacity = (int.Parse(ModalLength) * int.Parse(ModalWidth)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                                try {
                                    ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                            } else {
                                ModalTotalLF = string.Empty;
                            }
                        }" />
                </div>

                <i class="fa-solid fa-xmark"></i>

                <div class="dimension">
                    <NumericInput Id="add-width" Class="dimension" Label="Width" Placeholder="2ft" Description="Enter the width in feet"
                    Value="@ModalWidth" ValueChanged="(v) => {
                            ModalWidth = v;
                            if (!ModalLength.Equals(string.Empty) && !ModalWidth.Equals(string.Empty)) {
                                try {
                                    ModalLFCapacity = (int.Parse(ModalLength) * int.Parse(ModalWidth)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                                try {
                                    ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)) + string.Empty;
                                } catch (Exception e){
                                    Console.WriteLine(e.GetBaseException());
                                }
                            } else {
                                ModalTotalLF = string.Empty;
                            }
                        }" />
                </div>
            </div>

            <NumericInput Id="add-lfcapacity" Label="Linear Feet Capacity" Placeholder="2ft"
            Description="Enter the capacity of the first layer of hangers on the rack in feet" ReadOnly="true"
            Value="@ModalLFCapacity" ValueChanged="@(v => {
                        ModalLFCapacity = v; 
                        Console.WriteLine(ModalLFCapacity + " " + ModalHangerStack);
                        if (ModalLFCapacity.Equals("") || ModalHangerStack.Equals("")) {
                            ModalTotalLF = "";
                        } else {
                            try {
                                ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)).ToString();
                            } catch (FormatException e) {
                                Console.WriteLine(e.GetBaseException());
                            }
                        }
                    })" />

            <NumericInput Id="add-hanger-stack" Label="Hanger Stack" Placeholder="2" Description="Enter the number of vertically stacked racks"
            Value="@ModalHangerStack" ValueChanged="@(v => {
                        ModalHangerStack = v; 
                        Console.WriteLine(ModalLFCapacity + " " + ModalHangerStack);
                        if (ModalLFCapacity.Equals("") || ModalHangerStack.Equals("")) {
                            ModalTotalLF = "";
                        } else {
                            try {
                                ModalTotalLF = (int.Parse(ModalLFCapacity) * int.Parse(ModalHangerStack)).ToString();
                            } catch (FormatException e) {
                                Console.WriteLine(e.GetBaseException());
                            }
                        }
                    })" />

            <NumericInput Id="add-total-lf" Label="Total Linear Feet" Placeholder="4"
            Description="The final calculation of linear feet (LF capacity x hanger stack)" ReadOnly="true" @bind-Value="ModalTotalLF" />


            <div class="img-input">
                <ImageInput Height="400px" Width="400px" Label="Fixture Image" 
                Id="add-fixtureimg" />
            </div>




        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async (e) => {
                await AddFixture(new Fixture(ModalName,ModalLength,ModalWidth,ModalHangerStack,ModalFixtureImg));
                
            })>Add</Button>
        </FooterContent>
    </Modal>
}

@* Edit Fixture Modal *@
@foreach (Fixture currFixture in fixtures.Values)
{
    string name = currFixture.Name;
    string len = currFixture.Length;
    string wth = currFixture.Width;
    string? lfc = currFixture.LFCapacity;
    string hst = currFixture.HangerStack;
    string? tlf = currFixture.TotalLF;
    string img = currFixture.FixtureImg;

    string id = currFixture.Name.Replace(" ", "");
    List<string> links = new List<string> { "#editFixture-" + id, "#deleteFixture-" + id };


    <Modal Class="modal-xl fixture-modal" Id="@("editFixture-" + id)" Title="Edit Fixture">
        <BodyContent>
            <TextInput Label="Name" Placeholder="Three Way Rack" Type="text" Value="@name" ValueChanged="@(e=>name=e)" />
            <div class="d-flex flex-row align-items-center justify-content-between">
                <div class="dimension">
                    <NumericInput Id="@(id + "-edit-length")" Class="dimension" Label="Length" Placeholder="2ft" Description="Enter the length in feet"
                    Value="@currFixture.Length" ValueChanged="(v) => {
                            currFixture.Length = v;
                            if (!currFixture.Length.Equals(string.Empty) && !currFixture.Width.Equals(string.Empty)) {
                                currFixture.UpdateLFCapacity();
                                currFixture.UpdateTotalLF();
                            } else {
                                currFixture.TotalLF = string.Empty;
                            }
                        }" />
                </div>
                <i class="fa-solid fa-xmark"></i>

                <div class="dimension">
                    <NumericInput Id="@(id + "-edit-width")" Class="dimension" Label="Width" Placeholder="2ft" Description="Enter the width in feet"
                    Value="@currFixture.Width" ValueChanged="(v) => {
                            currFixture.Width = v;
                            if (!currFixture.Length.Equals(string.Empty) && !currFixture.Width.Equals(string.Empty)) {
                                currFixture.UpdateLFCapacity();
                                currFixture.UpdateTotalLF();
                            } else {
                                currFixture.TotalLF = string.Empty;
                            }
                        }" />
                </div>
            </div>

            <NumericInput Id="@(id + "-edit-LFCapacity")" Label="Linear Feet Capacity" Placeholder="2ft"
            Description="Enter the capacity of the first layer of hangers on the rack in feet" ReadOnly="true"
            Value="@currFixture.LFCapacity" ValueChanged="(v) => {
                        currFixture.LFCapacity = v;
                        if (!currFixture.LFCapacity.Equals(string.Empty) && !currFixture.HangerStack.Equals(string.Empty)) {
                            currFixture.UpdateTotalLF();
                        } else {
                            currFixture.TotalLF = string.Empty;
                        }
                    }" />

            <NumericInput Id="@(id + "-edit-HangerStack")" Label="Hanger Stack" Placeholder="2" Description="Enter the number of vertically stacked racks"
            Value="@currFixture.HangerStack" ValueChanged="(v) => {
                        currFixture.HangerStack = v;

                        if (currFixture.LFCapacity != null && !currFixture.LFCapacity.Equals(string.Empty) && !currFixture.HangerStack.Equals(string.Empty)) {
                            currFixture.UpdateTotalLF();
                        } else {
                            currFixture.TotalLF = string.Empty;
                        }
                    }" />

            <NumericInput Id="@(id + "-edit-TotalLF")" Label="Total Linear Feet" Placeholder="4"
            Description="The final calculation of linear feet (LF capacity x hanger stack)" @bind-Value="@currFixture.TotalLF"
            ReadOnly="true" />

            <div class="img-input">
                <ImageInput Height="400px" Width="400px" Label="Fixture Image" 
                Id="@("ImageInput-" + currFixture.Name)"/>
            </div>





        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async () => {
                    UpdateFixture(currFixture, new Fixture(currFixture.Name,len,wth,hst,img));
                    await JS.InvokeVoidAsync("toggleModal","editFixture-"+id,false);
                })>
                Update
            </Button>
        </FooterContent>
    </Modal>

    <Modal Title="Delete Fixture"  Id=@("deleteFixture-" + id)>

        <BodyContent>
            Are you sure you want to delete "@(currFixture.Name)" ?
        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async ()=>{
                    DeleteFixture(currFixture, id);
                    await JS.InvokeVoidAsync("toggleModal","deleteFixture-"+id,false);
                })>
                Delete
            </Button>
        </FooterContent>

    </Modal>

}


<script>
    @* Get reference to the grid area *@
    var container = document.getElementById("container");
    var isAsc = true;

    @* Dimensions of items *@
    var width = 50;
    var height = 50;
    var rows = 48;
    var cols = 48;
    var snap = 50;


    container.style.height = (width * rows) + "px";
    container.style.width = (width * rows) + "px";

    @*     
    for (var i = 0; i < rows * cols; i++) {
        var y = Math.floor(i / cols) * height;
        var x = i * width % (cols * width);
        $("<div class=\"grid-cell\"></div>").css({ top: y, left: x, position: "absolute" }).prependTo(container);
    } *@

    container.setAttribute("style","display: grid; grid-column-gap: 0px;grid-row-gap: 0px;");
    container.style.gridTemplateColumns = `repeat(${cols},${width}px)`;
    container.style.gridTemplateRows = `repeat(${rows},${width}px)`;

    for (var i = 0; i < rows * cols; i++) {
        $("<div class=\"grid-cell\"></div>").prependTo(container);
    }

    function createDraggable(event, size) {

        var sidebar = document.getElementById("FloorsetSlideOut");

        var newBox = document.createElement("div");

        container.appendChild(newBox);

        newBox.className = "box";
        newBox.style.position = "absolute";

        var boxSize = size.split("x");


        newBox.style.height = boxSize[0] * height + "px";
        newBox.style.width = boxSize[1] * width + "px";

        newBox.style.background = "grey";
        newBox.style.borderRadius = "8px";


        // Get container position relative to viewport
        var containerRect = container.getBoundingClientRect();

        var mouseX = event.clientX;
        var mouseY = event.clientY;

        var snappedX = Math.round((mouseX - snap * 2) / snap) * snap;
        var snappedY = Math.round((mouseY - snap * 2) / snap) * snap;

        newBox.style.left = snappedX + "px";
        newBox.style.top = snappedY + "px";


        var draggable = Draggable.create(newBox, {
            bounds: container,
            onDrag: function () {
                TweenLite.to(newBox, 0.5, {
                x: Math.round(this.endX / snap) * snap,
                y: Math.round(this.y / snap) * snap,
                ease: Back.easeOut.config(2)
            });

            },
            onDragEnd: function () {
                var boxRect = newBox.getBoundingClientRect();
                var sidebarRect = sidebar.getBoundingClientRect();
                if (isOverElement(boxRect, sidebarRect)) {
                    container.removeChild(newBox);
                } else {
                    newBox.style.zIndex = 0;
                }

            }
        });

        setTimeout(() => {
            var evt = new MouseEvent("mousedown", {
                bubbles: true,
                cancelable: true,
                clientX: mouseX,
                clientY: mouseY
            });
            newBox.dispatchEvent(evt);
        }, 10);



    } 

    function addFixtureImageListener() {
        document.query
    }

    function isOverElement(draggableRect, staticRect) {
        return (
            draggableRect.top < staticRect.bottom &&
            draggableRect.bottom > staticRect.top &&
            draggableRect.left < staticRect.right &&
            draggableRect.right > staticRect.left
        );
    }


    function flipOrder() {
    if (isAsc) {
        document.querySelector(".fixture-area").style.flexDirection = "column-reverse";
    } else {
        document.querySelector(".fixture-area").style.flexDirection = "column";
    }
        isAsc = !isAsc;
    }

    
    function addFixtureClose(dotNet) {
        $("#addFixture").on('hidden.bs.modal', function (e) {

            dotNet.invokeMethodAsync("ClearTempFixtureData");
            document.querySelector('#addFixture .img-input .ImageInput').style.backgroundImage = "";
            document.querySelector('#addFixture .img-input .ImageInput').classList.add("dashed-border");
        })
    }

    

    function toggleModal(modalId,showModal) {
        if (document.getElementById(modalId)) 
        {
            let test = bootstrap.Modal.getOrCreateInstance(`#${modalId}`);
            console.log(modalId,showModal,test);
            if (showModal) 
            {
                test.show();
            }
            else 
            { 
                document.getElementById(modalId).classList.remove('show');
                document.querySelectorAll('.modal-backdrop')?.forEach(m=>m.remove());
            }
        }
    }

    function imageEventListener(dotNet) {
        document.querySelectorAll('.img-input').forEach(i=>i.firstChild.addEventListener('change',(e)=>{
            console.log(e.target);
            dotNet.invokeMethodAsync("UpdateImage",e.target.value);
        }));
    }


    function alertUser(msg) {
        alert(msg);
    }

</script>

@code {
    public class Fixture
    {

        public string Name { get; set; } = string.Empty;
        public string Length { get; set; } = string.Empty;
        public string Width { get; set; } = string.Empty;
        public string? LFCapacity { get; set; } = string.Empty;
        public string HangerStack { get; set; } = string.Empty;
        public string? TotalLF { get; set; } = string.Empty;
        public string FixtureImg { get; set; } = string.Empty;


        public Fixture(string name, string length, string width, string hangerStack, string fixtureImg)
        {
            try {
                this.Name = name;
                this.Length = length;
                this.Width = width;
                this.LFCapacity = Length.Equals(width) && Length.Equals("") ? "" : (int.Parse(Length) * int.Parse(Width)).ToString() + "";;
                this.HangerStack = hangerStack;
                this.TotalLF = LFCapacity.Equals(hangerStack) && LFCapacity.Equals("") ? "" : (int.Parse(LFCapacity) * int.Parse(HangerStack)).ToString() + "";
                this.FixtureImg = fixtureImg;
            } catch (FormatException e) {
                Console.WriteLine(e.GetBaseException());
            }
        }


        public bool HasNullProperties() =>
        GetType().GetProperties().Any(p => {
            var pValue = p.GetValue(this);            
            return pValue == null || pValue.Equals("");            
        });

        public void UpdateLFCapacity() {
            try {
                LFCapacity = (int.Parse(Length) * int.Parse(Width)) + "";
            } catch (Exception e){
                Console.WriteLine(e.GetBaseException());
            }
        }

        public void UpdateTotalLF() {
            try {
                if (LFCapacity != null) 
                {                
                    TotalLF = (int.Parse(LFCapacity) * int.Parse(HangerStack)) + "";
                }
            } catch (Exception e){
                Console.WriteLine(e.GetBaseException());
            }
        }
        public override string ToString() {
            return  Name + ", " +
                    Length + ", " +
                    Width + ", " +
                    LFCapacity + ", " +
                    HangerStack + ", " +
                    TotalLF + ", " +
                    FixtureImg;

        }



    }

    string ModalName = "";
    string ModalLength = "";
    string ModalWidth = "";
    string ModalLFCapacity = "";
    string ModalHangerStack = "";
    string ModalTotalLF = "";
    string ModalFixtureImg = "";
    DotNetObjectReference<FloorsetEditor>? dotNet;

    private SortedDictionary<string, Fixture> fixtures = new()
    {
        ["Single Hung Rack"] = new Fixture("Single Hung Rack", "5", "2", "1", "img/LayoutPhotoExample.png"),
        ["Double Hung Rack"] = new Fixture("Double Hung Rack", "3", "2", "2", "img/LayoutPhotoExample.png"),
        ["Shelf"] = new Fixture("Shelf", "2", "1", "1", "img/LayoutPhotoExample.png"),

    };

    private List<string> icons = new List<string> { "fa-regular fa-pen-to-square", "fa-regular fa-trash-can" };
    private List<string> texts = new List<string> { "Edit", "Delete" };


    public async Task OnAddFixture() {
        await JS.InvokeVoidAsync("toggleModal","addFixture", true);
    }

    public async Task AddFixture(Fixture currFixture)
    {
        try {
            fixtures.Add(currFixture.Name, currFixture);
            await JS.InvokeVoidAsync("toggleModal","addFixture",false);
            ClearTempFixtureData();
        } catch (ArgumentException)
        {
            await JS.InvokeVoidAsync("alertUser","A fixture with that name has already been used.  Please choose another name.");
        }

    
    }

    public void UpdateFixture( Fixture currFixture, Fixture newFixture)
    {
        fixtures.Remove(currFixture.Name);
        fixtures.Add(newFixture.Name,newFixture);
        @* Console.WriteLine(currFixture.ToString());
        currFixture.Name = newFixture.Name;
        currFixture.Length = newFixture.Length;
        currFixture.Width = newFixture.Width;
        currFixture.LFCapacity = newFixture.LFCapacity;
        currFixture.HangerStack = newFixture.HangerStack;
        currFixture.TotalLF = newFixture.TotalLF; *@

    }

    public void DeleteFixture(Fixture currFixture,string id) 
    {
        fixtures.Remove(currFixture.Name);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            dotNet = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("imageEventListener",dotNet);
            await JS.InvokeVoidAsync("addFixtureClose",dotNet);
            
        }
    }
    private async Task OnDragStart(DragEventArgs e, string size)
    {

        await JS.InvokeVoidAsync("createDraggable", e, size);
    }

    
    private async Task FilterBtn() {
        await JS.InvokeVoidAsync("flipOrder");
    }

    [JSInvokable]
    public void ClearTempFixtureData() {
        Console.WriteLine("Here");
        ModalName = "";
        ModalLength = "";
        ModalWidth = "";
        ModalLFCapacity = "";
        ModalHangerStack = "";
        ModalTotalLF = "";
        ModalFixtureImg = "";
        StateHasChanged();
    }

    [JSInvokable]
    public void UpdateImage(string value) {
        Console.WriteLine(value);
    }
}