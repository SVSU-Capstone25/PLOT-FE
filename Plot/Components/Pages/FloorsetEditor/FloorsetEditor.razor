@* 
    Filename: FloorsetEditor.razor
    Part of Project: Plot

    File Purpose:
    The purpose of this file is to let the user edit a floorplan.

    Program Purpose:
    The purpose of PLOT is to allow users to easily create, manage,
    and allocate floorsets for Plato's Closet.

    Authors: 
    - Andrew Kennedy (Add fixture & fixture grid) (3/19/2025)
    - Tristan Calay (Print) (3/17/2025)
    - Andrew Miller (Import)
    - Luke Wollenweber (Edit Building Walls) (3/22/2025)
*@

@rendermode InteractiveServer
@inject IJSRuntime JS
@page "/floorset-editor"
@using Plot.Components.PartialComponents.SlideOut
@using Plot.Components.PartialComponents.NumericInput
@using Plot.Components.PartialComponents.OptionInput
@using Plot.Components.PartialComponents.TextInput
@using Plot.Components.PartialComponents.Modal
@using Plot.Components.PartialComponents.FileInput

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

<FloorsetGrid />

@* Sidebar *@
<SlideOut Id="FloorsetSlideOut" Class="d-flex flex-column p-2">
    @if (allocationsOpen)
    {
        <AllocationsSidebar @ref="allocationsSidebar" />

        <ToolbarButtons ToggleAllocationsOpen="@ToggleAllocations" />
    }
    else
    {
        @if (addFixtureExpanded || buildingWallsExpanded)
        {
            <div class="expanded flex-grow-1">
                @if (addFixtureExpanded)
                {

                    <div class="inner-container add-fixture-panel">
                        <h3 class="header pt-3" @onclick="ToggleAddFixture">
                            <i class="fas fa-couch"></i> Add Fixture
                        </h3>
                        <hr style="opacity:1">

                        <!-- Search Bar -->
                        <div class="p-3 mb-2 border-bottom">
                            <div class="d-flex align-items-center m-0">
                                <div class="w-100 search-text">
                                    <TextInput class="form-control p-2 " Id="search" Label="" Type="search" placeholder="Search" />
                                </div>
                                <Button class="filter-btn mb-2" Icon="fa-solid fa-filter" OnClickFunction="FilterBtn" />
                            </div>
                            <div class="align-items-center mt-3 d-flex">
                                <Button class="btn add-fixture btn-lg w-100 p-0" Variant="primary" OnClickFunction="OnFixtureAddClick">
                                    <i class="fa-solid fa-plus" style="margin-right: .5rem;"></i>
                                    Add Fixture
                                </Button>
                            </div>
                        </div>


                        @* Fixture Area *@
                        <div class="fixture-area p-3 mt-3 d-flex gap-4 mb-2">
                            @* Create fixture tile for each fixture in dictionary *@
                            @foreach (Fixture currFixture in Fixture.fixtures.Values)
                            {
                                <div class="fixture d-flex align-items-center gap-3 grab-cursor" data-value="@currFixture.Name" draggable="true"
                                    data-width="@currFixture.Width" data-height="@currFixture.Length" ondragstart="createDraggable(event)">
                                    <img class="fixture-img disable-select grab-cursor" src="@currFixture.FixtureImg" alt="" draggable="false">
                                    <p class="fixture-text m-0 disable-select text-truncate">@currFixture.Name</p>
                                    <Dropdown id="@(" fixture-options" + currFixture.Name)" class="fixture-options ms-auto disable-select" LabelText="Fixture">
                                        <DropdownLink 
                                            @onclick="() => OnEditClick(currFixture)" Icon="@icons[0]">
                                            @texts[0]
                                        </DropdownLink>

                                        <DropdownLink Link="@(String.Concat("#deleteFixture-" + currFixture.Name.Replace(" ", "")))" 
                                            @onclick="() => OnDeleteClick(currFixture)" Icon="@icons[1]">
                                            @texts[1]
                                        </DropdownLink>
                                        
                                        
                                    </Dropdown>
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (buildingWallsExpanded)
                {
                    <BuildingWallsPanel />
                }
            </div>
        }

        <div class="vertical-sidebar-buttons">
            @if (!addFixtureExpanded)
            {
                <Button Class="Button button-with-spacing" Id="buttonEditWalls" Variant="primary"
                    OnClickFunction="ToggleAddFixture" Icon="fas fa-edit" IsDisabled="false" TextAlignment="center">
                    Add Fixture
                </Button>
            }

            @if (!buildingWallsExpanded)
            {
                <Button Class="Edit Building Walls Button button-with-spacing" Id="buttonEditWalls" Variant="primary"
                    OnClickFunction="ToggleBuildingWalls" Icon="fas fa-edit" IsDisabled="false" TextAlignment="center">
                    Edit Building Walls
                </Button>
            }

            <Button Class="Button" Id="buttonImportFile" Variant="primary" OnClickFunction="ToggleAllocations"
                Icon="fa-solid fa-eye" IsDisabled=false TextAlignment="center">
                View Allocations
            </Button>

            <Button Class="Button" Id="buttonImportFile" Variant="primary" OnClickFunction="OpenImportModal"
                Icon="fa-solid fa-file-import" IsDisabled=false TextAlignment="center">
                Import Excel File
            </Button>

            <Button Icon="fa-solid fa-print" Variant="primary" isDisabled="false" TextAlignment="center"
                OnClickFunction="openPrint">
                Print Layout
            </Button>

            <Button Icon="fa-solid fa-floppy-disk" Variant="success" isDisabled="false" TextAlignment="center">
                Save
            </Button>
        </div>
    }
</SlideOut>

<ImportExcelModal />

<PrintModal />

<AddFixtureModal />

@* Edit Fixture Modal *@  
@{

    string id = "";
    
    <Modal IsStatic=true Class="modal-xl fixture-modal" Id="editFixture" Title="Edit Fixture" OnCancelFunction="CleanUpEdit">
        <BodyContent>
            <TextInput Label="Name" Placeholder="Three Way Rack" Type="text" Value="@editedFixtureInfo?.Name" 
                ValueChanged="@(e=>{if (editedFixtureInfo != null) editedFixtureInfo.Name=e;})" />
            <div class="d-flex flex-row align-items-center justify-content-between">
                <div class="dimension">
                    <NumericInput Id="@(id + "-edit-length")" Class="dimension" Label="Length" Placeholder="2ft" Description="Enter the length in feet"
                    Value="@editedFixtureInfo?.Length" ValueChanged="(v) => {
                            if (editedFixtureInfo != null) {
                                editedFixtureInfo.Length = v;
                                // If the length and the width have values, calculate LF capacity
                                if (!editedFixtureInfo.Length.Equals(string.Empty) && !editedFixtureInfo.Width.Equals(string.Empty)) {
                                    editedFixtureInfo.UpdateLFCapacity();
                                    editedFixtureInfo.UpdateTotalLF();
                                } else {
                                    editedFixtureInfo.TotalLF = string.Empty;
                                }
                            }
                        }" />
                </div>
                @* The X to separate the two inputs *
                    @* Making X clickable to swap dimensions (Width -> Length; Length -> Width) -- Zach Ventimiglia *
                    Edited by Danielle Smith to use different implementation*@
                <i onclick="SwapDimensions('@(id + "-edit-length-number-input")','@(id + "-edit-width-number-input")')"
                class="fa-solid fa-xmark" style="cursor: pointer;"></i>

                <div class="dimension">
                    <NumericInput Id="@(id + "-edit-width")" Class="dimension" Label="Width" Placeholder="2ft" Description="Enter the width in feet"
                    Value="@editedFixtureInfo?.Width" ValueChanged="(v) => {
                            if (editedFixtureInfo != null) {
                                editedFixtureInfo.Width = v;
                                // If the length and the width have values, calculate LF capacity
                                if (!editedFixtureInfo.Length.Equals(string.Empty) && !editedFixtureInfo.Width.Equals(string.Empty)) {
                                    editedFixtureInfo.UpdateLFCapacity();
                                    editedFixtureInfo.UpdateTotalLF();
                                } else {
                                    editedFixtureInfo.TotalLF = string.Empty;
                                }
                            }
                        }" />
                </div>
            </div>

            <NumericInput Id="@(id + "-edit-LFCapacity")" Label="Linear Feet Capacity" Placeholder="2ft"
            Description="Enter the capacity of the first layer of hangers on the rack in feet" ReadOnly="true"
            Value="@editedFixtureInfo?.LFCapacity" ValueChanged="(v) => {
                        if (editedFixtureInfo != null) {
                            editedFixtureInfo.LFCapacity = v;
                            // If the LF capacity and the hanger stack have values, calculate total LF
                            if (!editedFixtureInfo.LFCapacity.Equals(string.Empty) && !editedFixtureInfo.HangerStack.Equals(string.Empty)) {
                                editedFixtureInfo.UpdateTotalLF();
                            } else {
                                editedFixtureInfo.TotalLF = string.Empty;
                            }
                        }
                    }" />

            <NumericInput Id="@(id + "-edit-HangerStack")" Label="Hanger Stack" Placeholder="2" Description="Enter the number of vertically stacked racks"
            Value="@editedFixtureInfo?.HangerStack" ValueChanged="(v) => {
                        if (editedFixtureInfo != null) {
                            editedFixtureInfo.HangerStack = v;
                            // If the LF capacity and the hanger stack have values, calculate total LF
                            if (editedFixtureInfo.LFCapacity != null && !editedFixtureInfo.LFCapacity.Equals(string.Empty) && !editedFixtureInfo.HangerStack.Equals(string.Empty)) {
                                editedFixtureInfo.UpdateTotalLF();
                            } else {
                                editedFixtureInfo.TotalLF = string.Empty;
                            }
                        }
                    }" />

            <NumericInput Id="@(id + "-edit-TotalLF")" Label="Total Linear Feet" Placeholder="4"
            Description="The final calculation of linear feet (LF capacity x hanger stack)" Value="@editedFixtureInfo?.TotalLF"
            ValueChanged="(v)=>{if (editedFixtureInfo != null) editedFixtureInfo.TotalLF = v;}"
            ReadOnly="true" />

            <div class="img-input">
                <ImageInput Height="400px" Width="400px" Label="Fixture Ifsmage" 
                Id="EditImageInput"/>
            </div>
        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async () => {
                    await UpdateFixture(id);                    
                })>
                Update
            </Button>
        </FooterContent>
    </Modal>

    <Modal Title="Delete Fixture"  Id="deleteFixture">

        <BodyContent>
            Are you sure you want to delete "@(deletingFixture?.Name ?? "")" ?
        </BodyContent>

        <FooterContent>
            <Button class="btn add-btn ms-auto" Variant="primary" OnClickFunction=@(async ()=>{
                    DeleteFixture(id);
                    await JS.InvokeVoidAsync("toggleModal","deleteFixture"+id,false);
                })>
                Delete
            </Button>
        </FooterContent>
    </Modal>
}

<script src="js/floorsetEditor.js"></script>

@code {
    @* Tristan Calay 3/28/25
    The allocations sidebar reference allows methods to be called from here to the sidebar.
    It should be set by @ref in the page layout above.
     *@
    private AllocationsSidebar? allocationsSidebar;

    @* Tristan Calay 3/30/25
    The paint mode button adds the return of getPaintClass() to its class when clicked.
    Track paint mode here.*@

    private bool paintModeEnabled = false;
    private String getPaintClass()
    {
        if (paintModeEnabled)
        {
            //TODO - Somehow, apply styling to the buttons when they get clicked! Adding a class here does not work.
            return "";
        }
        return "";
    }

    DotNetObjectReference<FloorsetEditor>? dotNet; // Reference to .NET functions in JS

    /*
    The OnAfterRenderAsync function is called after the page is rendered.
    This creates event listeners for the image input and the add button in the Add Fixture modal.
    */
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNet = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("imageEventListener", dotNet);
            await JS.InvokeVoidAsync("eval", "floorsetGrid.init()");
        }
    }

    /*
    The SetSearchEvent function calls a JS function to create a search input event listener.
    */
    public async Task SetSearchEvent()
    {
        await JS.InvokeVoidAsync("searchInputChange");
    }

    /*
    The UpdateImage function updates the image data in a fixture.
    */
    [JSInvokable]
    public void UpdateImage(string value)
    {
        Console.WriteLine(value);
    }

    private bool buildingWallsExpanded = false;
    private bool allocationsOpen = false;
    private bool addFixtureExpanded = false;

    private void ToggleBuildingWalls()
    {
        buildingWallsExpanded = !buildingWallsExpanded;
        if (buildingWallsExpanded == true)
        {
            addFixtureExpanded = false;
        }
    }

    /* Danielle Smith - 3/24/2025
    added back add fixture stuff & also made it so expansions work properly with it */
    private async Task ToggleAddFixture()
    {
        addFixtureExpanded = !addFixtureExpanded;
        if (addFixtureExpanded == true)
        {
            await SetSearchEvent();
            buildingWallsExpanded = false;
        }
    }

    private void ToggleAllocations()
    {
        buildingWallsExpanded = false;
        allocationsOpen = !allocationsOpen;
    }

    /* Danielle Smith - 3/16/2025
    function that calls a javascript function to open the import file modal */
    private async Task OpenImportModal()
    {
        await JS.InvokeVoidAsync("toggleModal", "importExcelModal", true);
    }

    //openPrint Task
    //Asynchronous task to find and open the print modal on the page.
    //Called by the "Print Layout" button in the sidebar component.
    private async Task openPrint()
    {
        Console.WriteLine("Showing Print Layout Modal...");
        await JS.InvokeVoidAsync("toggleModal", "printModal", true);
    }

    private async Task editFixture()
    {
        Console.WriteLine("Edit Fixture Function");
        await JS.InvokeVoidAsync("setPlace");
        allocationsOpen = false;
    }

    //The paintCategory button toggles the paint mode of the floorset editor.
    //It passes that information to the javascript.
    private async Task togglePaintClicked()
    {
        await JS.InvokeVoidAsync("togglePaint");
    }

    private async Task eraseCategoryClicked()
    {
        Console.WriteLine("Erase Category Function");
        await JS.InvokeVoidAsync("setErase");

        //Call the func in AllocationsSidebar to remove the styling of the selected category.
        if (allocationsSidebar != null)
        {
            await allocationsSidebar.clearSelectedCategory();
        }
    }

    private void viewFulfillment()
    {
        Console.WriteLine("View Fulfillment Function");
    }

    private void editLayout()
    {
        Console.WriteLine("Edit Layout Function");
    }

    public Fixture? selectedFixture;
    public Fixture? editedFixtureInfo;
    public Fixture? deletingFixture;
    /*
        The UpdateFixture function refreshes the current fixture and closes the Edit Fixture modal.
    */
    public async Task UpdateFixture(string id)
    {
        // If the fixture has valid values, remove and readd the fixture with the new name, 
        // since the dictionary key is the fixture name.
        if (editedFixtureInfo != null && selectedFixture != null) {

            editedFixtureInfo.FixtureImg = await getImageUrlEdit();
            if (!editedFixtureInfo.HasNullProperties()) {
                await JS.InvokeVoidAsync("toggleModal","editFixture-"+id,false);
                Fixture.fixtures.Remove(selectedFixture.Name);
                Fixture.fixtures.Add(editedFixtureInfo.Name,editedFixtureInfo);
            } else {
                // If not, tell the user to fill out all fields.
                await JS.InvokeVoidAsync("displayAlert","Please fill out all fields.");
            }        
        }

    }

    // function to get the url of the image. This calls the JS method getBackgroundImageUrl that grabs the URL form the imageInput style tag *@
    private async Task<string> getImageUrlEdit()
    {
        string strImageUrl = await JS.InvokeAsync<string>("getBackgroundImageUrl", "editFixture");
        //Console.WriteLine(strImageUrl);
        //check if a picture has been chosen
        //return the string, or if null, the default store layout photo
        return string.IsNullOrEmpty(strImageUrl) ? "/img/LayoutPhotoExample.png" : strImageUrl;
    }

    /*
        The DeleteFixture function removes the fixture from the dictionary, 
        removing it from the fixture area in the sidebar.
    */
    public void DeleteFixture(string id) 
    {

        Fixture.fixtures.Remove(deletingFixture?.Name ?? "");
    }

    /*
    The FilterBtn function calls a JS function to flip the order of the fixture tiles.
    */
    private async Task FilterBtn()
    {
        await JS.InvokeVoidAsync("flipOrder");
    }

    // Lists for holding icons and texts for the Dropdown component
    private List<string> icons = new List<string> { "fa-regular fa-pen-to-square", "fa-regular fa-trash-can" };
    private List<string> texts = new List<string> { "Edit", "Delete" };

    /*
    The OnFixtureAddClick function calls a JS function to toggle the add fixture modal.
    */
    private async Task OnFixtureAddClick()
    {
        await JS.InvokeVoidAsync("toggleModal", "addFixture", true);
    }

    /*
        The OnEditClick function is called when the user clicks the edit button on a fixture.
    */
    private async Task OnEditClick(Fixture currFixture)
    {
        await JS.InvokeVoidAsync("toggleModal","editFixture",true);

        selectedFixture = currFixture;

        editedFixtureInfo = new Fixture(
            selectedFixture.Name,
            selectedFixture.Length,
            selectedFixture.Width,
            selectedFixture.HangerStack,
            selectedFixture.FixtureImg
        );
        if (selectedFixture.FixtureImg.Contains("base64"))
        {
            await JS.InvokeVoidAsync("SetBackgroundImage","EditImageInput","url("+selectedFixture.FixtureImg+")");
        }
        else
        {
            await JS.InvokeVoidAsync("SetBackgroundImage","EditImageInput",selectedFixture.FixtureImg);
        }
        

        
    }

    /*
        The OnDeleteClick function is called when the user clicks the delete button on a fixture.
    */
    private async Task OnDeleteClick(Fixture currFixture) {
        deletingFixture = currFixture;
        await JS.InvokeVoidAsync("toggleModal","deleteFixture",true);
    }

    public async Task CleanUpEdit() {
        selectedFixture = new Fixture("","","","","");

        await JS.InvokeVoidAsync("ClearBackgroundImage","EditImageInput");
    }

}