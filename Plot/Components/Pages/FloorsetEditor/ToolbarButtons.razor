@* Toolbar Buttons.razor *@
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

@using Plot.Services
@using Plot.Components.PartialComponents.Button
@using Microsoft.AspNetCore.Components.Authorization

<div class="d-flex flex-row gap-2 justify-content-center p-2">
    @*Edit Fixture Button *@
    <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-pen-to-square" @onclick="EditFixture"
        TextAlignment="center" />

    <AuthorizeView Policy="Manager">
        @*Paint Category Button *@
        <Button IsDisabled="false" Variant="@getPaintVariant" Icon="fa-solid fa-brush" @onclick="TogglePaintClicked"
            TextAlignment="center" />

        @*Erase Category Button *@
        <Button IsDisabled="false" Variant="@getEraseVariant" Icon="fa-solid fa-eraser" @onclick="OnEraseClicked"
            TextAlignment="center" />
    </AuthorizeView>
</div>

@code {
    [Parameter] public required EventCallback ToggleAllocationsOpen { get; set; }

    @* Tristan Calay 3/30/25
    The paint mode button adds the return of getPaintClass() to its class when clicked.
    Track paint mode here.*@

    private enum PaintType
    {
        None,
        Paint,
        Erase
    };

    private PaintType paintMode = PaintType.None;
    private string getPaintVariant => paintMode == PaintType.Paint ? "secondary" : "primary";
    private string getEraseVariant => paintMode == PaintType.Erase ? "secondary" : "primary";

    private async Task EditFixture()
    {
        await JSRuntime.InvokeVoidAsync("window.setPlace");
        await ToggleAllocationsOpen.InvokeAsync();
        ToastService.ShowInfo("You can now move and place fixtures.");
        @* allocationsOpen = false; *@
    }

    //The paintCategory button toggles the paint mode of the floorset editor.
    //It passes that information to the javascript.
    private async Task TogglePaintClicked()
    {
        switch (paintMode)
        {
            case PaintType.Paint:
                paintMode = PaintType.None;
                await JSRuntime.InvokeVoidAsync("window.setPaintMode", false);
                ToastService.ShowInfo("You can now move and place fixtures.");
                break;
            default:
                paintMode = PaintType.Paint;
                await JSRuntime.InvokeVoidAsync("window.setPaintMode", true);
                ToastService.ShowInfo("You can now paint fixtures with allocations.");
                break;
        }
    }

    private async Task OnEraseClicked()
    {
        switch (paintMode)
        {
            case PaintType.Erase:
                paintMode = PaintType.None;
                await JSRuntime.InvokeVoidAsync("window.setPaintMode", false);
                ToastService.ShowInfo("You can now move and place fixtures.");
                break;
            default:
                paintMode = PaintType.Erase;
                await JSRuntime.InvokeVoidAsync("setErase");
                ToastService.ShowInfo("You can now erase allocations from fixtures.");
                break;
        }
    }
}