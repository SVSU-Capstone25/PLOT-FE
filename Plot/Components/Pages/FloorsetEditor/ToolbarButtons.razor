@* Toolbar Buttons.razor *@
@inject IJSRuntime JS

@using Plot.Components.PartialComponents.Button

<div class="toolbar-buttons">
    @*Edit Fixture Button *@
    <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-pen-to-square" OnClickFunction="editFixture"
        TextAlignment="center" />

    @*Paint Category Button *@
    <Button IsDisabled="false" Variant="@getPaintVariant()" Icon="fa-solid fa-brush"
        OnClickFunction="togglePaintClicked" TextAlignment="center" />

    @*Erase Category Button *@
    <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-eraser" OnClickFunction="onEraseClicked"
        TextAlignment="center" />
</div>

@code {
    [Parameter] public required EventCallback ToggleAllocationsOpen { get; set; }
    [Parameter] public required EventCallback EraseClicked { get; set; }

    @* Tristan Calay 3/30/25
    The paint mode button adds the return of getPaintClass() to its class when clicked.
    Track paint mode here.*@

    private bool paintModeEnabled = false;
    private String getPaintVariant()
    {
        if (paintModeEnabled)
        {
            return "secondary";
        }
        return "primary";
    }

    private async Task editFixture()
    {
        Console.WriteLine("Edit Fixture Function");
        await JS.InvokeVoidAsync("window.setPlace");
        await ToggleAllocationsOpen.InvokeAsync();
        @* allocationsOpen = false; *@
    }

    //The paintCategory button toggles the paint mode of the floorset editor.
    //It passes that information to the javascript.
    private async Task togglePaintClicked()
    {
        paintModeEnabled = !paintModeEnabled;
        Console.WriteLine("Toggle Paint Clicked: Now " + paintModeEnabled);
        await JS.InvokeVoidAsync("window.setPaintMode", paintModeEnabled);
        @* paintModeEnabled = !paintModeEnabled;
        Console.WriteLine("Paint Category Function - set paint mode to " + paintModeEnabled); *@
        @* await JS.InvokeVoidAsync("setPaintEnabled", paintModeEnabled); *@
        @* StateHasChanged(); *@
    }

    private async Task onEraseClicked()
    {
        Console.WriteLine("Erase Clicked!");
        await EraseClicked.InvokeAsync();
    }

    private void viewFulfillment()
    {
        Console.WriteLine("View Fulfillment Function");
    }

    private void editLayout()
    {
        Console.WriteLine("Edit Layout Function");
    }
}