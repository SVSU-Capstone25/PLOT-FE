@* Toolbar Buttons.razor *@
@inject IJSRuntime JS

@using Plot.Components.PartialComponents.Button

<div class="toolbar-buttons">
@*Edit Fixture Button *@
    <Button IsDisabled="false" Variant="primary" Icon="fa-solid fa-pen-to-square" OnClickFunction="editFixture"
        TextAlignment="center" />

@*Paint Category Button *@
    <Button IsDisabled="false" Variant="@getPaintVariant()" Icon="fa-solid fa-brush"
        OnClickFunction="togglePaintClicked" TextAlignment="center" />
</div>

@code {
    [Parameter] public required EventCallback ToggleAllocationsOpen { get; set; }

    @* Tristan Calay 3/30/25
    The paint mode button adds the return of getPaintClass() to its class when clicked.
    Track paint mode here.*@

    private enum PaintType
    {
        None,
        Paint,
        Erase
    };

    private PaintType paintMode = PaintType.None;
    private String getPaintVariant()
    {
        if (paintMode == PaintType.Paint)
        {
            return "secondary";
        }
        return "primary";
    }
    private String getEraseVariant()
    {
        if (paintMode == PaintType.Erase)
        {
            return "secondary";
        }
        return "primary";
    }

    private async Task editFixture()
    {
        Console.WriteLine("Edit Fixture Function");
        await JS.InvokeVoidAsync("window.setPlace");
        await ToggleAllocationsOpen.InvokeAsync();
        @* allocationsOpen = false; *@
    }

    //The paintCategory button toggles the paint mode of the floorset editor.
    //It passes that information to the javascript.
    private async Task togglePaintClicked()
    {
        switch (paintMode)
        {
            case PaintType.Paint:
                paintMode = PaintType.None;
                await JS.InvokeVoidAsync("window.setPaintMode", false);
                break;
            default:
                paintMode = PaintType.Paint;
                await JS.InvokeVoidAsync("window.setPaintMode", true);
                break;
        }

        Console.WriteLine("Toggle Paint Clicked: Now " + paintMode);
        @* paintModeEnabled = !paintModeEnabled;
        Console.WriteLine("Paint Category Function - set paint mode to " + paintModeEnabled); *@
        @* await JS.InvokeVoidAsync("setPaintEnabled", paintModeEnabled); *@
        @* StateHasChanged(); *@
    }

    private async Task onEraseClicked()
    {
        //TODO: Remove this delay when some await is implemented, or change async to void
        await Task.Run(async () =>
        {
            await Task.Delay(1);
        });
        //TODO: Change the JS functions here such that window state hooks up correctly.
        switch (paintMode)
        {
            case PaintType.Erase:
                paintMode = PaintType.None;
                //TODO: Send "no erase" to Window State
                //await JS.InvokeVoidAsync("window.setPaintMode", false);
                break;
            default:
                paintMode = PaintType.Erase;
                //TODO: Send "erase" to Window State
                //await JS.InvokeVoidAsync("window.setPaintMode", true);
                //await JS.InvokeVoidAsync("setErase");
                break;
        }
        Console.WriteLine("Erase Clicked! Paint mode now " + paintMode);
    }

    private void viewFulfillment()
    {
        Console.WriteLine("View Fulfillment Function");
    }

    private void editLayout()
    {
        Console.WriteLine("Edit Layout Function");
    }
}