@* Quick page to test Authentication of endpoints
   This can be used as a refrence on how to access
   BE endpoints and how auth attributes/tags *@

@page "/client-test-fixture"

@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Plot.Data.Models.Auth.Registration
@using Plot.Data.Models.Auth.ResetPassword
@using Plot.Data.Models.Stores
@inject HttpClient Client
@inject AuthHeaderHttpClient AuthHeaderHttpClient
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthService AuthService
@inject StoresHttpClient StoresHttpClient
@inject FixturesHttpClient FixturesHttpClient


<PageTitle>TestFixtures</PageTitle>




<h1>Hello Stores</h1>

<body class="background">
    <div class="login">
        <form class="body-content" @onsubmit="GetFloorsetFixtureInformation">
            
            <Button Class="Button" Id="buttonFail" Variant="primary" Icon="" Type="submit" IsDisabled=false
                TextAlignment="center">
                GetFloorsetFixtureInformation
            </Button>
            
        </form>
            
        
        <form class="body-content" @onsubmit="UpdateFixtureInformation">
            
            <Button Class="Button" Id="buttonPass" Variant="primary" Icon="" Type="submit" IsDisabled=false
                TextAlignment="center">
                UpdateFixtureInformation
            </Button>
            
        
        </form>
        <form class="body-content" onsubmit="CreateFixtureModel">
            
            <Button Class="Button" Id="buttonPass" Variant="primary" Icon="" Type="submit" IsDisabled=false
                TextAlignment="center">
                CreateFixtureModel
            </Button>
            
        </form>
        <form class="body-content" onsubmit="@DeleteFixtureModel">
            
            <Button Class="Button" Id="buttonPass" Variant="primary" Icon="" Type="submit" IsDisabled=false
                TextAlignment="center">
                DeleteFixtureModel
            </Button>
            
        </form>
        <form class="body-content" onsubmit="@UpdateFixtureModel">
            
            <Button Class="Button" Id="buttonPass" Variant="primary" Icon="" Type="submit" IsDisabled=false
                TextAlignment="center">
                UpdateFixtureModel
            </Button>
            
        
        </form>
        
        <div class="footer-content">
        </div>
    </div>
</body>


@code
{//THIS TESTING PAGE IS NOT DONE-----------------------------------------------------------NOT DONE

    //WORKS
    private async void GetFloorsetFixtureInformation()
    {   
    
        var stores = await StoresHttpClient.GetListOfStores();

        

        if(stores == null)
        {
            Console.WriteLine("Error All store list is null");

        }else
        {
            foreach (Store store in stores)
            {
                Console.WriteLine(store.ToString());
            }
        }
    }

    
    // 4/3(Database connection failed: , 
    // Could not find stored procedure 'Select_Store'.)-mp
    private async void UpdateFixtureInformation()
    {   
        var userId=10;

        var stores = await StoresHttpClient.GetStoreAccessByUserId(userId);

        

        if(stores == null)
        {
            Console.WriteLine("Error store list by userID is null");

        }else
        {
            foreach (Store store in stores)
            {
                Console.WriteLine(store.ToString());
            }
        }
    }

    // 4/3(Database connection failed: , 
    //Could not find stored procedure 'Insert_Update_Store'.)-mp
    private async void CreateFixtureModel()
    {   
        Store newStore = new Store
        {
            NAME = "TEST Store Name",
            ADDRESS = "123 TEST Address",
            CITY = "TEST City",
            STATE = "TEST State",
            ZIP = "12345",
            WIDTH= 100,
            LENGTH= 100,
            BLUEPRINT_IMAGE= System.Text.Encoding.UTF8.GetBytes("0X01020304"),
        };

        var store = await StoresHttpClient.CreateStore(newStore);

        

        if(store == null)
        {
            Console.WriteLine("Error new store is null");

        }else
            Console.WriteLine(store.ToString());
    }

//THESE TESETS ARE NOT DONE-----------------------------------------------------------NOT DONE
    private async void DeleteFixtureModel()
    {   
        Store updateStore = new Store
        {   TUID = 21,
            NAME = "Update Store Name",
            ADDRESS = "123 TEST Address",
            CITY = "TEST City",
            STATE = "TEST State",
            ZIP = "12345",
            WIDTH= 100,
            LENGTH= 100,
            BLUEPRINT_IMAGE= System.Text.Encoding.UTF8.GetBytes("0X01020304"),
        };

        int storeId = updateStore.TUID ?? 0;

        var store = await StoresHttpClient.UpdatePublicInfo(storeId,updateStore);

        

        if(store == null)
        {
            Console.WriteLine("Updated store is null");

        }else
            Console.WriteLine(store.ToString());
    }

    private async void UpdateFixtureModel()
    {   
        var stores = await StoresHttpClient.GetListOfStores();
        
    }

    


}