@inject UsersHttpClient UsersHttpClient
@inject ToastService ToastService

@using Plot.Services

<Modal class="standard"
Backdrop="static" Keyboard="false"
@attributes="Attributes"
>
    <ModalHeader Title="Confirm Deletion" Variant="danger" />
    <form @onsubmit="async () => await OnDeleteUserSubmit(userTuid)">
        @code {
            private string? deleteTextInput;
            private bool isDisabled => deleteTextInput != "DELETE";
        }
        <ModalBody>
            <h2>Are you SURE you want to delete this user?</h2>
            <input class="form-control w-100" type="text" placeholder="If so, type DELETE below" required
                pattern="DELETE" @bind-value="deleteTextInput" @bind-value:event="oninput" />
        </ModalBody>

        <ModalFooter>
            <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                data-bs-dismiss="modal">
                Yes, Delete
            </Button>
        </ModalFooter>
    </form>
</Modal>

@code {
    [Parameter] public required int userTuid { get; set; }

    [Parameter] public required EventCallback UpdateUsers { get; set; }

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    private async Task OnDeleteUserSubmit(int userId)
    {
        var response = await UsersHttpClient.DeleteUserById(userId);

        if(response != System.Net.HttpStatusCode.OK) {
            ToastService.ShowError("There was an error deleting the user!");
        } else {
            ToastService.ShowSuccess("The user was deleted.");
        }

        await UpdateUsers.InvokeAsync();
    }
}