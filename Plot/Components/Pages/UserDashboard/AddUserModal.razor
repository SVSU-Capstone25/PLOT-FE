@inject AuthHttpClient AuthHttpClient
@inject StoresHttpClient StoresHttpClient
@inject UsersHttpClient UsersHttpClient

<Modal class="modal-dialog modal-xl user-modal user-info-modal" SizeClass="modal-xl" @attributes="Attributes">
    <ModalHeader Title="Add User" />
    <EditForm Model="AddUserModel" OnValidSubmit="async () => await OnAddUserSubmit()">
        <DataAnnotationsValidator />
        <AddUpdateUserModalBody AddUpdateUserModel="AddUserModel" UserStores="AddUserStores"
            NotUserStores="NotAddUserStores" @ref="modalBodyRef"
            OnUserStoresChanged="HandleUserStoresChange"
            OnNotUserStoresChanged="HandleNotUserStoresChange"/>
        <ModalFooter OnCancelClick="ClearAddUserModel">
            <Button Variant="primary" TextAlignment="center" type="submit" data-bs-dismiss="modal">
                Submit
            </Button>
        </ModalFooter>
    </EditForm>

</Modal>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    [SupplyParameterFromForm] private Data.Models.Users.UpdatePublicInfoUser? AddUserModel { get; set; }

    [Parameter] public required Data.Models.Users.UserDTO? User { get; set; }

    [Parameter] public required EventCallback UpdateUsers { get; set; }

    public AddUpdateUserModalBody? modalBodyRef;

    public List<Data.Models.Stores.Store>? AddUserStores = new();

    public List<Data.Models.Stores.Store>? NotAddUserStores = new();

    public Data.Models.Users.UserDTO? UserFromEmail { get; set; }

    protected override void OnInitialized()
    {
        AddUserModel ??= new()
        {
            ROLE_NAME = "Owner"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            await modalBodyRef!.InitUserStores(0);
        }
    }

    private async Task OnAddUserSubmit()
    {
        int tuid = new();

        if (AddUserModel != null)
        {

            Data.Models.Auth.Registration.UserRegistration UserRegistration = new Data.Models.Auth.Registration.UserRegistration
            {
                EMAIL = AddUserModel.EMAIL,
                FIRST_NAME = AddUserModel.FIRST_NAME,
                LAST_NAME = AddUserModel.LAST_NAME,
                ROLE_NAME = AddUserModel.ROLE_NAME
            };

            var response = await AuthHttpClient.Register(UserRegistration);

            Console.WriteLine("The response is " + response);

            Console.WriteLine("Getting user by email using email " + AddUserModel.EMAIL);
            if (AddUserModel != null && AddUserModel.EMAIL != null)
            {
                int maxRetries = 20;
                int delayMs = 500; // half a second
                int attempt = 0;

                while (UserFromEmail == null && attempt < maxRetries)
                {
                    try
                    {
                        UserFromEmail = await UsersHttpClient.GetUserByEmail(AddUserModel!.EMAIL.ToString());
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Attempt {attempt + 1}: Exception occurred - {ex.Message}");
                    }

                    if (UserFromEmail == null)
                    {
                        Console.WriteLine($"User not found yet. Retrying in {delayMs}ms... (Attempt {attempt + 1}/{maxRetries})");
                        await Task.Delay(delayMs);
                        attempt++;
                    }
                }

                if (UserFromEmail == null)
                {
                    Console.WriteLine("ERROR: User still not found after registration retries.");
                    // Handle fallback or user feedback here
                    return;
                }
                Console.WriteLine("UserDTO object is " + UserFromEmail);
            }
            else
            {
                Console.WriteLine("AddUserModel.EMAIL is null. Why? It shouldn't be null!");
            }

            if (UserFromEmail != null)
            {
                tuid = (int)UserFromEmail.TUID;
                Console.WriteLine($"TUID: {tuid}");
            }
            else
            {
                Console.WriteLine("UserFromEmail is null? Why oh why is it null?");
            }

            Console.WriteLine("In Add user modal About to update user stores in child component");
            await modalBodyRef!.UpdateUserStores(tuid);


            await UpdateUsers.InvokeAsync();
        }

        await ClearAddUserModel();
    }

    public async Task ClearAddUserModel()
    {
        AddUserModel= new()
        {
            ROLE_NAME = "Owner"
        };

        await modalBodyRef!.InitUserStores(0);

        StateHasChanged();
    }

    public void HandleUserStoresChange(List<Data.Models.Stores.Store>? NewAddUserStores)
    {
        AddUserStores = NewAddUserStores;
    }

    public void HandleNotUserStoresChange(List<Data.Models.Stores.Store>? NewNotAddUserStores)
    {
        NotAddUserStores = NewNotAddUserStores;
    }
}