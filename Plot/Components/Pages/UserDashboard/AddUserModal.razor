@inject AuthHttpClient AuthHttpClient

<Modal class="modal-dialog modal-xl user-modal user-info-modal" @attributes="Attributes">
    <ModalHeader Title="Add User" />
    <EditForm Model="AddUserModel" OnValidSubmit="async () => await OnAddUserSubmit()">
        <DataAnnotationsValidator />

        <AddUpdateUserModalBody AddUpdateUserModel="AddUserModel"
            AddUpdateUserStoreRequestModels="AddUpdateUserStoreRequestModels" UserStores="userStores"
            NotUserStores="notUserStores" User="User" @ref="modalBodyRef" />

        <ModalFooter>
            <Button Variant="primary" TextAlignment="center" type="submit">
                Submit
            </Button>
        </ModalFooter>
    </EditForm>

</Modal>

@code {
    private AddUpdateUserModalBody? modalBodyRef;

    private List<Data.Models.Stores.Store>? userStores = new List<Data.Models.Stores.Store>();

    private List<Data.Models.Stores.Store>? notUserStores = new List<Data.Models.Stores.Store>();

    private List<Data.Models.Users.AddUserToStoreRequest> AddUpdateUserStoreRequestModels = new();

    [Parameter] public required EventCallback UpdateUsers { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }
    [SupplyParameterFromForm] private Data.Models.Users.UpdatePublicInfoUser? AddUserModel { get; set; }
    [Parameter] public required Data.Models.Users.UserDTO User { get; set; }

    protected override void OnInitialized() => AddUserModel ??= new();

    private async Task OnAddUserSubmit()
    {
        if (AddUserModel != null)
        {
            Data.Models.Auth.Registration.UserRegistration UserRegistration = new Data.Models.Auth.Registration.UserRegistration
            {
                EMAIL = AddUserModel.EMAIL,
                FIRST_NAME = AddUserModel.FIRST_NAME,
                LAST_NAME = AddUserModel.LAST_NAME,
                ROLE_NAME = AddUserModel.ROLE_NAME
            };

            Console.WriteLine("USER REGISTRATION IS " + UserRegistration);

            var response = await AuthHttpClient.Register(UserRegistration);

            Console.WriteLine("ON ADD USER SUBMIT " + response);

            //await modalBodyRef!.UpdateUserStores();
        }

    }
    /*
    private async Task OnAddUserSubmit()
    {
    //// REFACTOR

    //ResetUserStoreModel();
    //await UpdateUser();
    //await UpdateUserStores(User.TUID);
    // Optionally trigger event to refresh data
    //await UpdateUsers.InvokeAsync();

    StateHasChanged();
    }
    */
    /*
    private async Task OnAddUserSubmit()
    {
    await modalBodyRef!.OnUpdateUserSubmit();
    }
    */
}