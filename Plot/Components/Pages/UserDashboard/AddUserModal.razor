@inject AuthHttpClient AuthHttpClient
@inject StoresHttpClient StoresHttpClient
@inject UsersHttpClient UsersHttpClient
@inject IJSRuntime JS
@inject ToastService ToastService

@using Plot.Services
@using Microsoft.JSInterop

<Modal class="modal-dialog modal-xl user-modal user-info-modal" SizeClass="modal-xl" @attributes="Attributes">
    <ModalHeader Title="Add User" />

    <EditForm Model="AddUserModel" OnValidSubmit="() => OnAddUserSubmit()">

        <DataAnnotationsValidator />

        <AddUpdateUserModalBody AddUpdateUserModel="AddUserModel" AssignedStores="AddUserStores"
            UnassignedStores="NotAddUserStores" SignalParentAssignedStoresChanged="HandleUserStoresChange"
            SignalParentUnassignedStoresChanged="HandleNotUserStoresChange" OnInit="HandleBodyInit"
            DisableSubmitInParent="DisableSubmitFromChild" @ref="modalBodyRef" />
        <ModalFooter OnCancelClick="ClearAddUserModal">
            <Button Variant="primary" TextAlignment="center" type="submit" data-bs-dismiss="modal"
                disabled="@IsSubmitDisabled">
                Submit
            </Button>
        </ModalFooter>
    </EditForm>

</Modal>

<script>

    window.getModalInstance = function (selector) {
        return window.bootstrap.Modal.getOrCreateInstance(document.querySelector(selector));
    };
</script>

@code {

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    [SupplyParameterFromForm] private Data.Models.Users.UpdatePublicInfoUser? AddUserModel { get; set; }

    [Parameter] public required Data.Models.Users.UserDTO? User { get; set; }

    [Parameter] public required EventCallback UpdateUsers { get; set; }

    // Show or hide Loading Message Modal
    [Parameter] public EventCallback<string> ShowLoadingModal { get; set; }

    [Parameter] public EventCallback<string> HideLoadingModal { get; set; }

    private const int NEW_USER = 0; // Indicates new user when initializing stores

    private bool modalBodyInit = false; // AddUpateUserModalBody initialized flag

    private bool IsSubmitDisabled = false; // Disable submit button

    public AddUpdateUserModalBody? modalBodyRef; // Ref for AddUpdateUserModalBody

    // AddUserStores and NotAddUserStores
    public List<Data.Models.Stores.Store> AddUserStores = new();

    public List<Data.Models.Stores.Store> NotAddUserStores = new List<Data.Models.Stores.Store>();

    // Model for getting user from email
    public Data.Models.Users.UserDTO? UserFromEmail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AddUserModel ??= new() // Iniitalize AddUserModel with Role of "Employee"
        {
            ROLE_NAME = "Employee"
        };

        //Get a list of all the stores
        var response = await StoresHttpClient.GetListOfStores();

        if (response != null)
        {

            NotAddUserStores = response;
        }
        else
        {
            ToastService.ShowError("Couldn't get stores!");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!modalBodyInit)
        {
            if (modalBodyRef != null)
            {
                await modalBodyRef!.InitUserStores(NEW_USER);
                modalBodyInit = true;
            }
        }
    }

    public void HandleBodyInit()
    {
        // When modal body is initiated, the AddUpdateUserModalBody.razor
        // file calls this
        if (modalBodyRef != null)
        {
            modalBodyRef?.StateHasChangedFromParent();
        }

        StateHasChanged();
    }

    private async Task OnAddUserSubmit()
    {
        // When Submit is clicked in this modal:

        // Put up Loading modal
        await ShowLoadingModal.InvokeAsync();

        // Create user registration model
        Data.Models.Auth.Registration.UserRegistration registration = new Data.Models.Auth.Registration.UserRegistration
        {
            EMAIL = AddUserModel!.EMAIL,
            FIRST_NAME = AddUserModel!.FIRST_NAME,
            LAST_NAME = AddUserModel!.LAST_NAME,
            ROLE_NAME = AddUserModel!.ROLE_NAME
        };

        // Register the user
        await AuthHttpClient.Register(registration);

        // Get user from email
        Data.Models.Users.UserDTO? UserFromEmail;

        if (registration.EMAIL != null)
        {
            UserFromEmail = await UsersHttpClient.GetUserByEmail(registration.EMAIL);

            // Update user access in database
            if (UserFromEmail != null)
            {
                await UsersHttpClient.UpdateAccessList(
                new Data.Models.Users.UpdateAccessListRequest
                {
                    USER_TUID = UserFromEmail!.TUID,
                    STORE_TUIDS = AddUserStores.Select(store => store.TUID)
                });
            }
            else
            {
                ToastService.ShowError("There was an error adding the user!");
            }
        }
        else
        {
            ToastService.ShowError("There was an error adding the user!");
        }

        // Clear Modal
        await ClearAddUserModal();

        // Hide loading modal
        await HideLoadingModal.InvokeAsync();

        // Update user dashboard
        await UpdateUsers.InvokeAsync();
        ToastService.ShowSuccess("The user was created.");
    }

    public async Task ClearAddUserModal()
    {
        // Clear add user modal

        // New Add User model
        AddUserModel = new()
        {
            ROLE_NAME = "Owner"
        };

        // Reinitialize user stores
        await modalBodyRef!.InitUserStores(NEW_USER);
    }

    public void HandleUserStoresChange(List<Data.Models.Stores.Store> NewAddUserStores)
    {
        AddUserStores = NewAddUserStores;
    }

    public void HandleNotUserStoresChange(List<Data.Models.Stores.Store> NewNotAddUserStores)
    {
        NotAddUserStores = NewNotAddUserStores;
    }

    public void DisableSubmitFromChild(bool isDisabled)
    {
        // Disable submit button from child
        // This disables the submit button temporarily
        // while stores are moved between select boxes
        IsSubmitDisabled = isDisabled;
    }
}