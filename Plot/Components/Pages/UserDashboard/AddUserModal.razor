@inject AuthHttpClient AuthHttpClient
@inject UsersHttpClient UsersHttpClient

<Modal class="modal-dialog modal-xl user-modal user-info-modal" @attributes="Attributes">
    <ModalHeader Title="Add User" />
    <EditForm Model="AddUserModel" OnValidSubmit="async () => await OnAddUserSubmit()">
        <DataAnnotationsValidator />

        <AddUpdateUserModalBody AddUpdateUserModel="AddUserModel"
            AddUpdateUserStoreRequestModels="AddUpdateUserStoreRequestModels" userStores="userStores"
            notUserStores="notUserStores" User="User" @ref="modalBodyRef" />

        <ModalFooter OnCancelClick="ClearAddUserModel">
            <Button Variant="primary" TextAlignment="center" type="submit" data-bs-dismiss="modal">
                Submit
            </Button>
        </ModalFooter>
    </EditForm>

</Modal>

@code {
    private AddUpdateUserModalBody? modalBodyRef;

    private List<Data.Models.Stores.Store>? userStores = new List<Data.Models.Stores.Store>();

    private List<Data.Models.Stores.Store>? notUserStores = new List<Data.Models.Stores.Store>();

    private List<Data.Models.Users.AddUserToStoreRequest> AddUpdateUserStoreRequestModels = new();

    [Parameter] public required EventCallback UpdateUsers { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }
    [SupplyParameterFromForm] private Data.Models.Users.UpdatePublicInfoUser? AddUserModel { get; set; }
    [Parameter] public required Data.Models.Users.UserDTO User { get; set; }

    public Data.Models.Users.UserDTO? UserFromEmail { get; set; }

    protected override void OnInitialized()
    {
        AddUserModel ??= new()
        {
            ROLE_NAME = "Owner"
        };
    }
/*
    private async Task OnAddUserSubmit()
    {
        if (AddUserModel != null)
        {
            Data.Models.Auth.Registration.UserRegistration UserRegistration = new Data.Models.Auth.Registration.UserRegistration
            {
                EMAIL = AddUserModel.EMAIL,
                FIRST_NAME = AddUserModel.FIRST_NAME,
                LAST_NAME = AddUserModel.LAST_NAME,
                ROLE_NAME = AddUserModel.ROLE_NAME
            };

            var response = await AuthHttpClient.Register(UserRegistration);

            Console.WriteLine("The response is " + response);

            // Call from email
            if(UserRegistration != null && !string.IsNullOrWhiteSpace(AddUserModel.EMAIL)){
                Console.WriteLine("Getting user by email using email " + AddUserModel.EMAIL);
                UserFromEmail = await UsersHttpClient.GetUserByEmail(AddUserModel.EMAIL);
                if(UserFromEmail != null){
                    Console.WriteLine("User from Email has TUID" + UserFromEmail.TUID);
                }
                else{
                    Console.WriteLine("User is null");
                }
            }

            if(modalBodyRef != null && UserFromEmail != null) {

                await modalBodyRef.UpdateUserStores(UserFromEmail.TUID);
            }
        }


        ClearAddUserModel();
    }

*/
private async Task OnAddUserSubmit()
{
    if (AddUserModel != null)
    {

        Data.Models.Auth.Registration.UserRegistration UserRegistration = new Data.Models.Auth.Registration.UserRegistration
        {
            EMAIL = AddUserModel.EMAIL,
            FIRST_NAME = AddUserModel.FIRST_NAME,
            LAST_NAME = AddUserModel.LAST_NAME,
            ROLE_NAME = AddUserModel.ROLE_NAME
        };

        var response = await AuthHttpClient.Register(UserRegistration);

        Console.WriteLine("The response is " + response);

        // Call from email
        if(UserRegistration != null && !string.IsNullOrWhiteSpace(UserRegistration.EMAIL)){
            Console.WriteLine("Getting user by email using email " + UserRegistration.EMAIL);
            UserFromEmail = await UsersHttpClient.GetUserByEmail(UserRegistration.EMAIL);
            
            // Check if UserFromEmail was retrieved correctly
            if(UserFromEmail != null){
                Console.WriteLine("User from Email has TUID: " + UserFromEmail.TUID);
            }
            else{
                Console.WriteLine("UserFromEmail is null");
            }
        }

        // Check if the modal body reference is initialized
        if(modalBodyRef != null && UserFromEmail != null) {
            await modalBodyRef.UpdateUserStores(UserFromEmail.TUID);
        }

        await UpdateUsers.InvokeAsync();
    }

    ClearAddUserModel();
}

    private void ClearAddUserModel()
    {
        AddUserModel = new()
        {
            ROLE_NAME = "Owner"
        };
    }
}