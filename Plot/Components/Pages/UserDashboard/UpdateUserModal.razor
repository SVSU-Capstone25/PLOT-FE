@inject UsersHttpClient UsersHttpClient
@using Data.Models.Users;
@using Data.Models.Stores;
@using System.Net;

<Modal class="modal-dialog modal-xl user-modal user-info-modal" @attributes="Attributes">
    <ModalHeader Title="Update User" />
    <EditForm Model="UpdateUserModel" OnValidSubmit="async () => await OnSubmitFromModalBody()">
        <DataAnnotationsValidator />

        <AddUpdateUserModalBody AddUpdateUserModel="UpdateUserModel"
            AddUpdateUserStoreRequestModels="AddUpdateUserStoreRequestModels" UserStores="userStores"
            NotUserStores="notUserStores" User="User" 
            @ref="modalBodyRef"/>

        <ModalFooter OnCancelClick="ClearUpdateUserModel">
            <Button Variant="primary" TextAlignment="center" type="submit" data-bs-dismiss="modal">
                Submit
            </Button>
        </ModalFooter>
    </EditForm>

</Modal>

@code {

    private AddUpdateUserModalBody? modalBodyRef;

    private List<Data.Models.Stores.Store>? userStores = new List<Data.Models.Stores.Store>();

    private List<Data.Models.Stores.Store>? notUserStores = new List<Data.Models.Stores.Store>();

    [Parameter] public required Data.Models.Users.UserDTO User { get; set; }

    [Parameter] public required EventCallback UpdateUsers { get; set; }

    [Parameter] public required List<Data.Models.Stores.Store> UserStores { get; set; }

    [Parameter] public required List<Data.Models.Stores.Store> UserNotStores { get; set; }

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    [SupplyParameterFromForm] private Data.Models.Users.UpdatePublicInfoUser? UpdateUserModel { get; set; }

    [SupplyParameterFromForm] private List<Data.Models.Stores.Store>? UpdateUserStoreModels { get; set; }

    private List<int> selectedStoreTUIDs = new List<int>();

    //private List<int> unselectedStoreTUIDs = new List<int>();

    private List<Data.Models.Users.AddUserToStoreRequest> AddUpdateUserStoreRequestModels = new();

    protected override void OnInitialized()
    {
        UpdateUserModel ??= new Data.Models.Users.UpdatePublicInfoUser
        {
            FIRST_NAME = User.FIRST_NAME,
            LAST_NAME = User.LAST_NAME,
            EMAIL = User.EMAIL,
            ROLE_NAME = User.ROLE
        };

        AddUpdateUserStoreRequestModels ??= new List<Data.Models.Users.AddUserToStoreRequest>();

        foreach (var selectedStoreTUID in selectedStoreTUIDs)
        {
            AddUpdateUserStoreRequestModels.Add(new AddUserToStoreRequest
            {
                USER_TUID = User.TUID,
                STORE_TUID = selectedStoreTUID
            });
        }
    }
/*
    public void ResetUserStoreModel()
    {
        if(AddUpdateUserStoreRequestModels != null){
        // Clear the model
        AddUpdateUserStoreRequestModels!.Clear();

        // Add current store access
        foreach (var store in userStores!)
        {
            AddUpdateUserStoreRequestModels!.Add(new Data.Models.Users.AddUserToStoreRequest
            {
                USER_TUID = User!.TUID,
                STORE_TUID = store.TUID
            });
        }
        }
    }

    private async Task OnUpdateUserSubmit()
    {
        ResetUserStoreModel();
        await UpdateUser();
        await UpdateUserStores(User.TUID);
        // Optionally trigger event to refresh data
        await UpdateUsers.InvokeAsync();

        StateHasChanged();
    }

    private async Task UpdateUser()
    {

        if (UpdateUserModel != null)
        {
            var response = await UsersHttpClient.UpdateUserPublicInfo(User.TUID, UpdateUserModel);
        }

    }

    private async Task UpdateUserStores(int userTUID)
    {
        Console.WriteLine("In UpdateUserStores method in UpdateUserModal.razor");
        var storeTUIDs = AddUpdateUserStoreRequestModels.Select(store => store.STORE_TUID).ToList();
        foreach (var storeTUID in storeTUIDs)
        {
            Console.WriteLine(storeTUID);
        }

        var request = new UpdateAccessListRequest
        {
            USER_TUID = userTUID,
            STORE_TUIDS = storeTUIDs
        };

        Console.WriteLine("UpdateAccessListRequest object created, named request");
        Console.WriteLine(request);

        Console.WriteLine("await UsersHttpClient.UpdateAccessList(request);");

        var response = await UsersHttpClient.UpdateAccessList(request);
        Console.WriteLine("THE RESPONSE:");
        Console.WriteLine(response);

        Console.WriteLine("Finishing the UpdateUserStores(int userTUID) method in UpdateUserModal.razor");
    }
*/
/*
    private async Task InitUserStores(int userTUID)
    {
        await InitUserStoresAssigned(userTUID);
        await InitUsersStoresNotAssigned(userTUID);
    }

    private async Task InitUserStoresAssigned(int userTUID)
    {
        var response = await UsersHttpClient.GetStoreOfUserById(userTUID);

        Console.WriteLine("Dashboard handling response for stores assigned as:");
        Console.WriteLine(response);

        if (response != null)
        {
            Console.WriteLine("List of Names and TUIDs");
            foreach (var store in response)
            {
                Console.WriteLine($"Name: {store.NAME}, TUID: {store.TUID}");
            }

            userStores = response;
        }
        else
        {
            Console.WriteLine("Response was null.");
        }

        if (response != null)
        {
            userStores = response;
        }

        StateHasChanged();
    }

    private async Task InitUsersStoresNotAssigned(int userId)
    {
        var response = await UsersHttpClient.GetStoresNotForUser(userId);

        Console.WriteLine("Dashboard handling response for stores NOT assigned as:");
        Console.WriteLine(response);

        if (response != null)
        {
            foreach (var store in response)
            {
                Console.WriteLine($"Name: {store.NAME}, TUID: {store.TUID}");
            }

            notUserStores = response;
        }
        else
        {
            Console.WriteLine("Response was null.");
        }


        if (response != null)
        {
            notUserStores = response;
        }

        StateHasChanged();
    }
*/
    /* New */

private async Task OnSubmitFromModalBody()
{
    if (modalBodyRef != null)
    {
        await modalBodyRef.OnUpdateUserSubmit();
    }

    if (UsersHttpClient != null)
    {
        if (User != null && UpdateUserModel != null)
        {
            await UsersHttpClient.UpdateUserPublicInfo(User.TUID, UpdateUserModel);
        }
    }
        await UpdateUsers.InvokeAsync();

    ClearUpdateUserModel();
}


    private void ClearUpdateUserModel()
    {
        UpdateUserModel = new();
    }
}