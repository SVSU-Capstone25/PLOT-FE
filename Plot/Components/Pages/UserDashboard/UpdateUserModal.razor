@inject StoresHttpClient StoresHttpClient
@inject UsersHttpClient UsersHttpClient

<Modal class="modal-dialog modal-xl user-modal user-info-modal" SizeClass="modal-xl" @attributes="Attributes">
    <ModalHeader Title="Update User" />
    <EditForm Model="UpdateUserModel" OnValidSubmit="OnUpdateUserSubmit">
        <DataAnnotationsValidator />
        <AddUpdateUserModalBody AddUpdateUserModel="UpdateUserModel" userStores="userStores"
            notUserStores="notUserStores" @ref="modalBodyRef" />
        <ModalFooter OnCancelClick="ClearUpdateUserModel">
            <Button Variant="primary" TextAlignment="center" type="submit" data-bs-dismiss="modal">
                Submit
            </Button>
        </ModalFooter>
    </EditForm>

</Modal>

@code {

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    [SupplyParameterFromForm] private Data.Models.Users.UpdatePublicInfoUser? UpdateUserModel { get; set; }

    [Parameter] public required Data.Models.Users.UserDTO? User { get; set; }

    [Parameter] public required EventCallback UpdateUsers { get; set; }

    public AddUpdateUserModalBody? modalBodyRef;

    //public Data.Models.Users.UserDTO? UserById;

    public Data.Models.Users.UpdatePublicInfoUser? AddUpdateUserModel = new();

    public List<Data.Models.Stores.Store>? userStores = new();

    public List<Data.Models.Stores.Store>? notUserStores = new();

    public List<int> selectedNotUserStoreTUIDs = new();

    public List<int> selectedUserStoreTUIDs = new();

    protected override void OnInitialized()
    {
        UpdateUserModel ??= new Data.Models.Users.UpdatePublicInfoUser
        {
            FIRST_NAME = User!.FIRST_NAME,
            LAST_NAME = User!.LAST_NAME,
            EMAIL = User!.EMAIL,
            ROLE_NAME = User!.ROLE
        };

        //UserById = await UsersHttpClient.GetUserById(User!.TUID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await modalBodyRef!.InitUserStores(User!.TUID);
    }

    public async Task OnUpdateUserSubmit()
    {
        await modalBodyRef!.UpdateUser(User!.TUID);
        await modalBodyRef!.UpdateUserStores(User!.TUID);
        await UpdateUsers.InvokeAsync();

        ClearUpdateUserModel();
    }


    public void ClearUpdateUserModel()
    {
        modalBodyRef!.ClearAddUpdateUserModel(User!.TUID);

        StateHasChanged();
    }

}