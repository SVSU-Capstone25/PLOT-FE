@*
File Purpose:
Update User Modal for editing users. May edit first name,
last name, email, role, and store access.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Miller

*@

@inject StoresHttpClient StoresHttpClient
@inject UsersHttpClient UsersHttpClient
@inject IJSRuntime JS
@inject ToastService ToastService

@using Plot.Services

<Modal class="modal-dialog modal-xl user-modal user-info-modal" SizeClass="modal-xl" Backdrop="static" Keyboard="false"
    @attributes="Attributes">
    <ModalHeader Title="Update User" />

    <EditForm Model="UpdateUserModel" OnValidSubmit="() => OnUpdateUserSubmit()">
        <DataAnnotationsValidator />

        <AddUpdateUserModalBody AddUpdateUserModel="UpdateUserModel" AssignedStores="UpdateUserStores"
            UnassignedStores="NotUpdateUserStores" SignalParentAssignedStoresChanged="HandleUserStoresChange"
            SignalParentUnassignedStoresChanged="HandleNotUserStoresChange" OnInit="HandleBodyInit"
            DisableSubmitInParent="DisableSubmitFromChild" @ref="modalBodyRef" />

        <ModalFooter OnCancelClick="ClearUpdateUserModel">
            <Button Variant="primary" TextAlignment="center" type="submit" data-bs-dismiss="modal"
                disabled="@IsSubmitDisabled">
                Submit
            </Button>
        </ModalFooter>

    </EditForm>

</Modal>

@code {

    /// <summary>
    /// Attributes dictionary parameter
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    /// <summary>
    /// Model used for updating information on user first name, last name, email, and role in the database
    /// </summary>
    [SupplyParameterFromForm] private Data.Models.Users.UpdatePublicInfoUser? UpdateUserModel { get; set; }

    /// <summary>
    /// Model representing the user and data associated with the user
    /// </summary>
    [Parameter] public required Data.Models.Users.UserDTO? User { get; set; }

    /// <summary>
    /// Update Users callback for rerendering UserDashboard
    /// </summary>
    [Parameter] public required EventCallback UpdateUsers { get; set; }

    /// <summary>
    /// Reference for AddUpdateUserModalBody component
    /// </summary>
    public AddUpdateUserModalBody? modalBodyRef;

    /// <summary>
    /// Flags that the AddUpdateUserModalBody has been initialized
    /// </summary>
    private bool modalBodyInit = false;

    /// <summary>
    /// Determines if submit button is disabled
    /// </summary>
    private bool IsSubmitDisabled = false;

    /// <summary>
    /// Model for updating First Name, Last Name, Email, Role of User
    /// Used for sending data to database
    /// </summary>
    public Data.Models.Users.UpdatePublicInfoUser? AddUpdateUserModel = new();

    /// <summary>
    /// List of stores the user has access to
    /// </summary>
    public List<Data.Models.Stores.Store> UpdateUserStores = new();

    /// <summary>
    /// List of stores the user does not have access to
    /// </summary>
    public List<Data.Models.Stores.Store> NotUpdateUserStores = new();

    /// <summary>
    /// List of TUIDs the user selected in the select box for stores
    /// the user does not have
    /// </summary>
    public List<int> selectedNotUserStoreTUIDs = new();

    /// <summary>
    /// List of TUIDs the user selected in the select box for stores
    /// the user does have
    /// </summary>
    public List<int> selectedUserStoreTUIDs = new();

    /// <summary>
    /// Updates UpdateUserModel on initialization from User's data
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    protected override void OnInitialized()
    {

        UpdateUserModel ??= new Data.Models.Users.UpdatePublicInfoUser
        {
            FIRST_NAME = User!.FIRST_NAME,
            LAST_NAME = User!.LAST_NAME,
            EMAIL = User!.EMAIL,
            ROLE_NAME = User!.ROLE
        };

    }

    /// <summary>
    /// Initializes stores after render if the AddUpdateUserModalBody
    /// has been initialized and it hasn't already initialized stores
    /// </summary>
    /// <param name="firstRender"> Built-in parameter refers to whether render is the first render </param>
    /// <returns> void </returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!modalBodyInit)
        {
            if (modalBodyRef != null)
            {
                await modalBodyRef!.InitUserStores(User!.TUID);
                modalBodyInit = true;
            }
        }
    }

    /// <summary>
    /// For being called by the child component to signal
    /// that it has been initialized
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    public void HandleBodyInit()
    {

        if (modalBodyRef != null)
        {
            modalBodyRef.StateHasChangedFromParent();
        }

        StateHasChanged();
    }

    /// <summary>
    /// Runs when submitting form in modal
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    public async Task OnUpdateUserSubmit()
    {
        if (UpdateUserModel == null)
        {
            ToastService.ShowError("There was an error editing the user!");
            return;
        }

        // Update the user's info: first name, last name, email, role
        var response = await UsersHttpClient.UpdateUserPublicInfo(User!.TUID, UpdateUserModel);

        if (response != System.Net.HttpStatusCode.OK)
        {
            ToastService.ShowError("There was an error editing the user!");
        }
        else
        {
            ToastService.ShowSuccess("The user was edited.");

            // Update store access for user
            await UsersHttpClient.UpdateAccessList(new Data.Models.Users.UpdateAccessListRequest
            {
                USER_TUID = User!.TUID,
                STORE_TUIDS = UpdateUserStores.Select(store => store.TUID)
            });
        }

        // Update User Dashboard
        await UpdateUsers.InvokeAsync();

        // Clear Update User Model and Modal
        ClearUpdateUserModel();
    }

    /// <summary>
    /// Gives state change in the Update User Modal and the modal body
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    public void ClearUpdateUserModel()
    {
        if (modalBodyRef != null)
        {
            modalBodyRef.StateHasChangedFromParent();
        }

        StateHasChanged();
    }

    /// <summary>
    /// Handles change in user stores within modal
    /// </summary>
    /// <param name="NewUpdateUserStores"> List<Data.Models.Stores.Store> New list of models reflecting stores user has </param>
    /// <returns> void </returns>
    public void HandleUserStoresChange(List<Data.Models.Stores.Store> NewUpdateUserStores)
    {
        UpdateUserStores = NewUpdateUserStores;
    }

    /// <summary>
    /// Handles change in not user stores within modal
    /// </summary>
    /// <param name="NewNotUpdateUserStores"> List<Data.Models.Stores.Store> New list of models reflecting stores use does not have </param>
    /// <returns> void </returns>
    public void HandleNotUserStoresChange(List<Data.Models.Stores.Store> NewNotUpdateUserStores)
    {
        NotUpdateUserStores = NewNotUpdateUserStores;
    }

    /// <summary>
    /// Disables submit from child component - from AddUpdateUserModalBody.razor.
    /// Needed for when stores are moved between select boxes
    /// </summary>
    /// <param name=isDisabled""> Determines if is submit is disabled.</param>
    /// <returns> void </returns>
    public void DisableSubmitFromChild(bool isDisabled)
    {
        IsSubmitDisabled = isDisabled;
    }

}