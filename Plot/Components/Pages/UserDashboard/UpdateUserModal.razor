@inject UsersHttpClient UsersHttpClient
@inject StoresHttpClient StoresHttpClient
@using Data.Models.Users;
@using Data.Models.Stores;
@using System.Net;

<Modal class="modal-dialog modal-xl user-modal user-info-modal" SizeClass="modal-xl" @attributes="Attributes">
    <ModalHeader Title="Update User" />
    <EditForm Model="AddUpdateUserModel" OnValidSubmit="OnUpdateUserSubmit">
        <DataAnnotationsValidator />

@if (AddUpdateUserModel != null)
{
        <AddUpdateUserModalBody AddUpdateUserModel="AddUpdateUserModel"  userStores="userStores"
            notUserStores="notUserStores" User="User" @ref="modalBodyRef"/>
}
else
{
    <p>Model not initialized</p>
}
        <ModalFooter OnCancelClick="ClearUpdateUserModel">
            <Button Variant="primary" TextAlignment="center" type="submit" data-bs-dismiss="modal">
                Submit
            </Button>
        </ModalFooter>
    </EditForm>

</Modal>

@code {

    public AddUpdateUserModalBody? modalBodyRef;

    public Data.Models.Users.UpdatePublicInfoUser? AddUpdateUserModel = new()         {
            ROLE_NAME = "Owner"
        };

    [Parameter]
    public required Data.Models.Users.UserDTO? User { get; set; }

    [Parameter]
    public List<Data.Models.Users.AddUserToStoreRequest>? AddUpdateUserStoreRequestModels { get; set; }

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    [Parameter]
    public List<Data.Models.Stores.Store>? userStores { get; set; }

    [Parameter]
    public List<Data.Models.Stores.Store>? notUserStores { get; set; }

    public List<int> selectedNotUserStoreTUIDs { get; set; } = new();
    public List<int> selectedUserStoreTUIDs { get; set; } = new();

    [Parameter] public required EventCallback UpdateUsers { get; set; }


    public void SelectStoresForUser()
    {

        var storesToMove = notUserStores?.Where(store => selectedNotUserStoreTUIDs.Contains(store.TUID)).ToList();
        if (storesToMove == null) { Console.WriteLine("No stores to move"); return; }

        foreach (var store in storesToMove)
        {
            Console.WriteLine(store.NAME);
            userStores?.Add(store);
            notUserStores?.Remove(store);

        }
        selectedNotUserStoreTUIDs.Clear();

        StateHasChanged();
    }

    public void RemoveStoresFromUser()
    {
        var storesToMove = userStores?.Where(store => selectedUserStoreTUIDs.Contains(store.TUID)).ToList();
        if (storesToMove == null) return;

        foreach (var store in storesToMove)
        {
            notUserStores?.Add(store);
            userStores?.Remove(store);
        }

        selectedUserStoreTUIDs.Clear();

        StateHasChanged();

    }

    public void HandleSelectionFromUserStores(ChangeEventArgs e)
    {
        selectedUserStoreTUIDs = ExtractSelectedIds(e);
    }

    public void HandleSelectionFromNotUserStores(ChangeEventArgs e)
    {
        selectedNotUserStoreTUIDs = ExtractSelectedIds(e);
    }

    private List<int> ExtractSelectedIds(ChangeEventArgs e)
    {
        var selected = new List<int>();
        if (e.Value is IEnumerable<object> values)
        {
            foreach (var v in values)
            {
                if (int.TryParse(v?.ToString(), out var id))
                    selected.Add(id);
            }
        }
        return selected;
    }

    public async Task OnUpdateUserSubmit()
    {
        await UpdateUser();
        await UpdateUserStores(User!.TUID);
        // Optionally trigger event to refresh data
        await UpdateUsers.InvokeAsync();

        StateHasChanged();

        modalBodyRef.ResetUserStoreModel();
        
        modalBodyRef.ClearAddUpdateUserModel();
    }

    public async Task UpdateUser()
    {
        if (AddUpdateUserModel != null)
        {
            var response = await UsersHttpClient.UpdateUserPublicInfo(User!.TUID, AddUpdateUserModel!);
        }
    }

    public async Task UpdateUserStores(int userTUID)
    {
        Console.WriteLine("Updating stores for user of tuid " + userTUID);
        // Updates user store access
        var storeTUIDs = (AddUpdateUserStoreRequestModels ?? new List<AddUserToStoreRequest>())
        .Select(store => store.STORE_TUID)
        .ToList();

        foreach (var storeTUID in storeTUIDs)
        {
            Console.WriteLine(storeTUID);
        }

        var request = new UpdateAccessListRequest
        {
            USER_TUID = userTUID,
            STORE_TUIDS = storeTUIDs
        };

        var response = await UsersHttpClient.UpdateAccessList(request);

    }

    public async Task InitUserStores(int userTUID)
    {
        await InitUserStoresAssigned(userTUID);

        await InitUsersStoresNotAssigned(userTUID);
    }

    private async Task InitUserStoresAssigned(int userTUID)
    {
        if (userTUID == 0)
        {
            userStores = new List<Data.Models.Stores.Store>();
        }
        else
        {
            var response = await UsersHttpClient.GetStoreOfUserById(userTUID);

            if (response != null)
            {
                userStores = response.ToList();
            }


        }

        StateHasChanged();
    }

    private async Task InitUsersStoresNotAssigned(int userId)
    {
        if (userId != 0)
        {
            var response = await UsersHttpClient.GetStoresNotForUser(userId);

            //Console.WriteLine("Dashboard handling response for stores NOT assigned as:");
            //Console.WriteLine(response);

            if (response != null)
            {

                notUserStores = response.ToList();
            }


        }
        else
        {
            // New user - Fill available stores list
            notUserStores = await StoresHttpClient.GetListOfStores();
        }

        StateHasChanged();
    }

}