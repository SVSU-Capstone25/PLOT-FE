@inject UsersHttpClient UsersHttpClient
@inject StoresHttpClient StoresHttpClient
@inject IJSRuntime JS
@using Data.Models.Users
@using Microsoft.AspNetCore.Components.Authorization;

@*
Select-first-after-moving-task (commented out code used towards this)

This code is meant to select the first item in the select boxes, to avoid having it gray-highlight
a store in the select boxes and then not move it when the user clicks the button
But as is right now it doens't work.
Current solution is the paragraph says to use Ctrl-Click before pressing buttons.
And this will need to be included in training

Referenced in other comments in this file as: Select-first-after-moving-task

*@

<ModalBody>
    <label class="w-100 d-flex mt-2">
        <span class="mt-2 fw-bold">First Name</span>
        <InputText class="w-85 form-control ms-auto" type="Text" @bind-value="AddUpdateUserModel!.FIRST_NAME" />
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.FIRST_NAME) />
        </div>
    </label>
    <label class="w-100 d-flex my-2">
        <span class="mt-2 fw-bold">Last Name</span>
        <InputText class="w-85 form-control ms-auto" type="Text" @bind-value="AddUpdateUserModel!.LAST_NAME" />
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.LAST_NAME) />
        </div>
    </label>

    <label class="w-100 d-flex my-2">
        <span class="mt-2 fw-bold">Email</span>
        <InputText class="w-85 form-control ms-auto" type="Text" @bind-value="AddUpdateUserModel!.EMAIL" />
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.EMAIL) />
        </div>
    </label>

    <label class="w-100 d-flex my-2">
        <span class="mt-2 fw-bold">Role</span>
        <InputSelect class="w-85 form-select ms-auto" @bind-value="AddUpdateUserModel!.ROLE_NAME">
            <AuthorizeView Policy="Owner">
                <option value="Owner">Owner</option>
            </AuthorizeView>
            <option value="Manager">Manager</option>
            <option value="Employee">Employee</option>
        </InputSelect>
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.EMAIL) />
        </div>
    </label>

    <p id="StoreSelectHeader" class="fw-bold">Store Selection</p>

    <p>To select stores and move them use Ctrl-click to highlight stores before pressing the buttons</p>

    <div class="w-100 d-flex justify-content-around">
        <label class="w-25">
            Available Stores
            <select class="form-select mb-4 h-50 w-100" id="unassigned-stores" size="3" multiple
                @onchange="UnassignedStoresSelection">

                @foreach (var store in UnassignedStores!)
                {
                    <option value="@store.TUID">@store.NAME</option>
                }

            </select>
            <Button Variant="primary" TextAlignment="center" @onclick="SelectStoresForUser"
                disabled="@IsSelectButtonsDisabled">
                Select Store
            </Button>

        </label>

        <label class="w-25">
            Selected Stores
            <select class="form-select mb-4 h-50 w-100" id="assigned-stores" size="3" multiple
                @onchange="AssignedStoresSelection">

                @foreach (var store in AssignedStores!)
                {
                    <option value="@store.TUID">@store.NAME</option>
                }
            </select>
            <Button Variant="primary" TextAlignment="center" @onclick="RemoveStoresFromUser"
                disabled="@IsSelectButtonsDisabled">
                Remove Store
            </Button>
        </label>
    </div>

</ModalBody>

@* Select-first-after-moving-task *@
@*
<script>
    function selectFirstItem(selectElementId) {
        // Select the first item
        var selectElement = document.getElementById(selectElementId);
        for (var i = 0; i < selectElement.options.length; i++) {
            selectElement.options[i].selected = false;
        }
        if (selectElement && selectElement.options.length > 0) {
            selectElement.options[0].selected = true;
        }

        // Trigger the onchange event
        var event = new Event('change', { bubbles: true });
        selectElement.dispatchEvent(event);
    }
</script>
*@

@code {

    // Parameters
    [Parameter] public EventCallback OnInit { get; set; }

    [Parameter] public Data.Models.Users.UpdatePublicInfoUser? AddUpdateUserModel { get; set; }

    [Parameter] public List<Data.Models.Users.AddUserToStoreRequest>? AddUpdateUserStoreRequestModels { get; set; }

    // Stores Assigned or unassigned - Used for tracking assignment/unassignment in the modal before submit
    // and for submitting the data when submit is clicked
    [Parameter] public List<Data.Models.Stores.Store>? AssignedStores { get; set; }

    [Parameter] public List<Data.Models.Stores.Store>? UnassignedStores { get; set; }

    [Parameter] public required EventCallback UpdateUsers { get; set; }

    [Parameter] public EventCallback<List<Data.Models.Stores.Store>?> SignalParentAssignedStoresChanged { get; set; }

    [Parameter] public EventCallback<List<Data.Models.Stores.Store>?> SignalParentUnassignedStoresChanged { get; set; }

    // Parameter to disable submit button in parent modal
    // Needed briefly in case of moving stores between select boxes,
    // pressing submit too quickly after selecting stores can cause stores not to update
    [Parameter] public EventCallback<bool> DisableSubmitInParent { get; set; }

    private const int NEW_USER = 0; // Indicates new user when initializing stores

    private bool IsSelectButtonsDisabled = false; // For disabling select buttons --- Needed to ensure related
                                                  //data is updated

    // Prevents error where clicking the button does nothing due to it not having updated

    // Lists of store tuids representing stores currently selected in either "Available Stores"
    // or in "Selected Stores"
    public List<int> selectedUnassignedTUIDs { get; set; } = new();

    public List<int> selectedAssignedTUIDs { get; set; } = new();

    public void StateHasChangedFromParent()
    {
        // Signal StateHasChanged from parent
        StateHasChanged();
    }

    public async Task SelectStoresForUser()
    {
        // Stores selected in select box from "Available Stores" moved to "Selected Stores"
        // Stores selected from UnassignedStores are moved to AssignedStores

        // Disable submit button in parent component while stores are
        // moved between select boxes

        await DisableSubmitInParent.InvokeAsync(true);

        await Task.Delay(10); // Give onchange event for selection time to work

        var storesToMove = UnassignedStores?.Where(store => selectedUnassignedTUIDs.Contains(store.TUID)).ToList();
        if (storesToMove == null) { return; }

        foreach (var store in storesToMove)
        {
            AssignedStores?.Add(store);
            UnassignedStores?.Remove(store);
        }
        selectedUnassignedTUIDs.Clear();

        // TODO: See: Select-first-after-moving-task
        //await JS.InvokeVoidAsync("selectFirstItem", "unassigned-stores");
        StateHasChanged();

        // Signal parent component to update stores lists
        await SignalParentAssignedStoresChanged.InvokeAsync(AssignedStores);
        await SignalParentUnassignedStoresChanged.InvokeAsync(UnassignedStores);

        // Re-enable submit button in parent component
        await DisableSubmitInParent.InvokeAsync(false);

        StateHasChanged();
    }

    public async Task RemoveStoresFromUser()
    {
        Console.WriteLine("Remove store from user");
        // Disable submit button while stores are
        // moved between select boxes
        await DisableSubmitInParent.InvokeAsync(true);

        var storesToMove = AssignedStores?.Where(store => selectedAssignedTUIDs.Contains(store.TUID)).ToList();
        if (storesToMove == null) return;

        foreach (var store in storesToMove)
        {
            UnassignedStores?.Add(store);
            AssignedStores?.Remove(store);
        }

        selectedAssignedTUIDs.Clear();

        //TODO: See: Select-first-after-moving-task
        //await JS.InvokeVoidAsync("selectFirstItem", "assigned-stores");
        StateHasChanged();

        // Signal parent component to update stores lists
        await SignalParentAssignedStoresChanged.InvokeAsync(AssignedStores);
        await SignalParentUnassignedStoresChanged.InvokeAsync(UnassignedStores);

        // Re-enable submit button in parent component
        await DisableSubmitInParent.InvokeAsync(false);

        StateHasChanged();
    }

    // Methods handle selection of store TUIDs in select boxes
    public void AssignedStoresSelection(ChangeEventArgs e)
    { // Selected from list of assigned stores for potential removal
      // and placement in list of unassigned stores
        selectedAssignedTUIDs = ExtractSelectedIds(e);
        Console.WriteLine($"Selected Assigned Stores: {string.Join(", ", selectedAssignedTUIDs)}");

        StateHasChanged();
    }

    public void UnassignedStoresSelection(ChangeEventArgs e)
    {
        // Selected from list of unassigned stores for potential
        // selection adn placement in list of assigned stores
        selectedUnassignedTUIDs = ExtractSelectedIds(e);
        Console.WriteLine($"Selected Unassigned Stores: {string.Join(", ", selectedUnassignedTUIDs)}");

        StateHasChanged();
    }

    private List<int> ExtractSelectedIds(ChangeEventArgs e)
    {
        // Put selected options into list of store ids
        var selected = new List<int>();
        if (e.Value is IEnumerable<object> values)
        {
            foreach (var v in values)
            {
                if (int.TryParse(v?.ToString(), out var id))
                    selected.Add(id);
            }
        }
        return selected;
    }

    public async Task UpdateUser(int userTUID)
    {
        // Updates information for user including first name, last name, email, and role

        if (AddUpdateUserModel != null)
        {
            var response = await UsersHttpClient.UpdateUserPublicInfo(userTUID, AddUpdateUserModel!);
        }

        StateHasChanged();
    }

    public async Task InitUserStores(int userTUID)
    {
        // Initializes stores for user of TUID, userTUID

        await InitAssignedStores(userTUID);
        await InitUnassignedStores(userTUID);

        StateHasChanged();

        // Indicate to Parent component that initialization of stores is successful
        // and we know this component has been rendered
        await OnInit.InvokeAsync();
    }

    private async Task InitAssignedStores(int userTUID)
    {
        // Initialize assigned stores for select box in add user or update user modal

        AssignedStores!.Clear(); // Clear assigned stores list

        if (userTUID != NEW_USER)
        {
            // If the user is not new, get and add new stores
            // Get stores by user id
            var response = await UsersHttpClient.GetStoreOfUserById(userTUID);

            if (response != null)
            {
                AssignedStores!.AddRange(response); // Add stores to assigned stores
            }
        }
    }

    private async Task InitUnassignedStores(int userId)
    {
        // Initialize unassigned stores for select box in add user or update user modal

        UnassignedStores!.Clear(); // Clear unassigned stores list
        if (userId == NEW_USER)
        {
            // New user - Fill available stores list

            var response = await StoresHttpClient.GetListOfStores();
            if (response != null)
            {
                UnassignedStores!.AddRange(response);
            }
        }
        else
        {
            // Previously existing user

            // Get stores not for user of userId
            var response = await UsersHttpClient.GetStoresNotForUser(userId);

            if (response != null)
            {
                UnassignedStores.AddRange(response); // Add stores to unassigned stores
            }
        }
    }
}