@*
File Purpose:
Add Update User Modal Body

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

*@

@inject UsersHttpClient UsersHttpClient
@inject StoresHttpClient StoresHttpClient
@inject IJSRuntime JS
@using Data.Models.Users
@using Microsoft.AspNetCore.Components.Authorization;

<ModalBody>
    @* First Name field *@
    <label class="w-100 d-flex mt-2">
        <span class="mt-2 fw-bold">First Name</span>
        <InputText class="w-85 form-control ms-auto" type="Text" @bind-value="AddUpdateUserModel!.FIRST_NAME" />
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.FIRST_NAME) />
        </div>
    </label>
    @* Last Name field *@
    <label class="w-100 d-flex my-2">
        <span class="mt-2 fw-bold">Last Name</span>
        <InputText class="w-85 form-control ms-auto" type="Text" @bind-value="AddUpdateUserModel!.LAST_NAME" />
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.LAST_NAME) />
        </div>
    </label>

    @* Email field *@
    <label class="w-100 d-flex my-2">
        <span class="mt-2 fw-bold">Email</span>
        <InputText class="w-85 form-control ms-auto" type="Text" @bind-value="AddUpdateUserModel!.EMAIL" />
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.EMAIL) />
        </div>
    </label>

    @* Role select box *@
    <label class="w-100 d-flex my-2">
        <span class="mt-2 fw-bold">Role</span>
        <InputSelect class="w-85 form-select ms-auto" @bind-value="AddUpdateUserModel!.ROLE_NAME">
            <AuthorizeView Policy="Owner">
                <option value="Owner">Owner</option>
            </AuthorizeView>
            <option value="Manager">Manager</option>
            <option value="Employee">Employee</option>
        </InputSelect>
        <div class="text-danger">
            <ValidationMessage For=@(() => AddUpdateUserModel.EMAIL) />
        </div>
    </label>

    @* Store Access *@
    <p id="StoreSelectHeader" class="fw-bold">Store Selection</p>

    <p>To select stores and move them use Ctrl-click to highlight stores before pressing the buttons</p>

    <div class="w-100 d-flex justify-content-around">

        @* Stores the user does not have access to *@
        <label class="w-25">
            Available Stores
            <select class="form-select mb-4 h-50 w-100" id="unassigned-stores" size="3" multiple
                @onchange="UnassignedStoresSelection">

                @foreach (var store in UnassignedStores!)
                {
                    <option value="@store.TUID">@store.NAME</option>
                }

            </select>
            <Button Variant="primary" TextAlignment="center" @onclick="SelectStoresForUser"
                disabled="@IsSelectButtonsDisabled">
                Select Store
            </Button>

        </label>

        @* Stores the user has access to *@
        <label class="w-25">
            Selected Stores
            <select class="form-select mb-4 h-50 w-100" id="assigned-stores" size="3" multiple
                @onchange="AssignedStoresSelection">

                @foreach (var store in AssignedStores!)
                {
                    <option value="@store.TUID">@store.NAME</option>
                }
            </select>
            <Button Variant="primary" TextAlignment="center" @onclick="RemoveStoresFromUser"
                disabled="@IsSelectButtonsDisabled">
                Remove Store
            </Button>
        </label>
    </div>

</ModalBody>

@code {

    /// <summary>
    /// Event callback for use when this component initializes to signal parent components
    /// that it is initialized. Needed to consistently render stores
    /// </summary>
    [Parameter] public EventCallback OnInit { get; set; }

    /// <summary>
    /// Model used for updating information on user first name, last name, email, and role in the database
    /// Parameter supplied from parent component
    /// </summary>
    [Parameter] public Data.Models.Users.UpdatePublicInfoUser? AddUpdateUserModel { get; set; }

    /// <summary>
    /// Model used for adding and updating store access
    /// </summary>
    [Parameter] public List<Data.Models.Users.AddUserToStoreRequest>? AddUpdateUserStoreRequestModels { get; set; }

    /// <summary>
    /// List of stores the user has access to
    /// </summary>
    [Parameter] public List<Data.Models.Stores.Store>? AssignedStores { get; set; }

    /// <summary>
    /// List of stores the user does not have access to
    /// </summary>
    [Parameter] public List<Data.Models.Stores.Store>? UnassignedStores { get; set; }

    /// <summary>
    /// Update Users callback for rerendering UserDashboard
    /// </summary>
    [Parameter] public required EventCallback UpdateUsers { get; set; }

    /// <summary>
    /// Event callback to signal parent component that assigned stores have changed within modal
    /// </summary>
    [Parameter] public EventCallback<List<Data.Models.Stores.Store>?> SignalParentAssignedStoresChanged { get; set; }

    /// <summary>
    /// Event callback to signal parent component that unassigned stores have changed within modal
    /// </summary>
    [Parameter] public EventCallback<List<Data.Models.Stores.Store>?> SignalParentUnassignedStoresChanged { get; set; }

    /// <summary>
    /// Parameter to disable submit button in parent modal
    /// Needed briefly in case of moving stores between select boxes,
    /// pressing submit too quickly after selecting stores can cause stores not to update
    /// </summary>
    [Parameter] public EventCallback<bool> DisableSubmitInParent { get; set; }

    /// <summary>
    /// New User flag, used when initializing stores. 0 is chosen since no user to be displayed in the User Dashboard
    /// has a TUID of 0. It is specifically excluded due to being Root's TUID, and we never update Root, so it's
    /// safe to use as a flag for when a new user is being added
    /// </summary>
    private const int NEW_USER = 0;

    /// <summary>
    /// Flag for disabling select buttons. This is needed briefly (imperceptibly in tests) to prevent submit from
    /// being pressed before the models to update access have updated.
    /// </summary>
    private bool IsSelectButtonsDisabled = false;

    /// <summary>
    /// List of TUIDs the user selected in the select box for stores
    /// the user does not have
    /// </summary>
    public List<int> selectedUnassignedTUIDs { get; set; } = new();

    /// <summary>
    /// List of TUIDs the user selected in the select box for stores
    /// the user has
    /// </summary>
    public List<int> selectedAssignedTUIDs { get; set; } = new();

    /// <summary>
    /// Calls state has changed from parent to tell child component
    /// to change state. Added while resolving 
    /// inconsistent data display issues related to Blazor's
    /// rendering cycles
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    public void StateHasChangedFromParent()
    {
        // Signal StateHasChanged from parent
        StateHasChanged();
    }

    /// <summary>
    /// Stores selected in select box from "Available Stores" moved to "Selected Stores"
    /// Stores selected from UnassignedStores are moved to AssignedStores
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    public async Task SelectStoresForUser()
    {
        // Disable submit button in parent component while stores are
        // moved between select boxes
        await DisableSubmitInParent.InvokeAsync(true);

        // Give the onchange event time to work when selecting users
        await Task.Delay(10);

        // Stores being moved (assigned)
        var storesToMove = UnassignedStores?.Where(store => selectedUnassignedTUIDs.Contains(store.TUID)).ToList();
        if (storesToMove == null) { return; }

        // Add stores to assgined stores
        // Remove stores from unassigned stores
        // Clear selected Unassigned TUIDs
        foreach (var store in storesToMove)
        {
            AssignedStores?.Add(store);
            UnassignedStores?.Remove(store);
        }
        selectedUnassignedTUIDs.Clear();

        StateHasChanged();

        // Signal parent component to update stores lists
        await SignalParentAssignedStoresChanged.InvokeAsync(AssignedStores);
        await SignalParentUnassignedStoresChanged.InvokeAsync(UnassignedStores);

        // Re-enable submit button in parent component
        await DisableSubmitInParent.InvokeAsync(false);

        StateHasChanged();
    }

    /// <summary>
    /// Stores selected in select box from "Selected Stores" moved to "Available Stores"
    /// Stores selected from AssignedStores are moved to UnassignedStores
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    public async Task RemoveStoresFromUser()
    {
        // Disable submit button while stores are
        // moved between select boxes
        await DisableSubmitInParent.InvokeAsync(true);

        // Stores being moved (assigned)
        var storesToMove = AssignedStores?.Where(store => selectedAssignedTUIDs.Contains(store.TUID)).ToList();
        if (storesToMove == null) return;

        // Add stores to assgined stores
        // Remove stores from unassigned stores
        // Clear selected Unassigned TUIDs
        foreach (var store in storesToMove)
        {
            UnassignedStores?.Add(store);
            AssignedStores?.Remove(store);
        }
        selectedAssignedTUIDs.Clear();

        StateHasChanged();

        // Signal parent component to update stores lists
        await SignalParentAssignedStoresChanged.InvokeAsync(AssignedStores);
        await SignalParentUnassignedStoresChanged.InvokeAsync(UnassignedStores);

        // Re-enable submit button in parent component
        await DisableSubmitInParent.InvokeAsync(false);

        StateHasChanged();
    }

    /// <summary>
    /// Handle selection of assigned stores (stores in "Selected Stores select box")
    /// </summary>
    /// <param name="e"> Change Event Argument passed when new stores are selected </param>
    /// <returns> void </returns>
    public void AssignedStoresSelection(ChangeEventArgs e)
    { // Selected from list of assigned stores for potential removal
      // and placement in list of unassigned stores
        selectedAssignedTUIDs = ExtractSelectedIds(e);
        Console.WriteLine($"Selected Assigned Stores: {string.Join(", ", selectedAssignedTUIDs)}");

        StateHasChanged();
    }

    /// <summary>
    /// Handle selection of unassgined stores (stores in "Available Stores select box")
    /// </summary>
    /// <param name="e"> Change Event Argument passed when new stores are selected </param>
    /// <returns> void </returns>
    public void UnassignedStoresSelection(ChangeEventArgs e)
    {
        // Selected from list of unassigned stores for potential
        // selection adn placement in list of assigned stores
        selectedUnassignedTUIDs = ExtractSelectedIds(e);
        Console.WriteLine($"Selected Unassigned Stores: {string.Join(", ", selectedUnassignedTUIDs)}");

        StateHasChanged();
    }

    /// <summary>
    /// Handle selection of unassgined stores (stores in "Available Stores select box")
    /// </summary>
    /// <param name="e"> Change Event Argument passed when new stores are selected </param>
    /// <returns> List<int> </returns>
    private List<int> ExtractSelectedIds(ChangeEventArgs e)
    {
        // Put selected options into list of store ids
        var selected = new List<int>();
        if (e.Value is IEnumerable<object> values)
        {
            foreach (var v in values)
            {
                if (int.TryParse(v?.ToString(), out var id))
                    selected.Add(id);
            }
        }
        return selected;
    }

    /// <summary>
    /// Updates User of given userTUID for information including first name,
    /// last name, email, and role via call through backend to database
    /// </summary>
    /// <param name="userTUID"> TUID of user being updated </param>
    /// <returns> void </returns>
    public async Task UpdateUser(int userTUID)
    {
        if (AddUpdateUserModel != null)
        {
            var response = await UsersHttpClient.UpdateUserPublicInfo(userTUID, AddUpdateUserModel!);
        }

        StateHasChanged();
    }

    /// <summary>
    /// Initializes assigned stores and unassigned for user of given userTUID
    /// </summary>
    /// <param name="userTUID"> TUID of user being updated.
    /// NEW_USER=0 is used as a flag in case it is a new user </param>
    /// <returns> void </returns>
    public async Task InitUserStores(int userTUID)
    {
        // Initializes assigned and unassigned stores for user of TUID, userTUID

        await InitAssignedStores(userTUID);
        await InitUnassignedStores(userTUID);

        StateHasChanged();

        // Indicate to Parent component that initialization of stores is successful
        // and we know this component has been rendered
        await OnInit.InvokeAsync();
    }

    /// <summary>
    /// Initializes assigned stores for user of given userTUID
    /// </summary>
    /// <param name="userTUID"> TUID of user being updated.
    /// NEW_USER=0 is used as a flag in case it is a new user </param>
    /// <returns> void </returns>
    private async Task InitAssignedStores(int userTUID)
    {
        // Initialize assigned stores for select box in add user or update user modal

        AssignedStores!.Clear(); // Clear assigned stores list

        if (userTUID != NEW_USER)
        {
            // If the user is not new, get and add new stores
            // Get stores by user id
            var response = await UsersHttpClient.GetStoreOfUserById(userTUID);

            if (response != null)
            {
                AssignedStores!.AddRange(response); // Add stores to assigned stores
            }
        }
    }

    /// <summary>
    /// Initializes unassigned stores for user of given userTUID
    /// </summary>
    /// <param name="userTUID"> TUID of user being updated.
    /// NEW_USER=0 is used as a flag in case it is a new user </param>
    /// <returns> void </returns>
    private async Task InitUnassignedStores(int userId)
    {
        // Initialize unassigned stores for select box in add user or update user modal

        // Clear unassigned stores list
        UnassignedStores!.Clear();
        if (userId == NEW_USER)
        {
            // New user - all stores are unassigned - get full list of stores
            var response = await StoresHttpClient.GetListOfStores();
            if (response != null)
            {
                UnassignedStores!.AddRange(response);
            }
        }
        else
        {
            // Previously existing user

            // Get stores not for user of userId
            var response = await UsersHttpClient.GetStoresNotForUser(userId);

            if (response != null)
            {
                // Add stores to unassigned stores
                UnassignedStores.AddRange(response);
            }
        }
    }
}