@*
File Purpose:
User dashboard for managing, adding, editing, and deleting users.
Employee Name, Employee ID, And Role visible on dashboard.
Editing allows changes to name, role, and stores the user
can access.

Note:
Database is not hooked up yet, so a lot of functionality here
will be replaced with functionality that gets information from
the database.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author (Developed from skeleton): Andrew Miller (3/14/2025)
Note: A small amount of skeleton code was present before. 
No author was given.

*/

*@

@page "/user-dashboard"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using System;
@using System.Collections.Generic;
@using System.Net.Mail;

<div class="d-flex flex-column align-content-between user-dashboard">
    <div class="mb-4 table-set">
        @* Users Table *@
        <table class="table w-100">
            <tbody>
                <tr>
                    @* Headers *@
                    <td class="border border-light border-2 name_column">
                        <div>Employee Name</div>
                    </td>
                    <td class="border border-light border-2 id_column">
                        <div>Employee Id</div>
                    </td>
                    <td class="border border-light border-2 role_column">
                        <div>Role</div>
                    </td>
                </tr>

                @* A row for each user in the list of users *@
                @foreach (var user in users)
                {
                    <tr>
                        @* Name *@
                        <td class="border border-light border-2 name_column">
                            <span>@user.FirstName @user.LastName</span>
                        </td>

                        @* User Id *@
                        <td class="border border-light border-2 id_column">
                            <span>@DisplayId(user.Id)</span>
                        </td>

                        @* Role and Dropdown menu for editing or deleting the user *@
                        <td class="border border-light border-2 role_column">
                            @* Role of User*@
                            <span class="role-box float-start py-2 px-3">@user.Role</span>

                            @* Set selectedUser on click of dropdown menu *@
                            <div class="float-end" @onclick="(() => SetSelectedUser(user))">

                                @* Role Options Dropdown menu with id 
                            dynamically reflecting the id of the user
                            Provides Edit and Delete options which 
                            open Edit User and Delete User Modals *@

                                <Dropdown Id="@($"Dropdown-{user.Id}")" LabelText="Role">
                                    <DropdownLink Link="#UpdateUserModal" Icon="fa-solid fa-pen-to-square"
                                        data-bs-toggle="modal">Edit</DropdownLink>
                                    <DropdownLink Link="#DeleteUserModal" Icon="fa-regular fa-trash-can"
                                        data-bs-toggle="modal">Delete
                                    </DropdownLink>
                                </Dropdown>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="add-btn-container">
        <Button Class="Button add-btn" Icon="fa-solid fa-plus" Id="buttonAddUserDashboard" Variant="primary"
            TextAlignment="center" OnClickFunction="OpenAddUserModal">
            Add User
        </Button>
    </div>
</div>

@* Modals *@

@* User Info Modal (Add User or Edit User) *@

<Modal Title="@userModalDetails.Title" Id="UpdateUserModal" Variant="standard"
    Class="modal-dialog modal-xl user-modal user-info-modal" OnCancelFunction="CleanUpUpdateUser">
    <BodyContent>
        <form>

            <h3>@userModalDetails.Header</h3>
            <p>@userModalDetails.Description</p>

            <div>
                @* First Name *@
                <div class="holds-first-name">
                    <TextInput Id="UserFirstNameUser" Label="First Name" Type="Text" LabelOnTop=false
                        Value="@inEditUser.FirstName" ValueChanged="@ValidateFirstName" />

                    @* Error message *@
                    <p class="validation-message">@firstNameError</p>
                </div>

                @* Last Name *@
                <div class="holds-last-name">
                    <TextInput Id="UserLastNameUser" Label="Last Name" Type="Text" LabelOnTop=false
                        Value="@inEditUser.LastName" ValueChanged="@ValidateLastName" />

                    @* Error message *@
                    <p class="validation-message">@lastNameError</p>
                </div>

                @* Email *@
                <div class="holds-email">
                    <TextInput Id="UserEmail" Label="Email" Type="Text" LabelOnTop=false Value="@inEditUser.Email"
                        ValueChanged="@ValidateEmail" />

                    @* Error message *@
                    <p class="validation-message">@emailError</p>
                </div>

                @* Role and Store Select Options *@

                @* Role Select Option *@

                <OptionInput ID="UserRole" label="Role" optionsValues=userRoles optionsText=userRoles
                    OnSelectFunction="SetUserRole" Class="user-option-input user-option-role" />

                @* Store Selection *@

                <p id="StoreSelectHeader">Store Selection</p>

                <p>To select multiple stores use Ctrl-click</p>

                @* Available Stores *@
                <div id="UserStores" class="d-flex flex-row user-option-store">

                    <div class="user-option-store-half user-option-store-left">

                        <OptionInput ID="UserAvailStores" label="Available Stores"
                            optionsValues="@stores.Where(store => !inEditUser.Stores.Contains(store)).ToList()"
                            optionsText="@stores.Where(store => !inEditUser.Stores.Contains(store)).ToList()"
                            Class="user-option-input user-option-store" AllowEmpty Multiple />

                        <div class="btn-container">
                            <Button Class="Button" Id="buttonPickFromAvail" Variant="primary" TextAlignment="center"
                                OnClickFunction="PickFromAvail" IsDisabled="@isPickFromAvailDisabled"
                                Icon="fa-solid fa-arrow-right">
                                Select Store
                            </Button>
                        </div>

                    </div>

                    <div class="user-option-store-half user-option-store-right">
                        @* Selected Stores *@
                        <OptionInput ID="UserSelStores" label="Selected Stores" optionsValues=@inEditUser.Stores
                            optionsText=@inEditUser.Stores Class="user-option-input user-option-store" AllowEmpty
                            Multiple />

                        <div class="btn-container">
                            <Button Class="Button" Id="buttonUnpickFromSel" Variant="primary" TextAlignment="center"
                                OnClickFunction="UnpickFromSel" IsDisabled="@isUnpickFromSelDisabled"
                                Icon="fa-solid fa-arrow-left">
                                Remove Store
                            </Button>
                        </div>
                    </div>
                </div>
            </div>
        </form>

    </BodyContent>

    @* Footer: Cancel button included in Modal, Also adds Add User button *@
    <FooterContent>

        @* Add user button, Cancel button comes with Modal component *@

        <Button Class="Button" Id="buttonUpdateUserModal" Variant="primary" TextAlignment="center"
            OnClickFunction="UpdateUser" IsDisabled="@isUpdateUserDisabled">
            @userModalDetails.ButtonText
        </Button>
    </FooterContent>

</Modal>

@* Delete User Modal *@

<Modal Title="Confirm Deletion" Id="DeleteUserModal" Variant="danger" Class="modal-dialog w-100 h-100 user-modal"
    OnCancelFunction="CleanUpDelete">

    @* Confirm delete Question and Textbox *@
    <BodyContent>

        <h2>Are you SURE you want to delete this user?</h2>

        @* confirmDelete variable bound with the input text
        compared to check if delete button can be enabled
        with EnableDelete function every time the text changes *@

        <TextInput Id="deleteTextInput" Label="If so, type DELETE here" Type="Text" Placeholder="Type DELETE here"
            Value="@confirmDelete" ValueChanged="ValidateDelete" />

    </BodyContent>

    @* Button to confirm delete *@
    <FooterContent>

        @* Cancel button is provided with Modal custom component *@

        @* Delete user button deletes user
        Disabled unless DELETE is in the TextInput *@

        <Button Class="Button" Id="buttonConfirmDelete" Variant="primary" TextAlignment="center"
            OnClickFunction="DeleteUser" IsDisabled="@isDeleteDisabled">
            Yes, Delete
        </Button>

    </FooterContent>

</Modal>

<script>

    function OpenModal(modal_id) {
        /* Opens Modal of given Id */
        bootstrap.Modal.getOrCreateInstance(modal_id).show();
    }

    function HideModal(modal_id) {
        /* Hides modal with given modal id */

        // Hide modal
        document.getElementById(modal_id).classList.remove('show');

        // Remove backdrop - Twice needed to avoid it lingering
        document.querySelector('.modal-backdrop')?.remove();
        document.querySelector('.modal-backdrop')?.remove();
    }

    function SelectOption(id, option_value) {
        /* Selects value for option for select-option element of given id */
        let optionInput = document.getElementById(id);
        element = optionInput.getElementsByTagName("select")[0];
        element.value = option_value;
    }

    function SelectFirst(id) {
        /* Select first option in list */
        if (!IsEmptySelect(id)) {
            let optionInput = document.getElementById(id);
            let select = optionInput.getElementsByTagName("select")[0];
            let options = select.getElementsByTagName("option");

            select.value = options[0].value;
        }
    }

    function IsEmptySelect(id) {
        /* Is the select option box empty? */
        let optionInput = document.getElementById(id);
        let select = optionInput.getElementsByTagName("select");
        return (select[0].options.length == 0);
    }

    function GetSelectedOptions(id) {
        /* Get all options selected from select-option */
        let optionInput = document.getElementById(id);
        let select = optionInput.getElementsByTagName("select")[0];
        let options = select.getElementsByTagName("option");

        let selected_options = [];

        for (let option of options) {
            if (option.selected) {
                selected_options.push(option.value);
            }
        }

        return selected_options;
    }

    function UnhighlightStores() {
        /* Unhighlight and unselect stores from OptionInputs for stores*/

        let ids = ["UserAvailStores", "UserSelStores"];
        for (let id of ids) {
            let optionInput = document.getElementById(id);
            let select = optionInput.getElementsByTagName("select")[0];
            select.selectedIndex = -1; /* Unselects store */
        }
    }

</script>

@code {
    // User object for information in edit in update user modal
    // (add or edit)
    private User inEditUser = new User();

    // Unicode lit Declarations
    private List<int> hyphen_unicodes = new List<int>();

    private List<int> apostrophe_unicodes = new List<int>();

    private int space_unicode = 0x0020; /*Space unicode */

    // Holds details about modal (Id, Title, Header, Description,
    // Button Text)
    private ModalDetails userModalDetails = new ModalDetails();

    // Modal ids
    private int ADD_MODAL_DETAIL_ID = 0;
    private int EDIT_MODAL_DETAIL_ID = 1;

    // Headers for OptionInputs in Add user modal
    private string optionHeader = "Select an Option";

    // Is button to submit changes for updating user disabled in modal
    private bool isUpdateUserDisabled = false;

    // Error messages
    private string firstNameError = "";
    private string lastNameError = "";
    private string emailError = "";

    // Tracking validity of fields
    // For Add User modal
    private bool isFirstValid = true;
    private bool isLastValid = true;
    private bool isEmailValid = true;

    // These start as "Select an Option" and so are false
    private bool isRoleValid = false;
    private bool isStoreValid = false;

    // Roles
    // Basic roles list
    private List<string> roles = new List<string>();

    // Initialize list for values in add user roles
    // Roles added in OnInitialized method
    private List<string> userRoles = new List<string>();

    /* Declaration of lists of stores */

    // For list of store options from the database
    private List<string> stores = new List<string>();

    /* Handling Deletion */

    // Is delete button disabled?
    private bool isDeleteDisabled = true;

    // Deletion confirmation string, initialized as empty
    private string confirmDelete = "";

    // Constant used to confirm deletion
    private const string DELETE_CONFIRM = "DELETE";

    /* Handling User Data */

    // list of users in table
    private List<User> users = new List<User>();

    // User selected when clicking on a row
    private User selectedUser = new User();

    /* Controls whether pick from available (left side)
        and unpick from selected (right side)
        are enabled or disabled */
    private bool isPickFromAvailDisabled = false;
    private bool isUnpickFromSelDisabled = false;

    /* Program runs on initialization */
    protected override void OnInitialized()
    {
        /* Unicode initializations
           Given in unicode hexadecimal
           https://unicodelookup.com/#0x2010/1 <-- To do: Remove or
           or reposition for reference */

        // hyphen (‐), en dash (–), em dash (—), hyphen-minus (-)
        hyphen_unicodes.AddRange(new List<int>{0x2010, 0x2013, 0x2014, 0x2D});

        /* apostrophe( ' ), grave accent( ` ), accute accent( ´ ) */
        apostrophe_unicodes.AddRange(new List<int>{0x0027,0x0060,0x00B4});

        // Handling stores

        // Example stores - Replace with logic to handle
        // data from database after being hooked up
        stores = new List<string> { "Store 1", "Store 2", "Store 3", "Store 4",
            "Store 5", "Store 6", "Store 7", "Store 8","Store 9" };

        // Example data for demo
        users = new List<User>{
            new User {
            Id = 1,
            FirstName = "Clayton",
            LastName = "Cook",
            Email = "clayton@company.com",
            Role = "Owner",
            Stores = new List<string> { "Store 1", "Store 2", "Store 3" }

            },
            new User {
            Id = 2,
            FirstName = "Andrew",
            LastName = "Miller",
            Email = "andrew@company.com",
            Role = "Manager",
            Stores = new List<string> { "Store 4", "Store 5", "Store 6"}
            },
            new User {
            Id = 3, // Id increments for the next user
            FirstName = "Jane",
            LastName = "Smith",
            Email = "jane@company.com",
            Role = "Employee",
            Stores = new List<string> { "Store 7", "Store 8", "Store 9"}
            }
            };

        // Fill roles with owner, manager, and employee
        roles = new List<string>
                    {"Owner",
                    "Manager",
                    "Employee"};

        // Set user roles (empty OptionInputs give an error otherwise)
        userRoles = new List<string> { "Bug - Failed to fill" };
    }

    /* Display User Id */
    private string DisplayId(int? user_id)
    {
        return user_id.HasValue ? '#' + user_id.Value.ToString().PadLeft(10, '0') : "";
    }

    /* Opening Add User Modal */
    private async Task OpenAddUserModal()
    {
        // Clean update user modal of previous information
        await CleanUpUpdateUser();

        // Initialize roles or add user modal
        userRoles = new List<string> { optionHeader };
        userRoles.AddRange(roles);

        // Set selections back to header
        await JS.InvokeVoidAsync("SelectOption", "UserRole", optionHeader);

        // Reset validity flags to false (start as empty)
        isFirstValid = false;
        isLastValid = false;
        isEmailValid = false;

        // Reset validity flags for role and store to false
        isRoleValid = false;
        isStoreValid = false;

        isUpdateUserDisabled = true; // Add User modal starts unfilled so it will be disabled

        // Selection in Available stores defaults to first store
        await JS.InvokeVoidAsync("SelectFirst", "UserAvailStores");

        SetStoreBtnDisabled();

        userModalDetails = new ModalDetails()
        {
            Id = ADD_MODAL_DETAIL_ID,
            Title = "Add User",
            Header = "Create User",
            Description = "Add a new user to be added to the system",
            ButtonText = "Add User"
        };

        // Open add user modal
        await JS.InvokeVoidAsync("OpenModal", "#UpdateUserModal");
    }

    // Set selected user to user in row clicked upon
    private async Task SetSelectedUser(User user)
    {
        // User of row clicked is selected user
        selectedUser = user;

        // Initialize roles or add user modal
        userRoles = new List<string>();
        userRoles.AddRange(roles);

        userModalDetails = new ModalDetails
        {
            Id = EDIT_MODAL_DETAIL_ID,
            Title = "Edit User",
            Header = "Edit User",
            Description = "Edit the information of the selected user",
            ButtonText = "Update User"
        };

        // Copy stores from inEditUser
        List<string> stores_for_in_edit = new List<string>();
        stores_for_in_edit.AddRange(selectedUser.Stores);

        // Copy user info for editing in case "Edit" is clicked
        inEditUser = new User
        {
            Id = selectedUser.Id,
            FirstName = selectedUser.FirstName,
            LastName = selectedUser.LastName,
            Email = selectedUser.Email,
            Role = selectedUser.Role,
            Stores = stores_for_in_edit
        };

        // Set validity flags for editing
        // Reset validity flags to true
        isFirstValid = true;
        isLastValid = true;
        isEmailValid = true;
        isRoleValid = true;
        isStoreValid = true;

        SetStoreBtnDisabled(); // Set picking and unpicking buttons to enabled or disabled as appropriate

        isUpdateUserDisabled = false; // Initially not disabled

        // Select the edited user's role
        await JS.InvokeVoidAsync("SelectOption", "UserRole", inEditUser.Role);

        // Select first entry for available and selected store OptionInputs
        await JS.InvokeVoidAsync("SelectFirst", "UserAvailStores");
        await JS.InvokeVoidAsync("SelectFirst", "UserSelStores");

        StateHasChanged();
    }

    /* Handling Modal Buttons */

    // Update user

    private async Task UpdateUser()
    {
        if (userModalDetails.Id == ADD_MODAL_DETAIL_ID)
        {
            AddUser();
        }
        else if (userModalDetails.Id == EDIT_MODAL_DETAIL_ID)
        {
            SaveChanges();
        }

        // Hide add user modal
        await JS.InvokeVoidAsync("HideModal", "UpdateUserModal");

        // Clean up Update User Modal
        await CleanUpUpdateUser();

        StateHasChanged();
    }

    // Add new user
    private void AddUser()
    { // Adds new user and handles clean up from closing modal

        users.Add(
        new User
            {
                Id = users.Count + 1, // Id increments for the next user
                FirstName = inEditUser.FirstName,
                LastName = inEditUser.LastName,
                Email = inEditUser.Email,
                Role = inEditUser.Role,
                Stores = inEditUser.Stores
            }
        );

        // Reset user for adding new user
        inEditUser = new User();

        StateHasChanged();
    }

    // Save edited user as the selected user
    private void SaveChanges()
    {
        var index = users.FindIndex(u => u.Id == selectedUser.Id);
        users[index] = inEditUser;

        StateHasChanged(); // Table is updated to reflect changes
    }

    // Delete selected user
    private async Task DeleteUser()
    {
        // Get user and remove
        var index = users.FindIndex(u => u.Id == selectedUser.Id);
        users.RemoveAt(index);

        // Clean up Delete Modal
        CleanUpDelete();

        // Hide delete user modal
        await JS.InvokeVoidAsync("HideModal", "DeleteUserModal");

        StateHasChanged(); // Table is updated to reflected changes
    }

    /* Modal data and button-handling functions */

    // Enable or disable delete button
    private void ValidateDelete(string value)
    {
        // set confirmDelete variable to value
        confirmDelete = value;

        // Check if confirmDelete is equal to
        // Delete confirmation string
        if (confirmDelete.Equals(DELETE_CONFIRM))
        {
            // Set isDelete disabled to false
            isDeleteDisabled = false;
        }
        else
        {
            // Set isDelete disabled to true
            isDeleteDisabled = true;
        }

        StateHasChanged();
    }

    // Clear error message for variable
    // given by reference parameter
    private void ClearError(ref string errorMsg){ errorMsg = ""; }

    // Set update user button to disabled
    private void SetUpdateUserDisabled()
    {
        /* Depends on each field being valid for submission*/
        isUpdateUserDisabled = !(isFirstValid & isLastValid & isEmailValid & isRoleValid & isStoreValid);

        StateHasChanged();
    }

    private void SetStoreBtnDisabled()
    {
        isPickFromAvailDisabled = (stores.Count == inEditUser.Stores.Count);
        isUnpickFromSelDisabled = (inEditUser.Stores.Count == 0);
        isStoreValid = !isUnpickFromSelDisabled; // Some stores selected
    }

    // Set store for user being edited
    private async Task PickFromAvail()
    {
        List<string> stores_to_pick = await JS.InvokeAsync<List<string>>("GetSelectedOptions", "UserAvailStores");

        inEditUser.Stores.AddRange(stores_to_pick);
        inEditUser.Stores.Sort();

        SetStoreBtnDisabled();

        StateHasChanged();

        // Select first entry for available and selected store OptionInputs
        await JS.InvokeVoidAsync("SelectFirst", "UserAvailStores");
        await JS.InvokeVoidAsync("SelectFirst", "UserSelStores");

        // Set add button enabled or disabled
        SetUpdateUserDisabled();

        StateHasChanged();
    }

    private async Task UnpickFromSel() /* Unpick stores that were selected */
    {
        Console.WriteLine("unpicking");
        List<string> stores_to_remove = await JS.InvokeAsync<List<string>>("GetSelectedOptions", "UserSelStores");

        inEditUser.Stores.RemoveAll(store => stores_to_remove.Contains(store));
        inEditUser.Stores.Sort();

        SetStoreBtnDisabled(); /* Set if store button should be disabled */

        StateHasChanged();

        // Select first entry for available and selected store OptionInputs
        await JS.InvokeVoidAsync("SelectFirst", "UserAvailStores");
        await JS.InvokeVoidAsync("SelectFirst", "UserSelStores");

        // Set add button enabled or disabled
        SetUpdateUserDisabled();

        StateHasChanged();
    }

    // Set role for user being edited
    private void SetUserRole(string role)
    {
        if (role == optionHeader)
        {
            isRoleValid = false; // No role selected. Role invalid
        }
        else
        {
            isRoleValid = true; // Role selected role valid
            inEditUser.Role = role;
        }

        // Set add button enabled or disabled
        SetUpdateUserDisabled();
    }

    /* Modal Clean up methods */

    /* For Add User */
    private async Task CleanUpUpdateUser()
    {
        inEditUser = new User(); // Clear in edit User object

        // Selected User no longer selected
        selectedUser = new User();

        // Clean up error messages
        firstNameError = "";
        lastNameError = "";
        emailError = "";

        // Unhighlight stores
        await JS.InvokeVoidAsync("UnhighlightStores");

        StateHasChanged();
    }

    // Clean Up - Cleans up Delete User Modal
    private void CleanUpDelete()
    {
        selectedUser = new User(); // Selected User no longer selected
        confirmDelete = ""; // Delete textbox should now be empty
        isDeleteDisabled = false; // Delete enabled

        StateHasChanged();
    }

    /* Validation and Error-Display methods */

    // Produces Error message if a text field is not alphabetic
    private void ErrorInvalidChar(string textLocation, ref string errorMsg)
    {
        // textLocation: References textbox that has error message
        // First Name or Last Name
        // errorMsg: References bound variable to the error paragraph
        errorMsg = textLocation + " has invalid characters. Valid characters are letters, apostrophes, hyphens, and spaces.";
    }

    // Validates email characters - letters, digits, period, or @
    private bool ValidateEmailChar(char c) { 
        return (
        Char.IsLetterOrDigit(c) ||
        c == '.' ||
        c == '@' ||
        "!#$%&'*+-/=?^_`{|}~".Contains(c)
        );
    }

    // Is text present?
    private bool IsTextPresent(string text) { return (text.Length > 0); }

    // Validate character for validating names
    private bool ValidateNameChar(char character) {
        int unicode = character;

        return
        (hyphen_unicodes.Contains(unicode) ||       /* hyphens */
        unicode == space_unicode ||                 /* space */
        apostrophe_unicodes.Contains(unicode) ||    /* apostrophe */
        Char.IsLetter(character));                  /* letter */
    }

    private void ValidateName(string text, string textLocation,
    ref string errorMsg, ref bool isNameValid)
    {
        /* text: text from TextInput,
        textLocation: Refers to text location for use in error message i.e. "first name"
        or "last name"
        errorMsg: error message
        isNameValid: References flag for whether text field is valid
        */

        if (text.All(c => ValidateNameChar(c)))
        {
            ClearError(ref errorMsg); // Clear error message
            isNameValid = IsTextPresent(text); // Referenced flag for name validity
                                               // depends on if text is present
        }
        else
        { // All do not meet the requirements
            isNameValid = false; // Set referenced flag for name validity to false
            ErrorInvalidChar(textLocation, ref errorMsg);
        }
    }

    private void ValidateFirstName(string text)
    {
        inEditUser.FirstName = text; // Set first name parameter to text

        ValidateName(text, "First Name",
        ref firstNameError, ref isFirstValid);

        SetUpdateUserDisabled();
    }

    private void ValidateLastName(string text)
    {
        // Set last name to text
        inEditUser.LastName = text;

        ValidateName(text, "Last Name",
        ref lastNameError, ref isLastValid);

        SetUpdateUserDisabled();
    }

    private void ValidateEmail(string email)
    { /* Validate Email */
        /* Checks if email is properly formatted using 
           MailAddress class,
           Checks if email is unique
           Checks if text is present in the textbox
        */


        inEditUser.Email = email; /* Set inEditUser parameter to email text */

        /* Attempts to make a mail address object
        Will fail if the email address is not
        properly formatted */
        try
        {
            // If making MailAddress object succeeds, email
            // is properly formatted
            var addr = new MailAddress(email);

            // Email's characters and format is valid - Is the email unique?
            if ((users.FirstOrDefault(user => user.Email == email) != null) &&
            !(email == selectedUser.Email)) /* Email in users and not the email of the selected user*/
            {
                isEmailValid = false;
                emailError = "Email must be unique.";
            }
            else{
                emailError = ""; // Empty email validation message
                isEmailValid = IsTextPresent(email); // The isEmailValid flag depends on if text is present
            }
        }
        catch /* Failed - Email address not properly formatted */
        {
            isEmailValid = false;
            emailError = "Invalid email address format";
        }

        /* Check if button to update user (for add/edit) should be disabled */
        SetUpdateUserDisabled();

    }

    // User class
    public class User
    {
        public int? Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? Role { get; set; }
        public List<string> Stores { get; set; } = new List<string>();
    }

    // Details to markup Modal
    public class ModalDetails
    {
        public int? Id { get; set; }
        public string? Title { get; set; }
        public string? Header { get; set; }
        public string? Description { get; set; }
        public string? ButtonText { get; set; } // Text on submit button
    }

    // Debug Utilities
    private void printUsers(List<User> users)
    {
        // Output information on list of users to the console
        foreach (var user in users)
        {
            Console.WriteLine("ID: " + user.Id + "Name: " +
            user.FirstName + " " + user.LastName + " Email: " +
            user.Email + " Role: " + user.Role + " Stores:");
            foreach (var store in user.Stores)
            {
                Console.WriteLine(store);
            }
        }
    }
}