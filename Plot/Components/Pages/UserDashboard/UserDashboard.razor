@*
File Purpose:
User dashboard for managing, adding, editing, and deleting users.
Employee Name, Employee ID, And Role visible on dashboard.
Editing allows changes to name, role, and stores the user
can access.

Note:
Database is not hooked up yet, so a lot of functionality here
will be replaced with functionality that gets information from
the database.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author (Developed from skeleton): Andrew Miller (3/14/2025)
Note: A small amount of skeleton code was present before. 
No author was given.

*/

*@

@page "/user-dashboard"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject UsersHttpClient UsersHttpClient

@using System;
@using System.Collections.Generic;
@using System.Net.Mail;

<div class="d-flex flex-column align-content-between user-dashboard">
    <div class="mb-4 table-set">
        @* Users Table *@
        <table class="table w-100">
            <thead>
                <tr>
                    @* Headers *@
                    <th scope="col" class="border border-light border-2">
                        Employee Name
                    </th>
                    <th scope="col" class="border border-light border-2">
                        Employee ID
                    </th>
                    <th scope="col" class="border border-light border-2">
                        Role
                    </th>
                </tr>
            </thead>
            <tbody>
                @* A row for each user in the list of users *@
                @foreach (var user in users)
                {
                    <tr>
                        @* Name *@
                        <td class="border border-light border-2">
                            @user.FIRST_NAME @user.LAST_NAME
                        </td>

                        @* User Id *@
                        <td class="border border-light border-2">
                            @user.TUID
                        </td>

                        @* Role and Dropdown menu for editing or deleting the user *@
                        <td class="border border-light border-2">
                            <div class="d-flex flex-row">
                                @* Role of User*@
                                <span class="flex-grow-1 align-self-center">@user.ROLE</span>

                                @* Role Options Dropdown menu with id  dynamically reflecting the id of the user Provides Edit and Delete options which open Edit User and Delete User Modals *@

                                <Dropdown Id="@($"Dropdown-{user.TUID}")" LabelText="Role">
                                    <DropdownLink Icon="fa-solid fa-pen-to-square" data-bs-toggle="modal"
                                        data-bs-target="@($"#update-user-modal-{user.TUID}")">Edit</DropdownLink>
                                    <DropdownLink Icon="fa-regular fa-trash-can" data-bs-toggle="modal"
                                        data-bs-target="@($"#delete-user-modal-{user.TUID}")">
                                        Delete
                                    </DropdownLink>
                                </Dropdown>
                            </div>
                        </td>

                        <UpdateUserModal id="@($"update-user-modal-{user.TUID}")" User="user" UpdateUsers="UpdateUsers" />
                        <DeleteUserModal id="@($"delete-user-modal-{user.TUID}")" userTuid="user.TUID"
                            UpdateUsers="UpdateUsers" />
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <AddUserModal id="@($"add-user-modal")" UpdateUsers="UpdateUsers" AddingUser="ToggleLoader" />

    <div class="add-btn-container">
        <Button Class="Button add-btn" Icon="fa-solid fa-plus" Id="buttonAddUserDashboard" Variant="primary"
            data-bs-toggle="modal" data-bs-target="@($"#add-user-modal")" TextAlignment="center">
            Add User
        </Button>
    </div>
</div>

@if (isAddingUser)
{
    <div class="w-100 h-100 d-flex justify-content-center align-items-center top-0 start-0 position-absolute"
        style="background-color: rgba(0,0,0,.5);">
        <Loader class="p-5 rounded shadow-lg d-flex flex-column align-items-center" style="background-color: white;">
            Adding User...
        </Loader>
    </div>

}


@code {
    private List<Data.Models.Users.UserDTO> users = new List<Data.Models.Users.UserDTO>();
    private bool isAddingUser = false;

    private async Task UpdateUsers()
    {
        var response = await UsersHttpClient.GetAllUsers();

        if (response != null)
        {
            users = response;
        }
    }

    private void ToggleLoader(bool isAdding)
    {
        isAddingUser = isAdding;
    }


    protected override async Task OnInitializedAsync()
    {
        await UpdateUsers();
    }
}