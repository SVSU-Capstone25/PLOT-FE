@* Danielle Smith - 4/2/2025 *@
@page "/password-reset"
@using Plot.Data.Models.Auth.ResetPassword

@inject NavigationManager Navigation
@inject AuthHttpClient AuthHttpClient

<PageTitle>Password Reset</PageTitle>

<body class="background">
    <div class="passwordReset">
        <div class="body-content">
            <img src="img/PlatoLogo.png" alt="Plato's closet logo">
            <h4>Password reset</h4>
            <p>Enter your new password below to change your password. Enter it again to confirm it.</p>
            <label>
                New Password:
                <InputText id="newPassword" type="password" @bind-Value="newPassword" Class="masked" />
            </label>
            <label>
                Confirm Password:
                <InputText id="newPassword" type="password" @bind-Value="confirmPassword" Class="masked" />
            </label>
            @if (!passwordsMatch)
            {
                <p style="color: red; font-weight: bold;">Passwords do not match</p>
            }
            <div class="button-container">
                <Button Class="Button" Id="btnResetPassword" Variant="primary" OnClickFunction="ResetPassword"
                    IsDisabled=false TextAlignment="center">
                    Reset Password
                </Button>
            </div>
        </div>
    </div>
</body>

@code
{
    // define the variables for the password and password confirmation
    string newPassword = "";
    string confirmPassword = "";
    bool passwordsMatch = true;

    private async void ResetPassword()
    {
        // reset passwords match to true in case this is another attempt
        passwordsMatch = true;

        
        if (newPassword == confirmPassword)
        {
            var passwordResetToken = "";

            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
            {
                passwordResetToken = token;
            }

            if (string.IsNullOrEmpty(passwordResetToken))
            {
                Navigation.NavigateTo("/login", forceLoad: true);
            }

            ResetPassword resetPasswordModel = new ResetPassword()
            {
                NewPassword = newPassword,
                Token = passwordResetToken ?? "",
            };

            await AuthHttpClient.ResetPassword(resetPasswordModel);



            // this is where the http request will call the backend route
            // that calls the database to update the user to update the password
            // then they will be redirected to the login page to log in with the new password
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        else
        {
            // if the passwords didn't match, make this false so that an invalid error displays
            passwordsMatch = false;
        }

    }
}