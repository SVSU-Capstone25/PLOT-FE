@* Danielle Smith - 4/2/2025
    Filename: PasswordReset.razor
    Part of Project: PLOT/PLOT-FE/Components/Pages/PasswordReset

    File Purpose:
    This file contains a the Password reset page implementation
    to reset a users password.

    
    Updated-Michael Polhill
 *@

@page "/password-reset"
@using Plot.Data.Models.Auth.ResetPassword
@using Microsoft.AspNetCore.Authorization
@using Plot.Services
@attribute [AllowAnonymous]
@inject NavigationManager Navigation
@inject AuthHttpClient AuthHttpClient
@inject JwtService JwtService

@layout Plot.Components.Layout.LoginLayout

<PageTitle>Password Reset</PageTitle>

<body class="background">
    <div class="bg-white p-5 rounded-2">
        <EditForm class="d-flex flex-column gap-3" Model="ConfirmPasswordResetModel"
            OnValidSubmit="ResetPassword">
            <DataAnnotationsValidator />
            <img src="img/PlatoLogo.png" alt="Plato's closet logo">
            <h4>Password reset</h4>
            <p>Enter your new password below to change your password.</p>
            <p>Enter it again to confirm it.</p>
            <div class="input-group">
                <label class="form-label w-100">
                    New Password:
                    <InputText class="form-control" id="newPassword" type="password" 
                        @bind-Value="ConfirmPasswordResetModel!.NewPassword" />
                </label>
                <div class="invalid-feedback d-block">
                    <ValidationMessage For="() => ConfirmPasswordResetModel!.NewPassword" />
                </div>
            </div>
            <div class="input-group">
                <label class="form-label w-100">
                    Confirm Password:
                    <InputText class="form-control" id="confirmPassword" type="password" 
                        @bind-Value="ConfirmPasswordResetModel!.ConfirmPassword" />
                </label>
                <div class="invalid-feedback d-block">
                    <ValidationMessage For="() => ConfirmPasswordResetModel!.ConfirmPassword" />
                </div>
            </div>
                <div class="text-danger" style="min-height: 1.5rem;">
                    @if (!passwordsMatch)
                    {
                        <p class="text-danger">Passwords do not match</p>
                    }
                </div>
            
            <Button Variant="primary" TextAlignment="center" type="submit">
                Reset Password
            </Button>
        </EditForm>
    </div>
</body>


@code
{
    // Get the token from the query string in the url
    [Parameter]
    [SupplyParameterFromQuery]
    public string? token { get; set; }

    //Models for the password reset and confirm password reset
    private Data.Models.Auth.ResetPassword.ResetPassword? PasswordResetModel { get; set; }
    private Data.Models.Auth.ResetPassword.ConfirmResetPassword? ConfirmPasswordResetModel { get; set; }


    // define the variables for the password and password confirmation
    bool passwordsMatch = true;

    /// <summary>
    /// This method is called when the component is initialized. 
    /// It sets up the models for the password reset and confirm password reset.
    /// </summary>
     protected override void OnInitialized()
    {
        PasswordResetModel ??= new();
        ConfirmPasswordResetModel ??= new();

        if (token!=null)
        {
            //Validate the token and get the claims from the token
            var claims=JwtService.ValidatePasswordResetToken(token);

            if(claims ==null)
            {   //Navigate to login if claims is null
                Navigation.NavigateTo("/login", forceLoad: true);
            }else
            {
                PasswordResetModel.Token=token;
            }
            
        }
    }
    
    /// <summary>
    /// This method is called when the form is submitted. It checks if the passwords match and if they do, 
    /// it calls the ResetPassword method.
    /// </summary>
    private async void ResetPassword()
    {
        // Reset passwords match to true in case this is another attempt
        passwordsMatch = true;

        // Check if the model is null and if the passwords match
        if(PasswordResetModel!=null && ConfirmPasswordResetModel!=null)
        {
            if (ConfirmPasswordResetModel.NewPassword == ConfirmPasswordResetModel.ConfirmPassword)
            {
                PasswordResetModel.NewPassword=ConfirmPasswordResetModel.NewPassword;
                
                // this is where the http request will call the backend route
                // that calls the database to update the user to update the password
                await AuthHttpClient.ResetPassword(PasswordResetModel);

                
                // then they will be redirected to the login page to log in with the new password
                Navigation.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                // if the passwords didn't match, make this false so that an invalid error displays
                passwordsMatch = false;
            }
        }
    }   
}
