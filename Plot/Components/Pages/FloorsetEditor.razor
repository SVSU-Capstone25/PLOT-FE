@page "/floorset-editor"

@inject IJSRuntime JS
@using Plot.Components.PartialComponents.SlideOut


<!-- Grid Area -->
<div class="wrapper" width="500px" height="500px">
    <div class="main-content">
        <div class="grid">
            @for (int i = 0; i < 50; i++)
            {
                @for (int j = 0; j < 50; j++)
                {
                    <div class="grid-cell" id="cell-@i-@j"></div>
                }
            }
        </div>
    </div>
</div>

<SlideOut Id="FloorsetSlideOut">
    <p>
        text
    </p>

    <Button Icon="fa-solid fa-print" Variant="primary" isDisabled="false" TextAlignment="left" 
            OnClickFunction="openPrint">
        Print Layout
    </Button>
</SlideOut>

<!-- Print Modal -->
<!-- Tristan Calay -->
<Modal Title="Print Layout" Id="printModal" Class="modal-dialog">
    <BodyContent>
        <h6 style="opacity: 0.5;">Select print options for how you would like your printed document to be formatted.</h6>
        <img style="width: 100%;" src="/img/printpreviewexample.png">

        <div style="display: flex; flex-direction: row;">
            <style>
                .optionInput
                {
                    flex: 1;
                }
            </style>
            <OptionInput ID="printerInput" Class="optionInput" label="Select a Printer"
                    optionsText="@(new List<String> { "Printer1", "Printer2" })" optionsValues="@(new List<String> { "1", "2" })" />
        
            <OptionInput ID="pageInput" Class="optionInput" label="Page Size"
                        optionsText="@(new List<String> { "8.5x11", "A4" })" optionsValues="@(new List<String> { "standard", "a4" })" />
        </div>
        
        <hr>
        <Checkbox id="checkWithAllocations" Text="With Allocations" />
        <Checkbox id="checkWithNotes" Text="With Notes" />
    </BodyContent>

    <FooterContent>
        <Button Variant="primary" isDisabled="false" OnClickFunction="printLayout" >
            Print
        </Button>
    </FooterContent>
</Modal>

<script>
    function OpenPrintModal() {
        /* Tristan Calay - 3/17/2025
        Technique from sales data import modal - find print modal, and open it.*/
        bootstrap.Modal.getOrCreateInstance('#printModal').show();
    }

    function HidePrintModal() {
        /* Tristan Calay - 3/17/2025
        Technique from sales data import modal - find print modal, and hide it.*/
        //TODO: Find correct function to close modal! .hide() .close() .dismiss() do not actually hide modal.
        bootstrap.Modal.getOrCreateInstance('#printModal').hide();
    }
</script>

@code 
{
    //openPrint Task
    //Asynchronous task to find and open the print modal on the page.
    //Called by the "Print Layout" button in the sidebar component.
    private async Task openPrint(){
        Console.WriteLine("Showing Print Layout Modal...");
        await JS.InvokeVoidAsync("OpenPrintModal");
    } 

    //printLayout Task
    //Asynchronously prints the current grid layout from specified printer and options.
    //Called by the "Print" button in the print modal.
    private async Task printLayout(){
        Console.WriteLine("Print Layout Func...");
        Console.WriteLine("Hiding Print Modal...");
        await JS.InvokeVoidAsync("HidePrintModal");
    }
}
