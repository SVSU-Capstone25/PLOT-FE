<!--
File Purpose:
User dashboard for managing, adding, editing, and deleting users.

Note: Current design aimed primarily to be appropriate for demoing.
Database is not hooked up yet, so a lot of functionality here
will be replaced with functionality that gets information from
the database.

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author (Developed from skeleton): Andrew Miller (3/14/2025)
Note: A small amount of skeleton code was present before. 
No author was given.

-->

@page "/users"
@inject IJSRuntime JS
@using Plot.Components.PartialComponents.Button
@using Plot.Components.PartialComponents.Modal
@using Plot.Components.PartialComponents.Dropdown
@using Plot.Components.PartialComponents.FileInput
@using Plot.Components.PartialComponents.TextInput

<div class="container mt-4">

    <!-- Users Table -->
    <table class="table w-100">
    <tbody>
        <tr>
            <!-- Headers -->
            <td class="border border-light border-2">Employee Name</td>
            <td class="border border-light border-2">Employee Number</td>
            <td class="border border-light border-2">Role</td>
        </tr>

        <!-- A row for each user in the list of users -->
        <!-- ToDo Post-demo: Change this so this loads from the database -->
        @foreach (var user in users)
        {
            <tr>
                <!-- Name -->
                <td class="border border-light border-2">@user.FirstName @user.LastName</td>

                <!-- User Id -->
                <td class="border border-light border-2">@DisplayId(user.Id)</td>

                <!-- Role and Dropdown menu for editing or deleting the user -->
                <td class="border border-light border-2">
                    <div>
                        <div class="d-flex justify-content-between">

                            <!-- Role of User-->
                            <p>@user.Role</p>

                            <!-- Set selectedUser on click of dropdown menu -->
                            <div @onclick="(() => setUser(user))">

                                <!-- Role Options Dropdown menu with id 
                                dynamically reflecting the id of the user
                                Provides Edit and Delete options which 
                                open Edit User and Delete User Modals -->
                                <Dropdown
                                    Id="@($"Dropdown-{user.Id}")"
                                    DropdownText="@(new List<string> { "Edit", "Delete" })"
                                    DropdownLinks="@(new List<string> { "#EditUserModal",
                                    "#DeleteUserModal" })"
                                    LabelText="Role"
                                    DropdownIcons="@(new List<string> 
                                    { "fa-solid fa-pen-to-square",
                                    "fa-regular fa-trash-can" })"
                                />
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
    </table>

    <!--Add User Button -->
    <div class="text-end align-items-end mt-5 w-50">
    <div class="w-25">
    <Button Class="Button mt-5" Id="buttonAddUserDashboard" Variant="primary" 
    TextAlignment="center" OnClickFunction="OpenAddUserModal">
    + Add User
    </Button>
    </div>
    </div>

    <!-- Modals -->

    <!-- Add User Modal -->

    <Modal Title="Add User" Id="AddUserModal"
    Variant="standard" Class="modal-dialog w-100 h-100">
        <BodyContent>
            <h3>Create User</h3>
            <p>Add a new user to be added to the system.</p>

            <!-- First Name -->
            <TextInput Id="FirstNameAdd" Label="First Name"
            Type="Text" Class="w-100"
            @bind-Value="@userToAdd.FirstName" />

            <!-- Last Name -->
            <TextInput Id="LastNameAdd" Label="Last Name"
            Type="Text" Class="w-100"
            @bind-Value="@userToAdd.LastName" />

            <!-- Email -->
            <TextInput Id="EmailAdd" Label="Email"
            Type="Text" Class="w-100"
            @bind-Value="@userToAdd.Email" />

            <!-- Role and Store Select Options -->

            <!-- Role Select Option -->
            <div class="my-2">
                <p class="fw-bold">Role</p>

                <select class="form-select" id="RoleAdd"
                @onchange="setAddedRole">

                    <option selected>Select an Option</option>
                    <option value="Owner">Owner</option>
                    <option value="Manager">Manager</option>
                    <option value="Employee">Employee</option>

                </select>
            </div>

            <!-- Store Select Option -->
            <div class="my-2">
                <p class="fw-bold">Store</p>

                <select class="form-select" id="StoreAdd"
                @onchange="setAddedStore">

                    <option selected>Select an Option</option>

                    <!-- List of stores -->
                    @foreach (var store in stores){
                        <option value="@store">@store</option>
                    }
                </select>
            </div>

        </BodyContent>

        <!-- Footer: Cancel button included in Modal, Also adds Add User button -->
        <FooterContent>

        <!-- Add user button, Cancel button comes with Modal component -->

        <Button Class="Button" Id="buttonAddUserModal" Variant="primary" 
        TextAlignment="center" OnClickFunction="AddUser">
        Add User
        </Button>

        </FooterContent>

    </Modal>

<!-- Edit User Modal -->

<Modal Title="Edit User" Id="EditUserModal"
Variant="standard" Class="modal-dialog w-100 h-100">
<!-- ToDo: Post-Demo, fields should be populated by the database-->

    <BodyContent>
        <h3>Edit User</h3>
        <p>Edit user information</p>

        <!--To do post-demo: populate Placeholders with names from database-->

        <!-- First Name -->
        <TextInput Id="FirstNameEdit" Label="First Name"
        Type="Text"
        @bind-Value="@editedUserInfo.FirstName" />

        <!-- Last Name -->
        <TextInput Id="LastNameEdit" Label="Last Name"
        Type="Text"
        @bind-Value="@editedUserInfo.LastName" />

        <!-- Email -->
        <TextInput Id="EmailEdit" Label="Email"
        Type="Text" Class="w-100"
        @bind-Value="@editedUserInfo.Email" />

        <!-- Role and Store Select Options -->

        <!-- Role Select Option -->
        <div class="my-2">
            <p class="fw-bold">Role</p>
            <select class="form-select" id="RoleEdit" 
            @onchange="setEditedRole">
                <option selected>Select an Option</option>
                    <option value="Owner">Owner</option>
                    <option value="Manager">Manager</option>
                    <option value="Employee">Employee</option>

            </select>
        </div>

        <!-- Store Select Option -->
        <div class="my-2">
            <p class="fw-bold">Store</p>
            <select class="my-2 form-select" id="StoreEdit" 
            @onchange="setEditedStore">
            <!-- Sets store of user on save-->
                
                <option selected>Select an Option</option>

                <!-- List of stores -->
                @foreach (var store in stores){
                    <option value="@store">@store</option>
                }
            </select>
        </div>

    </BodyContent>

    <FooterContent>
        
        <!-- Save changes button, Cancel button comes with Modal component
             Changes saved with SaveChanges method -->

        <Button Class="Button" Id="buttonEditUser" Variant="primary" 
        TextAlignment="center" OnClickFunction="SaveChanges">
        Save Changes
        </Button>

    </FooterContent>

</Modal>

<!-- Delete User Modal -->

<Modal Title="Confirm Deletion" Id="DeleteUserModal"
Variant="standard" Class="modal-dialog w-100 h-100">

    <!-- Confirm delete Question and Textbox -->
    <BodyContent>

        <h2>Are you SURE you want to delete this user?</h2>

        <!-- confirmDelete variable bound with the input text
        compared to check if delete button can be enabled
        with EnableDelete function every time the text changes -->
        <TextInput Id="deleteTextInput" Label="If so, type DELETE here"
        Type="Text" Placeholder="Type DELETE here"
        Value="@confirmDelete" ValueChanged="EnableDelete" />

    </BodyContent>

    <!-- Button to confirm delete -->
    <FooterContent>

        <!-- Cancel button is provided with Modal custom component -->

        <!-- Delete user button deletes user
        Disabled unless DELETE is in the TextInput -->

        <Button Class="Button" Id="buttonConfirmDelete" Variant="primary" 
        TextAlignment="center" OnClickFunction="DeleteUser"
        IsDisabled="@isDeleteDisabled">
        Yes, Delete
        </Button>
     
    </FooterContent>

</Modal>

</div>

<script>

    function OpenModal(modal_id){
        /* Opens Modal of given Id */

        bootstrap.Modal.getOrCreateInstance(modal_id).show();
    }

    function HideModal(modal_id) {
        /* Hides user with given modal id */

        // Hide modal
        document.getElementById(modal_id).classList.remove('show');

        // Remove backdrop
        document.querySelector('.modal-backdrop')?.remove();
        document.querySelector('.modal-backdrop')?.remove();
    }  

</script>

@code{

    /*On initialization*/
    protected override void OnInitialized()
    { 

        // Example data for demo
        users = new List<User>
        {
            new User {  Id = nextUserId++,  // Id increments for the next user
                        FirstName = "Clayton",
                        LastName = "Cook",
                        Email = "clayton@company.com",
                        Role = "Owner",
                        Store = stores[0]
            },
            new User {  Id = nextUserId++, // Id increments for the next user
                        FirstName = "Andrew",
                        LastName = "Miller",
                        Email = "andrew@company.com",
                        Role = "Manager",
                        Store = stores[1]
            },
            new User {  Id = nextUserId++, // Id increments for the next user
                        FirstName = "Jane",
                        LastName = "Smith",
                        Email = "jane@company.com",
                        Role = "Employee",
                        Store = stores[2]
            }
        };
    }

    /* Display User Id */
    private string DisplayId(int user_id){
        return '#' + user_id.ToString().PadLeft(10,'0');
    }

    /* Opening Add User Modal */
    private async Task OpenAddUserModal(){
        // Open modal of given id
        await JS.InvokeVoidAsync("OpenModal","#AddUserModal");
    }

    /* Handling Roles */

    // List of roles
    private List<string> roles = new List<string>{"Owner", "Manager", "Employee"};

    // Set for role
    // When adding role
    private void setAddedRole(ChangeEventArgs e){
        userToAdd.Role = e.Value.ToString();
    }

    // When editing role
    
    private void setEditedRole(ChangeEventArgs e){
        editedUserInfo.Role = e.Value.ToString();
    }

    /* Handling Store Information */

    // Placeholder list of stores
    private List<string> stores = new List<string> 
    { "Store 1", "Store 2", "Store 3"};

    // Set for store
    // When adding user
    private void setAddedStore(ChangeEventArgs e){
        userToAdd.Store = e.Value.ToString();
    }

    // When editing user
    private void setEditedStore(ChangeEventArgs e){
        editedUserInfo.Store = e.Value.ToString();
    }

    /* Handling Deletion */

    // Is delete button disabled?
    private bool isDeleteDisabled = true;

    // Deletion confirmation string, initialized as empty
    private string confirmDelete = "";

    // Constant used to confirm deletion
    private const string DELETE_CONFIRM = "DELETE"; 

    /* Handling User Data */

    // list of users in table
    private List<User> users = new List<User>();

    // User selected when clicking on a row
    private User selectedUser = new User();

    // User potentially added
    private User userToAdd = new User();

    // User object has potential edits of selectedUser
    private User editedUserInfo = new User();

    // Id of next user if another is added initialized at 1
    private int nextUserId = 1;

    // Set selected user to user in row clicked upon
    private void setUser(User user){
        // User of row clicked is selected user
        selectedUser = user;

        // Copy user info for editing in case "Edit" is clicked
        editedUserInfo = new User{
            Id = selectedUser.Id,
            FirstName = selectedUser.FirstName,
            LastName = selectedUser.LastName,
            Email = selectedUser.Email,
            Role = selectedUser.Role,
            Store = selectedUser.Store
        };
    }

    // Add new user
    private async Task AddUser()
    {
        printUsers(new List<User>{userToAdd});

        users.Add(
            new User
            {
                Id = nextUserId++,          // Id increments for the next user
                FirstName = userToAdd.FirstName,
                LastName = userToAdd.LastName,
                Email = userToAdd.Email,
                Role = userToAdd.Role,
                Store = userToAdd.Store
            }
        );

        // Reset user for adding new user
        userToAdd = new User();
        printUsers(users);

        // Hide add user modal
        await JS.InvokeVoidAsync("HideModal","AddUserModal");
    }

    // Save edited user as the selected user
    private async Task SaveChanges()
    {
        var index = users.FindIndex(u => u.Id == selectedUser.Id);
        users[index] = editedUserInfo;

        StateHasChanged(); // Table is updated to reflect changes

        // Hide edit user modal
        await JS.InvokeVoidAsync("HideModal","EditUserModal");
    }

    // Enable delete button
    private void EnableDelete(string value){
        // set confirmDelete variable to value
        confirmDelete = value;

        // Check if confirmDelete is equal to
        // Delete confirmation string
        if(confirmDelete.Equals(DELETE_CONFIRM)){

            // Set isDelete disabled to false
            isDeleteDisabled = false;
        }
        else{

            // Set isDelete disabled to true
            isDeleteDisabled = true;
        }

        StateHasChanged();
    }

    // Delete selected user
    private async Task DeleteUser() {
        // Get user and remove
        var index = users.FindIndex(u => u.Id == selectedUser.Id);
        users.RemoveAt(index);

        // Hide delete user modal
        await JS.InvokeVoidAsync("HideModal","DeleteUserModal");

        StateHasChanged(); // Table is updated to reflected changes

    }

    // User class
    public class User {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
        public string Store { get; set; }
    }

    // Debug Utilities
        private void printUsers(List<User> users){

            // Output information on list of users to the console
        foreach(var user in users){
            Console.WriteLine("ID: " + user.Id + "Name: " + 
            user.FirstName + " " + user.LastName + " Email: " + 
            user.Email + " Role: " + user.Role + " Store: " + user.Store);
        }
    }
}

