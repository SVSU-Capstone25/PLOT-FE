<!--
Program Purpose:
User dashboard for managing, adding, editing, and deleting users.

Note: Some skeleton code was present before. No author was given.
Author (Developed from skeleton): Andrew Miller (3/14/2025)
-->

@page "/users"
@inject IJSRuntime JSRuntime

<div class="container mt-4">

    <!-- Users Table -->
    <tbody>
    @foreach (var user in users)
    {
        <tr>
            <td class="border border-light border-2">@user.FirstName @user.LastName</td>
            <td class="border border-light border-2">#@user.Id</td>
            <td class="border border-light border-2">
                <div>
                    <div>@user.Role</div>
                    <div class="d-flex justify-content-between" @onclick="setUser(@user)"> <!-- Set selectedUser to user -->
                        <Dropdown
                        Id="Dropdown@user.Id"
                        DropdownText="@(new List<string> { "Edit", "Delete" })"
                        DropdownLinks="@(new List<string> { "#EditUserModal", "#DeleteUserModal" })"
                        LabelText="Role"
                        DropdownIcons="@(new List<string> { "fa-solid fa-pen-to-square", "fa-regular fa-trash-can" })"
                         />
                    </div>
                </div>
            </td>
        </tr>
    }
</tbody>

    <!--Add User Button -->
    <button class="btn btn-primary text-white" data-bs-toggle="modal" data-bs-target="#AddUserModal">
        + Add User
    </button>

    <!-- Modals -->

    <!-- Add User Modal -->

    <Modal Title="Add User" Id="AddUserModal" Variant="success" Class="standard modal-dialog">
    <BodyContent>
        <h1>Create User</h1>
        <p>Add a new user to be added to the system.</p>
        <TextInput Id="FirstNameAdd" Label="First Name" Placeholder="First Name" Value=@userToAdd.FirstName/>
        <TextInput Id="LastNameAdd" Label="LastName" Placeholder="Last Name" Value=@userToAdd.LastName/>
        <TextInput Id="EmailAdd" Label="Email" Placeholder="Email" Value=@userToAdd.Email/>
        
        <!-- Role and Store Select Options -->

        <!-- Role Select Option -->
        <select class="form-select" id="RoleAdd" onChange="setAddedRole">
            <option selected>Select an Option</option>

            <option value="Owner">Owner</option>
            <option value="Manager">Manager</option>
            <option value="Employee">Employee</option>
        </select>

        <!-- Store Select Option -->
        <select class="form-select" id="StoreAdd" onChange="setAddedStore">
            <option selected>Select an Option</option>

            <!-- List of stores -->
            @foreach (var store in stores){

                <option value=@store>@store</option>

            }
        </select>

        <img src="/img/platos_closet_logo.png">
    </BodyContent>
    <FooterContent>
        <Button Class=" Button" Id="buttonAddUser" Variant="primary"
            TextAlignment="center" OnClickFunction="AddUser">
            Yes, Delete
        </Button> 
    </FooterContent>

    </Modal>

<!-- Edit User Modal -->

<Modal Title="Edit User" Id="EditUserModal" Variant="success" Class="standard modal-dialog">

    <BodyContent>
        <h1>Edit User</h1>
        <p>Edit user information</p>
        <TextInput Id="FirstNameEdit" Label="First Name" Placeholder="@selectedUser.FirstName" Value="@editedUserInfo.FirstName" />
        <TextInput Id="LastNameEdit" Label="LastName" Placeholder="@selectedUser.LastName" Value="@editedUserInfo.LastName" />
        <TextInput Id="EmailEdit" Label="Email" Placeholder="@selectedUser.Email" Value="@editedUserInfo.Email" />
        
        <!-- Role and Store Select Options -->

        <!-- Role Select Option -->
        <select class="form-select" id="RoleEdit" @onChange="SetEditedRole"> <!-- Sets user Role -->
            <option selected>@selectedUser.Role</option>
            <option value="OwnerEdit">Owner</option>
            <option value="ManagerEdit">Manager</option>
            <option value="EmployeeEdit">Employee</option>
        </select>

        <!-- Store Select Option -->
        <select class="form-select" id="StoreEdit" @onChange="SetEditedStore">
            <option selected>@selectedUser.Store</option>

            <!-- List of stores -->
            @foreach (var store in stores){

                <option value="@store">@store</option>

            }
        </select>

        <img src="/img/platos_closet_logo.png">
    </BodyContent>
    <FooterContent>
        <Button Class="Button" Id="buttonEditUser" Variant="primary"
            TextAlignment="center" OnClickFunction="SaveChanges()"> <!-- Saves changes to selected user-->
            Save Changes
        </Button> 
    </FooterContent>

</Modal>

<!-- Delete User Modal -->

<Modal Title="Confirm Deletion" Id="DeleteUserModal" Variant="danger" Icon="fa-solid fa-check" Class="standard modal-dialog">

    <BodyContent>
        <h1>Are you SURE you want to delete this user?</h1>
        <TextInput Id="deleteTextInput" Label="If so, type DELETE here" Placeholder="Type DELETE here" />

    </BodyContent>

    <!-- Button to confirm delete -->
    <FooterContent>

        <Button Class=" Button" Id="buttonConfirmDelete" Variant="primary"
            TextAlignment="center" OnClickFunction="DeleteUser()">
            Yes, Delete
        </Button>        
    </FooterContent>

</Modal>

    @code{
        private List<User> users = new List<User>(); // list of users in table
        private User selectedUser = null; // User selected when clicking on a row
        private User userToAdd = null;
        private User editedUserInfo = null;

        private string UNEDITED = "";

        // Set
        private string editedRole = UNEDITED;
        private string editedStore = UNEDITED;
        private int nextUserId = 1;

        private String OWNER_ROLE = "owner";
        private String MANAGER_ROLE = "manager";
        private String EMPLOYEE_ROLE = "employee";

        // Placeholder list of stores
        private List<string> stores = new List<string> { "Store 1", "Store 2", "Store 3"};
 
        protected override void OnInitialized(){
            // Example data for demo
            users = new List<User>
            {
                new User {  Id = nextUserId++,
                            FirstName = "Clayton",
                            LastName = "Cook",
                            Email = "clayton@company.com",
                            Role = "Owner",
                            Store = stores[0]
                },
                new User {  Id = nextUserId++,
                            FirstName = "John",
                            LastName = "Doe",
                            Email = "john@company.com",
                            Role = "Manager",
                            Store = stores[1]
                },
                new User {  Id = nextUserId++,
                            FirstName = "Jane",
                            LastName = "Smith",
                            Email = "jane@company.com",
                            Role = "Employee",
                            Store = stores[2]
                }
            };
        }

        // Get user by id
        /* private User getUser(int userId){
            return users.First(u => u.Id == userId);
        } */

        // Set user to selected user
        private void setUser(User user){
            selectedUser = user;
        }

        // Set added store
        private void setAddedStore(ChangeEventArgs e){
            userToAdd.Store = e.Value.ToString();
        }

        // Set edited role
        private void setEditedRole(ChangeEventArgs e){
            private string newEdit = e.Value.ToString();
            if(newEdit != UNEDITED) { editedUserInfo.Role = e.Value.ToString(); }

            editedUserInfo.Role = e.Value.ToString();
        }

        private void setAddedStore(ChangeEventArgs e){
            userToAdd.Store = e.Value.ToString();
        }

        private void setEditedStore(ChangeEventArgs e){
            private string newEdit = e.Value.ToString();
            if(newEdit != UNEDITED) { editedUserInfo.Store = e.Value.ToString(); }
        }

        // Add new user
        private void AddUser()
        {
            users.Add(
                new User
                {
                    Id = nextUserId++, // Id increments for the next user
                    FirstName = firstNameAdd,
                    LastName = lastNameAdd,
                    Email = emailAdd,
                    Role = roleAdd,
                    Store = storeAdd
                };
            );
        }

        // Save edited user as the selected user
        private void SaveChanges()
        {
            selectedUser = editedUserInfo;
        }

        // Delete selected user
        private void DeleteUser() {
            users.Remove(selectedUser);
        }

        // User class
        public class User {
            public int Id { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string Email { get; set; }
            public string Role { get; set; }
            public string Store { get; set; }
        }

    }


</div>
