<!--
Program Purpose:
User dashboard for managing, adding, editing, and deleting users.

Note: Some skeleton code was present before. No author was given.
Author (Developed from skeleton): Andrew Miller (3/14/2025)
-->

@page "/users"
@using Plot.Components.PartialComponents.Button
@using Plot.Components.PartialComponents.Modal
@using Plot.Components.PartialComponents.Dropdown
@using Plot.Components.PartialComponents.FileInput
@using Plot.Components.PartialComponents.TextInput

<div class="container mt-4">

    <!-- Users Table -->
    <table class="table w-100">
    <tbody>
        <tr>
            <td class="border border-light border-2">Employee Name</td>
            <td class="border border-light border-2">Employee Number</td>
            <td class="border border-light border-2">Role</td>
        </tr>
        @foreach (var user in users)
        {
            <tr>
                <td class="border border-light border-2">@user.FirstName @user.LastName</td>
                <td class="border border-light border-2">@user.Id</td>
                <td class="border border-light border-2">
                    <div>
                        <div class="d-flex justify-content-between">
                            <p>@user.Role</p>

                            <!-- Set user on click -->
                            <div @onclick="(() => setUser(user))"> <!-- Sets selectedUser variable to user for row clicked on -->

                                <!-- Role Options Dropdown menu with id dynamically reflecting the id of the user
                                Provides Edit and Delete options which open Edit User and Delete User Modals -->
                                <Dropdown
                                    Id="@($"Dropdown-{user.Id}")"
                                    DropdownText="@(new List<string> { "Edit", "Delete" })"
                                    DropdownLinks="@(new List<string> { "#EditUserModal", "#DeleteUserModal" })"
                                    LabelText="Role"
                                    DropdownIcons="@(new List<string> { "fa-solid fa-pen-to-square", "fa-regular fa-trash-can" })"
                                />
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

    <!--Add User Button -->
    <button class="btn btn-primary text-white" data-bs-toggle="modal" data-bs-target="#AddUserModal">
        + Add User
    </button>

    <!-- Modals -->

    <!-- Add User Modal -->

    <Modal Title="Add User" Id="AddUserModal" Variant="success" Class="modal-dialog">
        <BodyContent>
            <h1>Create User</h1>
            <p>Add a new user to be added to the system.</p>

            <!-- First Name -->
            <TextInput Id="FirstNameAdd" Label="First Name" Placeholder="First Name" Value="@userToAdd.FirstName"/>

            <!-- Last Name -->
            <TextInput Id="LastNameAdd" Label="LastName" Placeholder="Last Name" Value="@userToAdd.LastName"/>

            <!-- Email -->
            <TextInput Id="EmailAdd" Label="Email" Placeholder="Email" Value="@userToAdd.Email"/>
            
            <!-- Role and Store Select Options -->

            <!-- Role Select Option -->
            <select class="form-select" id="RoleAdd" @onchange="setAddedRole">
                <option selected>Select an Option</option>

                <option value="Owner">Owner</option>
                <option value="Manager">Manager</option>
                <option value="Employee">Employee</option>
            </select>

            <!-- Store Select Option -->
            <select class="form-select" id="StoreAdd" @onchange="setAddedStore">
                <option selected>Select an Option</option>

                <!-- List of stores -->
                @foreach (var store in stores){

                    <option value="@store">@store</option>

                }
            </select>

        </BodyContent>

        <!-- Footer: Cancel button included in Modal, Also adds Add User button -->
        <FooterContent>

            <!-- Add user button, Cancel button comes with Modal component -->

            <Button Class=" Button" Id="buttonAddUser" Variant="primary"
                TextAlignment="center" OnClickFunction="AddUser">
                Add User
            </Button> 

        </FooterContent>

    </Modal>

<!-- Edit User Modal -->

<Modal Title="Edit User" Id="EditUserModal" Variant="success" Class="modal-dialog">

    <BodyContent>
        <h1>Edit User</h1>
        <p>Edit user information</p>

        <!--To do post-demo: populate Placeholders with names from database-->

        <!-- First Name -->
        <TextInput Id="FirstNameEdit" Label="First Name" Value="@editedUserInfo.FirstName" />

        <!-- Last Name -->
        <TextInput Id="LastNameEdit" Label="LastName" Value="@editedUserInfo.LastName" />

        <!-- Email -->
        <TextInput Id="EmailEdit" Label="Email" Value="@editedUserInfo.Email" />
        
        <!-- Role and Store Select Options -->

        <!-- Role Select Option -->
        <select class="form-select" id="RoleEdit" @onchange="setEditedRole"> <!-- Sets user role -->
            <option selected>@selectedUser.Role</option>
            <option value="Owner">Owner</option>
            <option value="Manager">Manager</option>
            <option value="Employee">Employee</option>
        </select>

        <!-- Store Select Option -->
        <select class="form-select" id="StoreEdit" @onchange="setEditedStore"> <!-- Sets store of user-->
            <option selected>@selectedUser.Store</option>

            <!-- List of stores -->
            @foreach (var store in stores){

                <option value="@store">@store</option>

            }
        </select>

        <img src="/img/platos_closet_logo.png">
    </BodyContent>


    <FooterContent>
        
        <!-- Save changes button, Cancel button comces with Modal component-->

        <Button Class="Button" Id="buttonEditUser" Variant="primary"
            TextAlignment="center" OnClickFunction="SaveChanges"> <!-- Saves changes to selected user-->
            Save Changes
        </Button> 
    </FooterContent>

</Modal>

<!-- Delete User Modal -->

<Modal Title="Confirm Deletion" Id="DeleteUserModal" Variant="danger" Icon="fa-solid fa-check" Class="modal-dialog">

    <BodyContent>
        <h1>Are you SURE you want to delete this user?</h1>
        <TextInput Id="deleteTextInput" Label="If so, type DELETE here" Placeholder="Type DELETE here" />

    </BodyContent>

    <!-- Button to confirm delete -->
    <FooterContent>

        <Button Class=" Button" Id="buttonConfirmDelete" Variant="primary"
            TextAlignment="center" OnClickFunction="DeleteUser">
            Yes, Delete
        </Button>        
    </FooterContent>

</Modal>

</div>

    @code{
        private List<User> users = new List<User>(); // list of users in table
        private User selectedUser = new User {
                                    Id = -1,
                                    FirstName = "None",
                                    LastName = "None",
                                    Email = "None",
                                    Role = "None",
                                    Store = "None"
                                    }; // User selected when clicking on a row

        private User userToAdd = new User {
                                    Id = -1,
                                    FirstName = "",
                                    LastName = "",
                                    Email = "",
                                    Role = "",
                                    Store = ""
                                    };

        private User editedUserInfo = new User {
                                    Id = -1,
                                    FirstName = "None",
                                    LastName = "None",
                                    Email = "None",
                                    Role = UNEDITED,
                                    Store = UNEDITED
                                    };

        // Unedited string
        private static string UNEDITED = "NOT EDITED";

        // The role or store as it is edited
        private static string editedRole = UNEDITED;
        private static string editedStore = UNEDITED;
        private int nextUserId = 1;

        private static string OWNER_ROLE = "owner";
        private static string MANAGER_ROLE = "manager";
        private static string EMPLOYEE_ROLE = "employee";

        // Placeholder list of stores
        private List<string> stores = new List<string> { "Store 1", "Store 2", "Store 3"};
 
        protected override void OnInitialized(){

            // Example data for demo
            users = new List<User>
            {
                new User {  Id = nextUserId++,  // Id increments for the next user
                            FirstName = "Clayton",
                            LastName = "Cook",
                            Email = "clayton@company.com",
                            Role = "Owner",
                            Store = stores[0]
                },
                new User {  Id = nextUserId++, // Id increments for the next user
                            FirstName = "John",
                            LastName = "Doe",
                            Email = "john@company.com",
                            Role = "Manager",
                            Store = stores[1]
                },
                new User {  Id = nextUserId++, // Id increments for the next user
                            FirstName = "Jane",
                            LastName = "Smith",
                            Email = "jane@company.com",
                            Role = "Employee",
                            Store = stores[2]
                }
            };
        }

        // Set selected user to user in row clicked upon
        private void setUser(User user){
            selectedUser = user;
        }

        // Set for role
        // When adding role
        private void setAddedRole(ChangeEventArgs e){
            userToAdd.Role = e.Value.ToString();
        }

        // When editing role
        private void setEditedRole(ChangeEventArgs e){
            string newEdit = e.Value.ToString();
            if(newEdit != UNEDITED) {
                editedUserInfo.Role = e.Value.ToString();
            }

        }

        // Set for store
        // When adding user
        private void setAddedStore(ChangeEventArgs e){
            userToAdd.Store = e.Value.ToString();
        }

        // When editing user
        private void setEditedStore(ChangeEventArgs e){
            string newEdit = e.Value.ToString();
            if(newEdit != UNEDITED) {
                editedUserInfo.Store = e.Value.ToString();
            }
        }

        // Add new user
        private void AddUser()
        {
            users.Add(
                new User
                {
                    Id = nextUserId++,          // Id increments for the next user
                    FirstName = userToAdd.FirstName,
                    LastName = userToAdd.LastName,
                    Email = userToAdd.Email,
                    Role = userToAdd.Role,
                    Store = userToAdd.Store
                }
            );


            // Reset user for adding new user
            userToAdd = new User {
                                    Id = -1,
                                    FirstName = "",
                                    LastName = "",
                                    Email = "",
                                    Role = "",
                                    Store = ""
                                    };

        }

        // Save edited user as the selected user
        private void SaveChanges()
        {
            selectedUser = editedUserInfo;
        }

        // Delete selected user
        private void DeleteUser() {
            users.Remove(selectedUser);
        }

        // User class
        public class User {
            public int Id { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string Email { get; set; }
            public string Role { get; set; }
            public string Store { get; set; }
        }

    }

