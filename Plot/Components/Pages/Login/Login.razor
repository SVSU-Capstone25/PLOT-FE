@* Originally by Luke Wollenweber *@

@page "/login"
@using System.Net.Http.Headers
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


<PageTitle>Login</PageTitle>

<body class="background">
    <div class="login">
        <form class="body-content" onsubmit="@OnLoginSubmit">
            <img src="img/PlatoLogo.png" alt="Plato's closet logo">
            <h4>Welcome to PLOT, </h4>
            <h4>Plato's Layout Optimization Tool</h4>
            <p>Please log in to your account to continue</p>
            @* Danielle Smith - 3/16/2025
                gave better ids and added some margin on the forgot password link *@
            <TextInput Id="email" Type="email" Label="Email" Placeholder="" Value="@email"
                ValueChanged="@(e => email = e)" Required="true" />
            <TextInput Id="password" Type="password" Label="Password" Placeholder="" Value="@password"
                ValueChanged="@(e => password = e)" Class="masked" Required="true" />
            <Link Id="link" Class="mb-3" Url="/recover_password">Forgot Password?</Link>
            <Button Class="Button" Id="buttonLogin" Variant="primary" Icon="" Type="submit" IsDisabled=false
                TextAlignment="center">
                Log in
            </Button>
        </form>
        <div class="footer-content">
            @if (isInvalid)
            {
                <p style="color: red; font-weight: bold;">Incorrect Email or Password</p>
            }
        </div>
    </div>
</body>


@code
{
    string email = ""; // Var to bind user email input
    string password = ""; // Var to bind user password input
    bool isInvalid = false; // Flag to show user if login details were bad

    private async void OnLoginSubmit()
    {
        //Create uri for api. Dont use Client.BaseAddress, js wont work with backend:8085
        var loginAPIUri= new Uri("http://localhost:8085/api/auth/login");

        // Call loginUser js function in PLOT-FE\Plot\wwwroot\js\authHelper.js. This function is used to send and receive
        // a http request to the backend login endpoint. Js is used because using a normal http client
        // was not seting cookies in the browser.
        var result = await JSRuntime.InvokeAsync<bool>("loginUser", loginAPIUri, email, password);
         
        // True if user Authentication is good
        if (result)
        {   //Good Auth, navigate to the dashbard, use forceload or the next pages elements will be off.
            Navigation.NavigateTo("/test-auth",forceLoad:true);
        }
        else // False user Authentication is bad, set flag to true, this displays to the user that
        {    // the email or password was bad.
            isInvalid = true;
        }
    }
}
