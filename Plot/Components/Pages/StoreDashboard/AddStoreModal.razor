@inject StoresHttpClient StoresHttpClient
@inject UsersHttpClient UsersHttpClient
@inject ToastService ToastService

@using Plot.Services

<Modal @attributes="Attributes" SizeClass="modal-lg">
    <ModalHeader Title="Create Store" />
    <EditForm Model="AddStoreModel" OnValidSubmit="async () => await OnAddStoreSubmit()">

        <AddUpdateStoreModalBody AddUpdateStoreModel="AddStoreModel" StoreId="StoreId"
            AddEmployeeTarget="#create-store-add-employee" Users="Users.Values.ToList()" DeleteUser="DeleteUser" />

        <ModalFooter OnCancelClick="ClearAddStoreModel">
            <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                Create Store
            </Button>
        </ModalFooter>
    </EditForm>
</Modal>

<AddEmployeeToStoreModal id="create-store-add-employee" AddEmployeeTarget="#create-store"
    OnAddEmployeesSubmit="OnAddEmployeesSubmit" />

@code {
    /// <summary>
    /// method passed in from parent (Store Dashboard) to update the current stores available.
    /// </summary>
    [Parameter] public required EventCallback UpdateStores { get; set; }

    /// <summary>
    /// Captures and stores any additional attributes that are not explicitly defined on the component
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    /// <summary>
    /// Model used to grab/set values of stores from the Add Modal form
    /// </summary>
    [SupplyParameterFromForm] private Data.Models.Stores.UpdatePublicInfoStore? AddStoreModel { get; set; }

    /// <summary>
    /// Holds all of the users that are/will be associated with a store
    /// </summary>
    private Dictionary<int, Data.Models.Users.UserDTO> Users = new Dictionary<int, Data.Models.Users.UserDTO>();

    /// <summary>
    /// The ID of the store currently being edited 
    /// (-1 when creating a store becasue it doesn't have a TUID yet)
    /// </summary>
    public int StoreId = -1;

    /// <summary>
    /// Updates the Users Dictionary to include all of the employees that should 
    /// be associated with the store
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    private async Task UpdateUsers()
    {
        if (AddStoreModel != null)
        {
            if (AddStoreModel.USER_TUIDS != null && AddStoreModel.USER_TUIDS != string.Empty)
            {
                var addedUsers = await UsersHttpClient.GetUsersByString(new Data.Models.Users.UsersByStringRequest()
                {
                    TUIDS = AddStoreModel.USER_TUIDS
                });

                if (addedUsers != null)
                {
                    addedUsers.ForEach((addedUser) =>
                    {
                        Users.TryAdd(addedUser.TUID, addedUser);
                    });
                }
            }
        }
    }

    /// <summary>   
    /// Remove a user from the dictionary Users. This will remove their association to the store
    /// </summary>
    /// <param name="tuid">The TUID of the user to remove from the store </param>
    /// <returns> void </returns>
    private async Task DeleteUser(int tuid)
    {
        await Task.Run(() => Users.Remove(tuid));
    }

    /// <summary>
    /// Creates a new AddStoreModel when the modal is created.
    /// The values are empty other than providing a valid default Length and Width
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    protected override void OnInitialized()
    {
        AddStoreModel ??= new()
        {
            LENGTH = 1,
            WIDTH = 1,
        };
    }

    /// <summary>
    /// Takes the employee(s) being added from the AddEmployeeToStoreModal and
    /// marks them to be associated with the store
    /// </summary>
    /// <param name="employees"> list of employees from the the AddEmployeeToStoreModal </param>
    /// <returns> void </returns>
    private async Task OnAddEmployeesSubmit(string[] employees)
    {
        List<string> employeesList = new List<string>(employees);

        string joinedEmployees = string.Join(",", employeesList);

        AddStoreModel!.USER_TUIDS = joinedEmployees;

        await UpdateUsers();
    }

    /// <summary>
    /// Attempts to create the store if the values in AddStoreModel are valid
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    private async Task OnAddStoreSubmit()
    {
        if (AddStoreModel == null)
        {
            ToastService.ShowError("There was an error adding a store!");
            return;
        }

        var Store = new Data.Models.Stores.CreateStore()
        {
            NAME = AddStoreModel.NAME!,
            ADDRESS = AddStoreModel.ADDRESS!,
            BLUEPRINT_IMAGE = AddStoreModel.BLUEPRINT_IMAGE,
            CITY = AddStoreModel.CITY!,
            LENGTH = AddStoreModel.LENGTH,
            WIDTH = AddStoreModel.WIDTH,
            STATE = AddStoreModel.STATE!,
            ZIP = AddStoreModel.ZIP!,
            USER_TUIDS = AddStoreModel.USER_TUIDS ?? ""
        };

        var response = await StoresHttpClient.CreateStore(Store);

        if (response != System.Net.HttpStatusCode.OK)
        {
            ToastService.ShowError("There was an error adding a store!");
        }
        else
        {
            await UpdateStores.InvokeAsync();
            ToastService.ShowSuccess("The store was created.");
        }

        ClearAddStoreModel();
    }

    /// <summary>
    /// removes all of the values from the AddStoreModel
    /// (Clears the form for the next store)
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    private void ClearAddStoreModel()
    {
        AddStoreModel = new();
    }
}