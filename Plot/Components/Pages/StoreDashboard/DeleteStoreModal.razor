@inject StoresHttpClient StoresHttpClient
@inject ToastService ToastService

@using Plot.Services

<Modal id="@($"delete-store-{Store.TUID}")" class="standard">
    <ModalHeader Title="Confirm Deletion" Variant="danger" />
    <form @onsubmit="async () => await OnDeleteStoreSubmit(Store.TUID)">
        @code {
            private string? deleteTextInput;
            private bool isDisabled => deleteTextInput != "DELETE";
        }
        <ModalBody>
            <h5>Are you SURE you want to delete this Store?</h5>
            <input type="text" placeholder="If so, type DELETE below" required pattern="DELETE"
                @bind-value="deleteTextInput" @bind-value:event="oninput" class="form-control w-100" />
        </ModalBody>

        <ModalFooter>
            <Button TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                data-bs-dismiss="modal">
                Yes, Delete
            </Button>
        </ModalFooter>
    </form>
</Modal>

@code {
    /// <summary>
    /// Store object passed in from parent (Store Dashboard)
    /// </summary>
    [Parameter] public required Data.Models.Stores.Store Store { get; set; }
    
    /// <summary>
    /// method passed in from parent (Store Dashboard) to update the current stores available.
    /// </summary>
    [Parameter] public required EventCallback UpdateStores { get; set; }


    /// <summary>
    /// Delete a store from the DB based off of the store ID passed in
    /// </summary>
    /// <param name="storeId"> used to identify which store should be deleted </param>
    /// <returns> void </returns>
    private async Task OnDeleteStoreSubmit(int storeId)
    {
        var response = await StoresHttpClient.DeleteStore(storeId);

        if (response == System.Net.HttpStatusCode.OK)
        {
            ToastService.ShowSuccess("The store has been deleted!");
        }

        await UpdateStores.InvokeAsync();
        StateHasChanged();
    }
}