@* Filename: Stores.razor
Part of Project: PLOT

File Purpose:
This is the Stores dashboard page component

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/12/2025)

*@

@page "/store-dashboard"
@inject IJSRuntime JS
@using Plot.Components.PartialComponents.NumericInput
@inject NavigationManager Navigation
@using System.Drawing;
@using System.IO;

<PageTitle>Store Dashboard</PageTitle>

@* Div to hold the stores *@
<div id="MainStoresDiv" class="horizontal-items">

    @* loop to generate a card for each store that exists *@
    @foreach (var store in stores)
    {
            <div @onclick="(() => SetSelectedStore(store))">
                <Card CardText="@($"{store.City},{store.State}")" CardImage="@($"{store.Blueprint_Image}")">
                    <Dropdown Class="Test Dropdown" Id="@($"{store.Name}{store.Id}Dropdown")"
                        DropdownText="@(new List<string> { "Floorsets", "Edit", "Delete" })"
                        DropdownLinks="@(new List<string> { $"/floorsets/{store.City},{store.State}/{store.Address},{store.City},{store.State} {store.Zip}", "#editStoreModal", "#deleteStoreModal" })"
                        LabelText="Store"
                        DropdownIcons="@(new List<string> { "fa-solid fa-note-sticky", "fa-solid fa-pen-to-square", "fa-solid fa-trash-can" })" />
                </Card>
            </div>
    }


    @* Delete store modal *@
    <Modal Title="Confirm Deletion" Id="deleteStoreModal" Class="standard" OnCancelFunction="CleanUpDelete">
        <BodyContent>
            <h5>Are you SURE you want to delete this store?</h5>
            <TextInput Class="w-100" Id="deleteModalTextInput" Label="If so, type DELETE below" Value="@confirmDelete"
                ValueChanged="EnableDelete" />
        </BodyContent>

        <FooterContent>
            <p style="margin-left: auto;"></p>
            <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="DeleteStore"
                IsDisabled="@isDeleteDisabled">Yes,
                Delete</Button>
        </FooterContent>
    </Modal>
</div>

@* + Add Store button fixed to the bottom right of the screen *@
<div class="fixed-bottom-right">
    @* add store button that brings up the Add Store modal *@
    <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="ShowAddStoreModal"
        Icon="fa-solid fa-plus">
        Add Store
    </Button>
</div>

@* Add Store modal *@
<Modal Title="Add Store" Id="addStoreModal" Class="modal-dialog modal-lg" OnCancelFunction="CleanUpAdd">
    <BodyContent>
        <h5>Add Store</h5>
        <p>Add a new store with it's own unique store blueprint.</p>

        <div class="container">
            <div class="row">

                @* left side of the modal *@
                <div class="col-md-6">
                    @* name *@
                    <div class="row">
                        <TextInput Class="w-100" LabelOnTop="true" Id="addModalStoreName" Label="Name"
                            Placeholder="Name" Type="Text" Value="@storeToAdd.Name" ValueChanged="@ValidateNameAdd" />
                        <p class="error">@nameErrorAdd</p>
                    </div>

                    @* address *@
                    <div class="row">
                        <TextInput Class="w-100" LabelOnTop="true" Id="addModalStoreAddress" Label="Address"
                            Placeholder="Address" Value="@storeToAdd.Address" ValueChanged="@ValidateAddressAdd" />
                        <p class="error">@addressErrorAdd</p>
                    </div>

                    @* city *@
                    <div class="row">
                        <TextInput Class="w-100" LabelOnTop="true" Id="addModalStoreCity" Label="City"
                            Placeholder="City" Value="@storeToAdd.City" ValueChanged="@ValidateCityAdd" />
                        <p class="error">@cityErrorAdd</p>
                    </div>

                    @* state and zip *@
                    <div class="row">
                        <div class="col">
                            @* holds the store state *@
                            <TextInput Class="w-100 small-textInput" LabelOnTop="true" Id="addModalStoreState"
                                Label="State" Placeholder="State" Value="@storeToAdd.State"
                                ValueChanged="@ValidateStateAdd" Max=25 />
                            <p class="error">@stateErrorAdd</p>
                        </div>

                        <div class="col">
                            @* holds the store zip *@
                            <TextInput Class="w-100 small-textInput" LabelOnTop="true" Id="addModalStoreZip" Label="Zip"
                                Placeholder="Zip" Value="@storeToAdd.Zip" ValueChanged="@ValidateZipAdd" Max=5 />
                            <p class="error">@zipErrorAdd</p>
                        </div>

                    </div>


                    @* <div class="row">
                        <p class="error">@stateErrorAdd</p>
                        <p class="error">@zipErrorAdd</p>
                    </div> *@


                    @* height and width *@
                    <div class="row">
                        <div class="col">
                            <NumericInput Class="w-100 small-textInput" Id="addModalStoreLength" Label="Length"
                                Placeholder="20ft" Description="" Value="@storeToAdd.Length"
                                ValueChanged="@ValidateLengthAdd" />
                            <p class="error">@heightErrorAdd</p>
                        </div>

                        <div class="col">
                            <NumericInput Class="w-100 small-textInput" Id="addModalStoreWidth" Label="Width"
                                Placeholder="50ft" Description="" Value="@storeToAdd.Width"
                                ValueChanged="@ValidateWidthAdd" />
                            <p class="error">@widthErrorAdd</p>
                        </div>
                    </div>

                </div>

                @* right side of the modal *@
                <div class="col d-flex justify-content-center">
                    @* holds store image *@
                    <ImageInput Label="Upload Image" Id="addModalStoreBlueprint" Width="330px" Height="300px" />
                    <p class="error">@blueprintErrorAdd</p>
                </div>
            </div>


        </div>


        @* Employees section*@
        <h5>Employees</h5>
        <div id="employeesAdd" class="horizontal-items">
            <div id="addStoreAddUserDiv" class="circle-container">
                <button class="circle btn-style" @onclick="ShowAddUserAddStoreModal"><i
                        class="fa-solid fa-plus"></i></button>
                <p class="circle-name">Add Employee</p>
            </div>
        </div>
    </BodyContent>

    <FooterContent>
        @* button for adding the store *@
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="AddStore"
            IsDisabled="@isAddDisabled">Add
            Store</Button>
    </FooterContent>
</Modal>



@* Edit Store modal *@
<Modal Title="Edit Store" Id="editStoreModal" Class="modal-dialog modal-lg" OnCancelFunction="CleanUpEdit">
    <BodyContent>
        <h5>Edit Store</h5>
        <p>Edit a store's information</p>
        @* Name and location (labels and input boxes)*@

        <div class="row">
            @* left side of modal *@
            <div class="col">
                @* Name *@
                <div class="row">
                    <TextInput Class="w-100" LabelOnTop="true" Id="editModalStoreName" Label="Name" Placeholder="Name"
                        Type="Text" Value="@editedStoreInfo.Name" ValueChanged="@ValidateNameEdit" />
                    <p class="error">@nameErrorEdit</p>
                </div>

                @* address *@
                <div class="row">
                    <TextInput Class="w-100" LabelOnTop="true" Id="editModalStoreAddress" Label="Address"
                        Placeholder="Address" Value="@editedStoreInfo.Address" ValueChanged="@ValidateAddressEdit" />
                    <p class="error">@addressErrorEdit</p>
                </div>

                @* city *@
                <div class="row">
                    <TextInput Class="w-100" LabelOnTop="true" Id="editModalStoreCity" Label="City" Placeholder="City"
                        Value="@editedStoreInfo.City" ValueChanged="@ValidateCityEdit" />
                    <p class="error">@cityErrorEdit</p>
                </div>

                @* state and zip *@
                <div class="row">
                    @* state *@
                    <div class="col">
                        <TextInput Class="w-100 small-textInput" LabelOnTop="true" Id="editModalStoreState"
                            Label="State" Placeholder="State" Value="@editedStoreInfo.State"
                            ValueChanged="@ValidateStateEdit" />
                    </div>

                    @* zip *@
                    <div class="col">
                        <TextInput Class="w-100 small-textInput" LabelOnTop="true" Id="editModalStoreZip" Label="Zip"
                            Placeholder="Zip" Value="@editedStoreInfo.Zip" ValueChanged="@ValidateZipEdit" />
                    </div>
                </div>

                @* state and zip error messages *@
                <div class="row">
                    <p class="error">@stateErrorEdit</p>
                    <p class="error">@zipErrorEdit</p>
                </div>

                @* height and width *@
                <div class="row">
                    @* Length *@
                    <div class="col">
                        <NumericInput Class="w-100 small-textInput" Id="editModalStoreLength" Label="Length"
                            Placeholder="20ft" Description="" Value="@editedStoreInfo.Length"
                            ValueChanged="@ValidateLengthEdit" />
                        <p class="error">@heightErrorEdit</p>
                    </div>

                    @* width *@
                    <div class="col">
                        <NumericInput Class="w-100 small-textInput" Id="editModalStoreWidth" Label="Width"
                            Placeholder="50ft" Description="" Value="@editedStoreInfo.Width"
                            ValueChanged="@ValidateWidthEdit" />
                        <p class="error">@widthErrorEdit</p>
                    </div>
                </div>
            </div>

            @* right side of modal *@
            <div class="col d-flex justify-content-center">
                @* holds store image *@
                <ImageInput Label="Upload Image" Id="editModalStoreBlueprint" Width="330px" Height="300px"/>
                <p class="error">@blueprintErrorEdit</p>
            </div>
        </div>


        @* Employees section*@
        <h5>Employees</h5>
        <div id="employeesEdit" class="horizontal-items">
            <div id="editStoreAddUserDiv" class="circle-container">
                <button class="circle btn-style" @onclick="ShowAddUserEditStoreModal"><i
                        class="fa-solid fa-plus"></i></button>
                <p class="circle-name">Add Employee</p>
            </div>
        </div>
    </BodyContent>

    <FooterContent>
        @* button for updating the store *@
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="SaveChanges"
            IsDisabled="@isEditDisabled">Update
            Store</Button>
    </FooterContent>
</Modal>



@* Add User modal for when an employee is being added to a store being created. This is trigged when the + Add Employee button is
    clicked in the Edit or Add Store modal *@
<Modal Title="Add User" id="AddUserModalAddStore" Class="modal-dialog"
    onCancelFunction="ClosingAddUserModalForAddStore">
    <BodyContent>
        <h3>Select a user to add</h3>
        @* This will be populated with the list of users from the DB
            Text is just their name for now, while value could be something like "TUID,FIRST_NAME,LAST_NAME" *@
        <OptionInput ID="AddStoreUserOptionsInput" Class="optionInput" label="Select a user to add"
            optionsText="@UserOptionsText" optionsValues="@UserOptionsValues"
            OnSelectFunction="SetUserThatWillBeAddedToAStore" />

    </BodyContent>

    <FooterContent>
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary"
            OnClickFunction="AddStoreAddNewEmployee">Add
            User</Button>
    </FooterContent>

</Modal>

@* add new user to an existing store. This is when editing a store *@
<Modal Title="Add User" id="AddUserModalEditStore" Class="modal-dialog"
    onCancelFunction="ClosingAddUserModalForEditStore">
    <BodyContent>
        <h3>Select a user to add</h3>
        @* This will be populated with the list of users from the DB
            Text is just their name for now, while value could be something like "TUID,FIRST_NAME,LAST_NAME" *@
        <OptionInput ID="EditStoreUserOptionsInput" Class="optionInput" label="Select a user to add"
            optionsText="@UserOptionsText" optionsValues="@UserOptionsValues"
            OnSelectFunction="SetUserThatWillBeAddedToAStore" />

    </BodyContent>

    <FooterContent>
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary"
            OnClickFunction="EditStoreAddNewEmployee">Add
            User</Button>
    </FooterContent>

</Modal>

<script>

    @* event listeners that load when the page loads  *@
        document.addEventListener("DOMContentLoaded", function () {
            @* Not sure where to add constants, so I am placing it here for now.
                This is used for setting modals z-index back to their default value*@
            const DEFAULT_MODAL_Z_INDEX_VALUE = 1050;
            @* Logic to remove the faded background when clicking off of layered modals *@
                document.addEventListener("click", function (event) {
                    @* if the clicked item is a modal with the "fade class, then change the Z-index of the modals being returned to " *@
                if (event.target.matches(".fade")) {
                        ChangeZIndexOfComponent("addStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                        ChangeZIndexOfComponent("editStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                    }
                });
            @* Logic to remove the faded background when hitting "Escape" when closing layered modals and change the Z-index of the modals being returned to*@
                document.addEventListener("keydown", function () {
                    if (event.key === "Escape") {
                        ChangeZIndexOfComponent("addStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                        @* put the modal being returned to back in focus (closing with escape doesn't return the focus) *@
                        const addStoreModal = document.getElementById("addStoreModal");
                        addStoreModal.focus();

                        ChangeZIndexOfComponent("editStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                        @* put the modal being returned to back in focus (closing with escape doesn't return the focus) *@
                        const editStoreModal = document.getElementById("editStoreModal");
                        editStoreModal.focus();

                        @* Clear the delete modal textbox if closing the modal with escape *@
                            ClearDeleteStoreModalTextbox()
                    }
                })

        });


    // function for adding an employee to whatever modal needs to see employees. 
    // Places a circle with their name and initials
    function addEmployee(name, initials, targetDiv) {
        //Get the employees div
        const employeesDiv = document.getElementById(targetDiv);

        //Create the main container div for the user  
        const circleContainer = document.createElement("div");
        circleContainer.classList.add("circle-container");

        //Create the circle div
        const circle = document.createElement("div");
        circle.classList.add("circle");

        //Create the initials span
        const initialsSpan = document.createElement("span");
        initialsSpan.classList.add("initials");
        initialsSpan.textContent = initials;

        //Create the name paragraph
        const nameParagraph = document.createElement("p");
        nameParagraph.classList.add("circle-name");
        nameParagraph.textContent = name;

        //Append initials span to the circle
        circle.appendChild(initialsSpan);
        //Append circle and name to the main container
        circleContainer.appendChild(circle);
        circleContainer.appendChild(nameParagraph);

        //Append the circle container to the employees div
        employeesDiv.appendChild(circleContainer);
    }

    @* helper function to get the value from the Option input component in the 
        addEmployee modal when trying to add an employee to a store *@
        function GetEmployeeBeingAddedToStore(targetDiv, strUserValues) {
            @* const employeeOptionInput = document.getElementById(targetDropdownID);
            const strUserValues = employeeOptionInput.value; *@

                @* split the value of the option on commas (That's how I have them stored at the moment) *@
            const arrSplitStrUserValues = strUserValues.split(",");
            @* Get the first and last name *@
            const strFirstName = arrSplitStrUserValues[1];
            const strLastName = arrSplitStrUserValues[2];
            const strName = strFirstName + " " + strLastName;
            @* get the initials fro the names *@
            const strInitials = strFirstName.charAt(0) + strLastName.charAt(0);
            @* create the employee fro the name and initials *@
                addEmployee(strName, strInitials, targetDiv)
        }



    function HideModal(modalId) {
        console.log(modalId);
        /* Danielle Smith - 3/17/2025
        hide modal function that works with button component and id of modal passed in
        call remove modal backdrop twice because opening the delete modal makes two of them for some reason
        we will need to fix this in the future */
        document.getElementById(`${modalId}`).classList.remove('show');
        document.querySelector('.modal-backdrop')?.remove();
        document.querySelector('.modal-backdrop')?.remove();
    }

    function DeleteStore() {
        /* Danielle Smith - 3/18/2025
        function that mimics deleting a store. still checks if the text equals delete.
        if so, close the modal to mimic deleting a store. clear the text box for next use
        otherwise, alert the user */
        let deleteStr = document.getElementById("deleteModalTextInput").value;
        if (deleteStr === "DELETE") {
            ClearDeleteStoreModalTextbox();
            HideModal("deleteStoreModal");
        }
        else {
            alert("Incorrect input.")
        }
    }

    @* simply clears the textbox of the deleteStoreModal *@
        function ClearDeleteStoreModalTextbox() {
            document.getElementById("deleteModalTextInput").value = "";
        }

    // show the whichever modal ID is passed into it
    function showModal(modalId) {
        var modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }

    // update the text in an input box
    // This is used right now for just changing the text
    // in the demo for the program
    function updateInputText(inputId, newValue) {
        document.getElementById(inputId).value = newValue;
    }

    @* function to remove all of the elements from a div except for a specific one
        This is being used to clear out the Users in the Add Store modal. The Add Users button
        should stay though. *@
        function clearDivExceptById(divId, exceptionId) {
            const div = document.getElementById(divId);

            @* Lopp through the div children and remove all but the element specified *@
        for (let i = div.children.length - 1; i >= 0; i--) {
                if (div.children[i].id !== exceptionId) {
                    div.children[i].remove();
                }
            }
        }
    @* function to change the z-index of a component
            This was initially made for layering modals on top of eaach other*@
        function ChangeZIndexOfComponent(targetComponentID, intZValue) {
            const component = document.getElementById(targetComponentID);
            component.style.zIndex = intZValue;
        }

    @* function to try an focs on a specific element *@
        function FocusOnElement(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                console.log(element + "focused on");
                element.focus();
            } else {
                console.warn(`Element with ID '${elementId}' not found.`);
            }
        }

    @* function to get the URL of the image from the elements style tag *@

        async function getBackgroundImageUrl(elementId) {
            const element = document.getElementById(elementId);

            const style = window.getComputedStyle(element);
            const backgroundImage = style.backgroundImage;

            // Extract the URL from the backgroundImage property
            const urlMatch = backgroundImage.match(/url\(["']?(.*?)["']?\)/);

            // Set imageURL to valid url match
            const imageUrl = urlMatch[1];

            // Fetch image url
            const response = await fetch(imageUrl);
            if (!response.ok) throw new Error(`Failed to fetch image: ${response.statusText}`);

            const blob = await response.blob(); // Convert response to Blob
            const objectUrl = URL.createObjectURL(blob); // Create Object URL

            return objectUrl; // Return Object URL
        }

    @* function used to clear the imageInput background *@
        function ClearBackgroundImage(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.style.backgroundImage = "none";
                element.classList.add("dashed-border");
            }
        }

    @* method to set the background image of the edit modal imageinput to the stores BP image *@
        async function SetBackgroundImage(elementId, imageUrl) {
            const element = document.getElementById(elementId);

            // Fetch the image url
            const response = await fetch(imageUrl);
            if (!response.ok) throw new Error(`Failed to fetch image: ${response.statusText}`);

            const blob = await response.blob(); // Convert response to Blob
            const objectURL = URL.createObjectURL(blob); // Create Object URL

            element.style.backgroundImage = `url("${objectURL}")`;
            element.style.backgroundSize = "cover";   // Image is sized just enough to cover the upload
            element.style.backgroundPosition = "center";
            element.classList.remove("dashed-border");
        }

    @* force close the modal. This was needed because modal elements were invisable after closing the modal,
        but they could still be interacted with *@
        function ForceCloseModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                // Hide the modal
                modal.style.display = "none";
                modal.setAttribute("aria-hidden", "true");
                modal.removeAttribute("aria-modal");
                modal.removeAttribute("role");
                modal.className = "modal fade"; // Reset class

                // Remove modal backdrop
                document.querySelector('.modal-backdrop')?.remove();
                document.querySelector('.modal-backdrop')?.remove();

                // Remove attributes and class from body
                document.body.classList.remove("modal-open");
                document.body.removeAttribute("data-bs-overflow");
                document.body.removeAttribute("data-bs-padding-right");
                document.body.style.overflow = "";
                document.body.style.paddingRight = "";

                // Ensure focus is removed
                document.activeElement?.blur();
            }
        }


    @* function to click the Edit dropdown link for a store. This is to prevent a double click bug that happens when
        updating a store. *@
        function ClickDropdownLink(storeId) {
            const dropdown = document.getElementById(storeId + "Dropdown");
            if (dropdown) {
                const links = dropdown.querySelectorAll("a");
                if (links.length > 1) {
                    //click the second link (the edit button)
                    links[1].click();
                } else {
                    console.error("Dropdown does not have enough links.");
                }
            } else {
                console.error("Dropdown not found.");
            }
        }


</script>

@code {
    //list to hold all of the stores
    private List<Store> stores = new List<Store>();

    //store variable that will be updated to when a store is being made
    private Store storeToAdd = new Store();
    //used to hold/grab the info of the store that is being targeted
    private Store selectedStore = new Store();
    //used to display and change the info of the store being changed
    private Store editedStoreInfo = new Store();

    // Error messages for adding stores
    private string nameErrorAdd = "";
    private string addressErrorAdd = "";
    private string cityErrorAdd = "";
    private string stateErrorAdd = "";
    private string zipErrorAdd = "";
    private string heightErrorAdd = "";
    private string widthErrorAdd = "";
    private string blueprintErrorAdd = "";
    // error messages for editing stores
    private string nameErrorEdit = "";
    private string addressErrorEdit = "";
    private string cityErrorEdit = "";
    private string stateErrorEdit = "";
    private string zipErrorEdit = "";
    private string heightErrorEdit = "";
    private string widthErrorEdit = "";
    private string blueprintErrorEdit = "";

    //Variable to keep track of the current ID index
    private int intNextStoreId = 1;

    // Deletion confirmation string, initialized as empty
    private string confirmDelete = "";
    // Constant used to confirm deletion
    private const string DELETE_CONFIRM = "DELETE";
    // Is delete button disabled?
    private bool isDeleteDisabled = true;

    // Is add button disabled
    private bool isAddDisabled = true;
    //is edit button disabled
    private bool isEditDisabled = true;

    //checks to endable hte add button on the add store modal
    private bool isNameValidAdd = false;
    private bool isAddressValidAdd = false;
    private bool isCityValidAdd = false;
    private bool isStateValidAdd = false;
    private bool isZipValidAdd = false;
    private bool isWidthValidAdd = false;
    private bool isLengthValidAdd = false;
    //private bool isBlueprintValidAdd = true;

    //checks to enable the update button on the edit store modal
    private bool isNameValidEdit = true;
    private bool isAddressValidEdit = true;
    private bool isCityValidEdit = true;
    private bool isStateValidEdit = true;
    private bool isZipValidEdit = true;
    private bool isWidthValidEdit = true;
    private bool isLengthValidEdit = true;
    private bool isBlueprintValidEdit = true;




    //lists to hold the value and names of users for the options inputs used to add employees to a store
    //Test
    private List<string> UserOptionsText { get; set; } = new List<string> { "initializeText" };
    private List<string> UserOptionsValues { get; set; } = new List<string> { "initializeValue" };
    //variable to hold the string of the currently selected user when adding a user to a store (value will ve received from
    //optionsInput)
    private string strUserValueToAdd = "-1,Test,User";


    //initialize components
    protected override void OnInitialized()
    {
        //list of stores
        stores = new List<Store>
{
new Store
{
Id=intNextStoreId++,
Name="Plato's Closet Flint",
Address="3192 S Linden Rd",
City="Flint",
State="MI",
Zip="48507",
Width="200",
Length="300",
Blueprint_Image = "img/LayoutPhotoExample.png"
},
new Store
{
Id=intNextStoreId++,
Name="Plato's Closet Austin",
Address="35400 Brodie Ln Ste 240",
City="Austin",
State="TX",
Zip="78745",
Width="250",
Length="325",
Blueprint_Image = "img/LayoutPhotoExample.png"
},
new Store
{
Id=intNextStoreId++,
Name="Plato's Closet Utica",
Address="13287 Hall Rd",
City="Utica",
State="MI",
Zip="48315",
Width="375",
Length="225",
Blueprint_Image = "img/LayoutPhotoExample.png"
}
};

    }



    //function to update the optionsInput lists to display the users available to add to a store
    private void UpdateUserOptions()
    {
        //set the content of the lists of users
        UserOptionsText = new List<string> { "Homer Simpson", "Marge Simpson", "Bart Simpson", "Sideshow Bob" };
        UserOptionsValues = new List<string> { "1,Homer,Simpson", "2,Marge,Simpson", "3,Bart,Simpson", "4,Sideshow,Bob" };
        //set the starter value to the first value
        if (UserOptionsValues.Count > 0)
        {
            SetUserThatWillBeAddedToAStore(UserOptionsValues[0]);
        }
    }
    //function that sets the user (strUserValueToAdd variable) that will be added to the store
    private void SetUserThatWillBeAddedToAStore(string selectedOption)
    {
        strUserValueToAdd = selectedOption;
    }


    //+ Add Store modal
    private async Task ShowAddStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "addStoreModal");
    }
    //Edit Store modal
    private async Task ShowEditStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "editStoreModal");
    }
    //Delete store modal
    private async Task ShowDeleteStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "deleteStoreModal");
    }
    //Add User modal for when creating a new store
    private async Task ShowAddUserAddStoreModal()
    {
        //get available list of users to populate optionsinput
        UpdateUserOptions();
        //show the add user modal for creating a new store
        await JS.InvokeVoidAsync("showModal", "AddUserModalAddStore");
        //dim the add store modal
        await JS.InvokeVoidAsync("ChangeZIndexOfComponent", "addStoreModal", "1");
    }
    //Add User modal for when editing a store
    private async Task ShowAddUserEditStoreModal()
    {
        //update the available users for the options input
        UpdateUserOptions();
        //show the add user modal for Editing a store
        await JS.InvokeVoidAsync("showModal", "AddUserModalEditStore");
        //dim the edit store modal
        await JS.InvokeVoidAsync("ChangeZIndexOfComponent", "editStoreModal", "1");
    }
    //function used for closing layered up modals to reset the z-value of the underlying modals back to theor default value
    private async void ResetZIndexOfComponent(string strComponentID)
    {
        await JS.InvokeVoidAsync("ChangeZIndexOfComponent", strComponentID, "1050");
    }


    //function for deleting a store
    private async void deleteStore()
    {
        Console.WriteLine("DELETE THE STORE");
        await JS.InvokeVoidAsync("DeleteStore");
    }
    //function that calls the JS function to clear the text from the Delete store modal textbox
    private async void ClearDeleteStoreModalTextbox()
    {
        await JS.InvokeVoidAsync("ClearDeleteStoreModalTextbox");
    }
    //function for creating a store
    private async void createNewStore()
    {
        Console.WriteLine("CREATE NEW STORE");
        //clear out the added users for the new store
        await JS.InvokeVoidAsync("clearDivExceptById", "employeesAdd", "addStoreAddUserDiv");
        //close the modal
        await JS.InvokeVoidAsync("HideModal", "addStoreModal");
    }
    //function for adding a new employee when editing a store
    private async void EditStoreAddNewEmployee()
    {
        Console.WriteLine("ADD NEW EDIT METHOD EMPLOYEE");
        //add an employee to the edit store modal
        await JS.InvokeVoidAsync("GetEmployeeBeingAddedToStore", "employeesEdit", strUserValueToAdd);
        //await JS.InvokeVoidAsync("doNothing");

    }
    //function for adding a new employee when editing a store
    private async void AddStoreAddNewEmployee()
    {
        Console.WriteLine("ADD NEW EMPLOYEE");
        //add an employee to the add store modal
        await JS.InvokeVoidAsync("GetEmployeeBeingAddedToStore", "employeesAdd", strUserValueToAdd);
    }
    //function fir updating a store's info
    private void updateStoreInformation()
    {
        Console.WriteLine("UPDATE THE STORE");
    }
    //function that call the JS function to clear the users from the Add Store Modal.
    //This is used if employees are added, but then they decide to stop the creation of the store
    private async void ClosingAddStoreModal()
    {
        //clear out the added users for the new store
        await JS.InvokeVoidAsync("clearDivExceptById", "employeesAdd", "addStoreAddUserDiv");
    }
    //function for closing the add user modal that's used for adding employees to a new store being created
    private void ClosingAddUserModalForAddStore()
    {
        ResetZIndexOfComponent("addStoreModal");
    }
    //function for closing the add user modal that's used for adding employees to an existing store
    private void ClosingAddUserModalForEditStore()
    {
        ResetZIndexOfComponent("editStoreModal");
    }







    //Store class
    public class Store
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? State { get; set; }
        public string? Zip { get; set; }
        public string? Width { get; set; }
        public string? Length { get; set; }
        //byte[] is for the varbinary type that the DB is using to store the image
        //public byte[] Blueprint_Image { get; set; }
        public string? Blueprint_Image { get; set; }
    }

    // Set selected user to user in row clicked upon
    private async Task SetSelectedStore(Store store)
    {
        // Store of block clicked is selected store
        selectedStore = store;

        // Copy store info for editing in case "Edit" is clicked
        editedStoreInfo = new Store
        {
            Id = selectedStore.Id,
            Name = selectedStore.Name,
            Address = selectedStore.Address,
            City = selectedStore.City,
            State = selectedStore.State,
            Zip = selectedStore.Zip,
            Width = selectedStore.Width,
            Length = selectedStore.Length,
            Blueprint_Image = selectedStore.Blueprint_Image
        };

        //SetBackgroundImage(elementId, strUrl)
        await JS.InvokeVoidAsync("SetBackgroundImage", "editModalStoreBlueprint", selectedStore.Blueprint_Image);

        StateHasChanged();
    }


    // Save edited store as the selected store
    private async Task SaveChanges()
    {
        var index = stores.FindIndex(s => s.Id == selectedStore.Id);
        stores[index] = editedStoreInfo;
        //get the image for the store
        stores[index].Blueprint_Image = await getImageUrlEdit();

        @* Click the edit button again for the store. This lets it be a single click after updating the store 
        instead of a double. I have no idea why it was happening, but this is the only fix I could find. *@
        await JS.InvokeVoidAsync("ClickDropdownLink", $"{stores[index].Name}{stores[index].Id}");

        //clear information in edit modal and close it
        await CleanUpEdit();

        StateHasChanged();
    }


    //Function used to add a store when the Add Store button is clicked in the addStoreModal
    private async Task AddStore()
    {
        stores.Add
        (
        new Store
        {
            Id = intNextStoreId++,
            Name = storeToAdd.Name,
            Address = storeToAdd.Address,
            City = storeToAdd.City,
            State = storeToAdd.State,
            Zip = storeToAdd.Zip,
            Width = storeToAdd.Width,
            Length = storeToAdd.Length,
            Blueprint_Image = await getImageUrlAdd()
            //Blueprint_Image = "img/LayoutPhotoExample.png"
        }
        );

        //reset storeToAdd
        storeToAdd = new Store();


        //clear the add store modal fields and close it
        await CleanUpAdd();

        StateHasChanged();

    }

    // Set Add button to disabled
    private void SetAddDisabled()
    {
        if (isNameValidAdd & isAddressValidAdd & isCityValidAdd
        & isStateValidAdd & isZipValidAdd & isLengthValidAdd & isWidthValidAdd)
        {
            isAddDisabled = false;
        }
        else
        {
            isAddDisabled = true;
        }

        StateHasChanged();
    }

    // Set Edit button to disabled
    private void SetEditDisabled()
    {
        if (isNameValidEdit & isAddressValidEdit & isCityValidEdit
        & isStateValidEdit & isZipValidEdit & isLengthValidEdit & isWidthValidEdit & isBlueprintValidEdit)
        {
            isEditDisabled = false;
        }
        else
        {
            isEditDisabled = true;
        }

        StateHasChanged();
    }


    // Delete selected user
    private async Task DeleteStore()
    {
        // Get user and remove
        var index = stores.FindIndex(s => s.Id == selectedStore.Id);
        stores.RemoveAt(index);

        // Clean up Delete Modal and close it
        await CleanUpDelete();

        StateHasChanged(); // Table is updated to reflected changes
    }


    // Enable delete button
    private void EnableDelete(string value)
    {
        // set confirmDelete variable to value
        confirmDelete = value;

        // Check if confirmDelete is equal to
        // Delete confirmation string
        if (confirmDelete.Equals(DELETE_CONFIRM))
        {
            // Set isDelete disabled to false
            isDeleteDisabled = false;
        }
        else
        {
            // Set isDelete disabled to true
            isDeleteDisabled = true;
        }

        StateHasChanged();
    }

    //clear the add store modal, reset flags, and close it
    private async Task CleanUpAdd()
    {
        //reset storeToAdd
        storeToAdd = new Store();

        //set back the error messages
        nameErrorAdd = "";
        addressErrorAdd = "";
        cityErrorAdd = "";
        stateErrorAdd = "";
        zipErrorAdd = "";
        heightErrorAdd = "";
        widthErrorAdd = "";
        blueprintErrorAdd = "";

        isNameValidAdd = false;
        isAddressValidAdd = false;
        isCityValidAdd = false;
        isStateValidAdd = false;
        isZipValidAdd = false;
        isWidthValidAdd = false;
        isLengthValidAdd = false;

        // Set Add User Button to disabled
        isAddDisabled = true;

        //clear out the added users for the new store
        await JS.InvokeVoidAsync("clearDivExceptById", "employeesAdd", "addStoreAddUserDiv");
        //clear the image from the store BP imageInput coponent
        await JS.InvokeVoidAsync("ClearBackgroundImage", "addModalStoreBlueprint");
        //close the modal
        await JS.InvokeVoidAsync("ForceCloseModal", "addStoreModal");

        StateHasChanged();
    }

    /* For Edit Store, clear the fields, reset flags, and clos the editStoreModal */
    private async Task CleanUpEdit()
    {
        // Selected Store no longer selected
        selectedStore = new Store();

        // Clean up error messages
        nameErrorEdit = "";
        addressErrorEdit = "";
        cityErrorEdit = "";
        stateErrorEdit = "";
        zipErrorEdit = "";
        heightErrorEdit = "";
        widthErrorEdit = "";
        blueprintErrorEdit = "";

        // Reset validity flags to true
        isNameValidEdit = true;
        isAddressValidEdit = true;
        isCityValidEdit = true;
        isStateValidEdit = true;
        isZipValidEdit = true;
        isWidthValidEdit = true;
        isLengthValidEdit = true;
        isBlueprintValidEdit = true;

        // Set Save Changes Button to enabled
        isEditDisabled = true;

        //clear the image from the store BP imageInput coponent
        await JS.InvokeVoidAsync("ClearBackgroundImage", "editModalStoreBlueprint");
        //close the modal
        await JS.InvokeVoidAsync("ForceCloseModal", "editStoreModal");

        StateHasChanged();
    }

    // Clean Up - Cleans up Delete Store Modal
    private async Task CleanUpDelete()
    {
        selectedStore = new Store(); // Selected User no longer selected
        confirmDelete = ""; // Delete textbox should now be empty
        isDeleteDisabled = false; // Delete enabled

        await JS.InvokeVoidAsync("ForceCloseModal", "deleteStoreModal");

        StateHasChanged();
    }

    // Clear error message for variable
    // given by reference parameter
    private void ClearError(ref string errorMsg)
    {
        errorMsg = "";
    }
    // Produces Error message if a text field is not alphabetic
    private void ErrorNotAlpha(string textLocation, ref string errorMsg)
    {
        errorMsg = textLocation + " is not alphabetic.";
    }
    private void ErrorNotNumeric(string textLocation, ref string errorMsg)
    {
        errorMsg = textLocation + " cannot have letters.";
    }
    // Produces Error message if a text field is too long
    private void ErrorTooLong(string textLocation, ref string errorMsg, int charLimit)
    {
        errorMsg = textLocation + " is too long. Limit is " + charLimit + " characters.";
    }
    //make sure there is text in the textbox
    private bool IsTextPresent(string text){return (text.Length > 0); }

    @* method used to validate the name of the store being added *@
    private void ValidateNameAdd(string text)
    {
        //name in DB is varchar(100)
        const int CHAR_LIMIT = 100;

        // Set value of first name to text
        storeToAdd.Name = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> uder name to Too Long
            ErrorTooLong("Name", ref nameErrorAdd, CHAR_LIMIT);
            isNameValidAdd = false;
        }
        else if (string.IsNullOrWhiteSpace(text) &&
        !text.All(c => Char.IsLetter(c) || c == ' ' || c == '-')) // Check if text contains only valid characters
        {
            // Set the error <p> under name to "Not Alphabetical"
            ErrorNotAlpha("Name", ref nameErrorAdd);
            isNameValidAdd = false;
        }

        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref nameErrorAdd);
            // Is text length greater than 0?
            isNameValidAdd = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetAddDisabled();
    }

    @* method used to validate the Address of the store being added *@
    private void ValidateAddressAdd(string text)
    {
        //address in DB is varchar(100)
        const int CHAR_LIMIT = 100;

        storeToAdd.Address = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> under address to Too Long
            ErrorTooLong("Address", ref addressErrorAdd, CHAR_LIMIT);
            isAddressValidAdd = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref addressErrorAdd);
            // Is text length greater than 0?
            isAddressValidAdd = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetAddDisabled();
    }

    @* method used to validate the city of the store being added *@
    private void ValidateCityAdd(string text)
    {
        //City in DB is varchar(100)
        const int CHAR_LIMIT = 100;

        storeToAdd.City = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> under city to Too Long
            ErrorTooLong("City", ref cityErrorAdd, CHAR_LIMIT);
            isCityValidAdd = false;
        }
        else if (string.IsNullOrWhiteSpace(text) &&
        !text.All(c => Char.IsLetter(c) || c == ' ' || c == '-')) // Check if text contains only valid characters
        {
            //set the error <p> under city to Not Alphabetical
            ErrorNotAlpha("City", ref cityErrorAdd);
            isCityValidAdd = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref cityErrorAdd);
            // Is text length greater than 0?
            isCityValidAdd = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetAddDisabled();
    }

    @* method used to validate the state of the store being added *@
    private void ValidateStateAdd(string text)
    {
        //City in DB is varchar(25)
        const int CHAR_LIMIT = 25;

        storeToAdd.State = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> under State to Too Long
            ErrorTooLong("State", ref stateErrorAdd, CHAR_LIMIT);
            isStateValidAdd = false;
        }
        else if (string.IsNullOrWhiteSpace(text) &&
        !text.All(c => Char.IsLetter(c) || c == ' ' || c == '-')) // Check if text contains only valid characters
        {
            //set the error <p> under state to Not Alphabetical
            ErrorNotAlpha("State", ref stateErrorAdd);
            isStateValidAdd = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref stateErrorAdd);
            // Is text length greater than 0?
            isStateValidAdd = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetAddDisabled();
    }

    @* method used to valisdate the zip code of the store being added *@
    private void ValidateZipAdd(string text)
    {
        //Zip in DB is varchar(10)
        const int CHAR_LIMIT = 10;
        storeToAdd.Zip = text;

        //check the lenght of the text
        if (text.Length > CHAR_LIMIT)
        {
            //text is too long
            ErrorTooLong("Zip", ref zipErrorAdd, CHAR_LIMIT);
            isZipValidAdd = false;
        }
        else if (!text.All(c => char.IsDigit(c) || c == '-' || c == ' ')) // Check if ZIP code contains only numbers and hyphens
        {
            //sets the error that there should be no letters in the zip
            ErrorNotNumeric("Zip", ref zipErrorAdd);
            isZipValidAdd = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref zipErrorAdd);
            //is thetext length more than 0
            isZipValidAdd = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetAddDisabled();
    }

    @* vmethod used to validate the width of the store being added *@
    private void ValidateWidthAdd(string text)
    {
        storeToAdd.Width = text;

        isWidthValidAdd = IsTextPresent(text);
        SetAddDisabled();
    }
    @* method used to validate the height of the store being added *@
    private void ValidateLengthAdd(string text)
    {
        storeToAdd.Length = text;

        isLengthValidAdd = IsTextPresent(text);
        SetAddDisabled();
    }

    @* private async Task ValidateBlueprintAdd(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        storeToAdd.Blueprint_Image = stream.ToArray();
        Console.WriteLine($"Uploaded image size: {storeToAdd.Blueprint_Image.Length} bytes");
    } *@

    @* method used to validate the name of the store being added *@
    private void ValidateNameEdit(string text)
    {
        //name in DB is varchar(100)
        const int CHAR_LIMIT = 100;

        // Set value of first name to text
        editedStoreInfo.Name = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> uder name to Too Long
            ErrorTooLong("Name", ref nameErrorEdit, CHAR_LIMIT);
            isNameValidEdit = false;
        }
        else if (string.IsNullOrWhiteSpace(text) &&
        !text.All(c => Char.IsLetter(c) || c == ' ' || c == '-')) // Check if text contains only valid characters
        {
            // Set the error <p> under name to "Not Alphabetical"
            ErrorNotAlpha("Name", ref nameErrorEdit);
            isNameValidEdit = false;
        }

        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref nameErrorEdit);
            // Is text length greater than 0?
            isNameValidEdit = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetEditDisabled();
    }

    @* method used to validate the Address of the store being added *@
    private void ValidateAddressEdit(string text)
    {
        //address in DB is varchar(100)
        const int CHAR_LIMIT = 100;

        editedStoreInfo.Address = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> under address to Too Long
            ErrorTooLong("Address", ref addressErrorEdit, CHAR_LIMIT);
            isAddressValidEdit = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref addressErrorEdit);
            // Is text length greater than 0?
            isAddressValidEdit = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetEditDisabled();
    }

    @* method used to validate the city of the store being added *@
    private void ValidateCityEdit(string text)
    {
        //City in DB is varchar(100)
        const int CHAR_LIMIT = 100;

        editedStoreInfo.City = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> under city to Too Long
            ErrorTooLong("City", ref cityErrorEdit, CHAR_LIMIT);
            isCityValidEdit = false;
        }
        else if (string.IsNullOrWhiteSpace(text) &&
        !text.All(c => Char.IsLetter(c) || c == ' ' || c == '-')) // Check if text contains only valid characters
        {
            //set the error <p> under city to Not Alphabetical
            ErrorNotAlpha("City", ref cityErrorEdit);
            isCityValidEdit = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref cityErrorEdit);
            // Is text length greater than 0?
            isCityValidEdit = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetEditDisabled();
    }

    @* method used to validate the state of the store being added *@
    private void ValidateStateEdit(string text)
    {
        //City in DB is varchar(25)
        const int CHAR_LIMIT = 25;

        editedStoreInfo.State = text;

        //check the length of the text
        if (text.Length > CHAR_LIMIT)
        {
            //set the error <p> under State to Too Long
            ErrorTooLong("State", ref stateErrorEdit, CHAR_LIMIT);
            isStateValidEdit = false;
        }
        else if (string.IsNullOrWhiteSpace(text) &&
        !text.All(c => Char.IsLetter(c) || c == ' ' || c == '-')) // Check if text contains only valid characters
        {
            //set the error <p> under state to Not Alphabetical
            ErrorNotAlpha("State", ref stateErrorEdit);
            isStateValidEdit = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref stateErrorEdit);
            // Is text length greater than 0?
            isStateValidEdit = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetEditDisabled();
    }
    @* method used to valisdate the zip code of the store being added *@
    private void ValidateZipEdit(string text)
    {
        //Zip in DB is varchar(10)
        const int CHAR_LIMIT = 10;
        editedStoreInfo.Zip = text;

        //check the lenght of the text
        if (text.Length > CHAR_LIMIT)
        {
            //text is too long
            ErrorTooLong("Zip", ref zipErrorEdit, CHAR_LIMIT);
            isZipValidEdit = false;
        }
        else if (!text.All(c => char.IsDigit(c) || c == '-' || c == ' ')) // Check if ZIP code contains only numbers and hyphens
        {
            //sets the error that there should be no letters in the zip
            ErrorNotNumeric("Zip", ref zipErrorEdit);
            isZipValidEdit = false;
        }
        else
        {
            //Clear error message (none needed for blank box)
            ClearError(ref zipErrorEdit);
            //is thetext length more than 0
            isZipValidEdit = IsTextPresent(text);
        }

        // Determine if button should be disabled
        SetEditDisabled();
    }
    @* vmethod used to validate the width of the store being added *@
    private void ValidateWidthEdit(string text)
    {
        editedStoreInfo.Width = text;

        isWidthValidEdit = IsTextPresent(text);
        SetEditDisabled();
    }
    @* method used to validate the height of the store being added *@
    private void ValidateLengthEdit(string text)
    {
        editedStoreInfo.Length = text;

        isLengthValidEdit = IsTextPresent(text);
        SetEditDisabled();
    }

    @* function to get the url of the image. This calls the JS method getBackgroundImageUrl that grabs the URL form the imageInput style tag *@
    private async Task<string> getImageUrlAdd()
    {
        string strImageUrl = await JS.InvokeAsync<string>("getBackgroundImageUrl", "addModalStoreBlueprint");
        return strImageUrl;
    }

    @* function to get the url of the image. This calls the JS method getBackgroundImageUrl that grabs the URL form the imageInput style tag *@
    private async Task<string> getImageUrlEdit()
    {
        string strImageUrl = await JS.InvokeAsync<string>("getBackgroundImageUrl", "editModalStoreBlueprint");

        isBlueprintValidEdit = true;
        SetEditDisabled();

        return strImageUrl;
    }
}