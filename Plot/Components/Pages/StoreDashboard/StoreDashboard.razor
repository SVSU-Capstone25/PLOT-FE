@* Filename: Stores.razor
Part of Project: PLOT

File Purpose:
This is the Stores dashboard page component

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/12/2025)

*@

@page "/store-dashboard"

@inject NavigationManager Navigation
@inject StoresHttpClient StoresHttpClient

@using System.Drawing;
@using System.IO;

<PageTitle>Store Dashboard</PageTitle>

@* Div to hold the stores *@
<div class="d-flex flex-wrap gap-4">

    @* loop to generate a card for each store that exists *@
    @foreach (var store in stores)
    {
    <Card>
        <a href="@($"/floorsets/{store.TUID}")">
            <CardImage Image="https://placecats.com/300/200" />
        </a>
        <CardBody>
            <CardTitle>
                <a class="text-truncate" href="@($"/floorsets/{store.TUID}")">
                    @store.CITY , @store.STATE
                </a>
            </CardTitle>
            <Dropdown Class="Dropdown" Id="@($"{store.NAME}{store.TUID}Dropdown")" LabelText="Store">
                <DropdownLink href="@($"/floorsets/{store.TUID}")" Icon="fa-solid fa-note-sticky">Floorsets
                </DropdownLink>

                                <DropdownLink @onclick="async () => await OnEditClick(store)" href="#editStoreModal"
                                    Icon="fa-solid fa-pen-to-square" data-bs-target="@($"#edit-store-{store.TUID}")"
                                    data-bs-toggle="modal">
                                    Edit</DropdownLink>

                                <DropdownLink Icon="fa-solid fa-trash-can" data-bs-target="@($"#delete-store-{store.TUID}")"
                                    data-bs-toggle="modal">
                                    Delete
                                </DropdownLink>
                            </Dropdown>
                        </CardBody>
                    </Card>

                    <EditStoreModal id="@($"update-user-modal-{store.TUID}")" User="store" UpdateStores="UpdateStores" />
                

                    @* Delete store modal *@
                    <Modal id="@($"delete-store-{store.TUID}")" class="standard">
                        <ModalHeader Title="Confirm Deletion" Variant="danger" />
                        <form @onsubmit="async () => await OnDeleteStoreSubmit(store.TUID)">
            @code {
                            private string? deleteTextInput;
                            private bool isDisabled => deleteTextInput != "DELETE";
            }
            <ModalBody>
                <h5>Are you SURE you want to delete this Store?</h5>
                <input type="text" placeholder="If so, type DELETE below" required pattern="DELETE"
                    @bind-value="deleteTextInput" @bind-value:event="oninput" />
            </ModalBody>

            <ModalFooter>
                <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                    data-bs-dismiss="modal">
                    Yes, Delete
                </Button>
            </ModalFooter>
        </form>
    </Modal>

                                                                }

    <Modal id="create-store" class="standard">
        <ModalHeader Title="Create Store" Variant="standard" />
        <EditForm Model="CreateStoreModel" OnValidSubmit="async () => await OnCreateStoreSubmit()">
            <ModalBody>

                <label>
                    Name:
                    <InputText @bind-Value="CreateStoreModel!.NAME">Name</InputText>
                </label>

                <label>
                    Address:
                    <InputText @bind-Value="CreateStoreModel!.ADDRESS">Address</InputText>
                </label>

                <label>
                    City:
                    <InputText @bind-Value="CreateStoreModel!.CITY">City</InputText>
                </label>

                <label>
                    State:
                    <InputText @bind-Value="CreateStoreModel!.STATE">State</InputText>
                </label>

                <label>
                    Zip:
                    <InputText @bind-Value="CreateStoreModel!.ZIP">Zip</InputText>
                </label>

                <label>
                    Width:
                    <InputNumber @bind-Value="CreateStoreModel!.WIDTH" />
                </label>

                <label>
                    Length:
                    <InputNumber @bind-Value="CreateStoreModel!.LENGTH" />
                </label>

                <InputFile OnChange="OnImageUpload" />
            </ModalBody>
            <ModalFooter>
                <Button TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                    Create
                </Button>
            </ModalFooter>
        </EditForm>
    </Modal>

    <Button Class="position-fixed bottom-0 end-0 m-3" TextAlignment="center" Variant="primary" Icon="fa-solid fa-plus"
        data-bs-toggle="modal" data-bs-target="#create-store">
        Add Store
    </Button>
</div>

@code {
    private List<Data.Models.Stores.Store> stores = new List<Data.Models.Stores.Store>();

    [SupplyParameterFromForm] private Data.Models.Stores.CreateStore? CreateStoreModel { get; set; }
    [SupplyParameterFromForm] private Data.Models.Stores.UpdatePublicInfoStore? EditStoreModel { get; set; }

    protected override void OnInitialized()
    {
        CreateStoreModel ??= new();
        EditStoreModel ??= new();
    }

    private async Task UpdateStores()
    {
        var response = await StoresHttpClient.GetListOfStores();

        if (response != null)
        {
            stores = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateStores();
    }

    private async Task OnCreateStoreSubmit()
    {

        if (CreateStoreModel != null)
        {
            await StoresHttpClient.CreateStore(CreateStoreModel);
            await UpdateStores();
        }

    }

    private async Task OnEditClick(Data.Models.Stores.Store store)
    {
        await Task.Run(() => Console.WriteLine("Edit store"));
        await UpdateStores();

    }

    private async Task OnDeleteStoreSubmit(int storeId)
    {
        await StoresHttpClient.DeleteStore(storeId);
        await UpdateStores();
    }

    private async Task OnEditStoreSubmit(int storeId)
    {
        await Task.Run(() => Console.WriteLine("Update store: " + storeId));

        if (EditStoreModel != null)
        {
            await StoresHttpClient.UpdatePublicInfo(storeId, EditStoreModel);
            await UpdateStores();
        }
    }

    private async Task OnImageUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();

        if (CreateStoreModel != null)
        {
            CreateStoreModel!.BLUEPRINT_IMAGE = bytes;
        }
        else if (EditStoreModel != null)
        {
            EditStoreModel!.BLUEPRINT_IMAGE = bytes;
        }
    }
}
