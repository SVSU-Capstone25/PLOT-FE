@* Filename: Stores.razor
Part of Project: PLOT

File Purpose:
This is the Stores dashboard page component

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/12/2025)

*@

@page "/store-dashboard"

@inject NavigationManager Navigation
@inject StoresHttpClient StoresHttpClient
@inject IJSRuntime JS

@using System.Drawing;
@using System.IO;

<PageTitle>Store Dashboard</PageTitle>

@* Div to hold the stores *@
<div class="d-flex flex-wrap gap-4">

    @* loop to generate a card for each store that exists *@
    @foreach (var store in stores)
    {
        var ImageSrc = store.BLUEPRINT_IMAGE != null ?
        $"data:image/jpeg;base64,{Convert.ToBase64String(store.BLUEPRINT_IMAGE)}" :
        "https://placecats.com/300/200";

    <Card>
        <a href="@($"/floorsets/{store.TUID}")" class="w-100 ratio ratio-4x3">
            <CardImage Image="@ImageSrc" />
        </a>
        <CardBody>
            <CardTitle>
                <a class="text-truncate" href="@($"/floorsets/{store.TUID}")">
                    @store.CITY , @store.STATE
                </a>
            </CardTitle>
            <Dropdown Class="Dropdown" Id="@($"{store.NAME}{store.TUID}Dropdown")" LabelText="Store">
                <DropdownLink href="@($"/floorsets/{store.TUID}")" Icon="fa-solid fa-note-sticky">Floorsets
                </DropdownLink>

                    <DropdownLink @onclick="async () => await OnEditClick(store)" href="#editStoreModal"
                        Icon="fa-solid fa-pen-to-square" data-bs-target="@($"#edit-store-{store.TUID}")"
                        data-bs-toggle="modal">
                        Edit</DropdownLink>

                    <DropdownLink Icon="fa-solid fa-trash-can" data-bs-target="@($"#delete-store-{store.TUID}")"
                        data-bs-toggle="modal">
                        Delete
                    </DropdownLink>
                </Dropdown>
            </CardBody>
        </Card>

        <EditStoreModal id="@($"edit-store-{store.TUID}")" Store="store" UpdateStores="UpdateStores" StoreId="store.TUID" />


        @* Delete store modal *@
        <Modal id="@($"delete-store-{store.TUID}")" class="standard">
            <ModalHeader Title="Confirm Deletion" Variant="danger" />
            <form @onsubmit="async () => await OnDeleteStoreSubmit(store.TUID)">
            @code {
                private string? deleteTextInput;
                private bool isDisabled => deleteTextInput != "DELETE";
            }
            <ModalBody>
                <h5>Are you SURE you want to delete this Store?</h5>
                <input type="text" placeholder="If so, type DELETE below" required pattern="DELETE"
                    @bind-value="deleteTextInput" @bind-value:event="oninput" />
            </ModalBody>

            <ModalFooter>
                <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" disabled="@isDisabled"
                    data-bs-dismiss="modal">
                    Yes, Delete
                </Button>
            </ModalFooter>
        </form>
    </Modal>

        }

    <AddStoreModal id="create-store" UpdateStores="UpdateStores" />

    <Button Class="position-fixed bottom-0 end-0 m-3" TextAlignment="center" Variant="primary" Icon="fa-solid fa-plus"
        data-bs-toggle="modal" data-bs-target="#create-store">
        Add Store
    </Button>
</div>

@code {
    private List<Data.Models.Stores.Store> stores = new List<Data.Models.Stores.Store>();


    private async Task UpdateStores()
    {
        var response = await StoresHttpClient.GetListOfStores();

        if (response != null)
        {
            stores = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateStores();
    }

    private async Task OnEditClick(Data.Models.Stores.Store store)
    {
        await Task.Run(() => Console.WriteLine("Edit store"));
        await JS.InvokeVoidAsync("SetBackgroundImage", store.TUID + "-container",
        "data:image/png;base64," + Convert.ToBase64String(store.BLUEPRINT_IMAGE!));
        await UpdateStores();

    }

    private async Task OnDeleteStoreSubmit(int storeId)
    {
        await StoresHttpClient.DeleteStore(storeId);
        await UpdateStores();

    }
}
