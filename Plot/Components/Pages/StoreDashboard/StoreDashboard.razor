@* Filename: Stores.razor
Part of Project: PLOT

File Purpose:
This is the Stores dashboard page component

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/12/2025)

*@

@page "/store-dashboard"
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Store Dashboard</PageTitle>

@* Div to hold the stores *@
<div class="horizontal-items">
    @* First store hard coded *@
    <Card CardText="Flint, MI" CardImage="img/LayoutPhotoExample.png">
        <Dropdown Class="Test Dropdown" Id="flintDropdown"
            DropdownText="@(new List<string> { "Floorsets", "Edit", "Delete" })"
            DropdownLinks="@(new List<string> { "http://localhost:8080/floorsets/Flint, MI/3192 S Linden Rd, Flint, MI 48507", "#editStoreModal", "#deleteStoreModal" })"
            LabelText="Store"
            DropdownIcons="@(new List<string> { "fa-solid fa-note-sticky", "fa-solid fa-pen-to-square", "fa-solid fa-trash-can" })" />
    </Card>

    @* Second store hard coded *@
    <Card CardText="Dallas, TX" CardImage="img/LayoutPhotoExample.png">
        <Dropdown Class="Test Dropdown" Id="DallasDropdown"
            DropdownText="@(new List<string> { "Floorsets", "Edit", "Delete" })"
            DropdownLinks="@(new List<string> { "http://localhost:8080/floorsets/Dallas, TX/8430 Abrams Rd, Dallas, TX 75243", "#editStoreModal", "#deleteStoreModal" })"
            LabelText="Store"
            DropdownIcons="@(new List<string> { "fa-solid fa-note-sticky", "fa-solid fa-pen-to-square", "fa-solid fa-trash-can" })" />
    </Card>

    @* Third store hard coded *@
    <Card CardText="Utica, MI" CardImage="img/LayoutPhotoExample.png">
        <Dropdown Class="Test Dropdown" Id="UticaDropdown"
            DropdownText="@(new List<string> { "Floorsets", "Edit", "Delete" })"
            DropdownLinks="@(new List<string> { "http://localhost:8080/floorsets/Utica, MI/13287 Hall Rd, Utica, MI 48315", "#editStoreModal", "#deleteStoreModal" })"
            LabelText="Store"
            DropdownIcons="@(new List<string> { "fa-solid fa-note-sticky", "fa-solid fa-pen-to-square", "fa-solid fa-trash-can" })" />
    </Card>

    @* modals for the submenus of the ... button on the card *@
    @* HARD CODED MODAL: edit store modal *@
    <Modal Title="Edit Store" Id="editStoreModal" Class="modal-dialog modal-lg">
        <BodyContent>
            <h5>Edit Store</h5>
            <p>Edit this store's information</p>
            @* Name and location *@
            <div class="modal-split-container">
                <div class="modal-split-left-side">
                    <TextInput LabelOnTop="false" Id="editModalStoreName" Label="Name" Placeholder="Store Name" />
                    <TextInput LabelOnTop="false" Id="editModalStoreLocation" Label="Location"
                        Placeholder="Store Address" />
                </div>
                @* upload image for store component *@
                <div class="modal-split-right-side">
                    <ImageInput Label="Upload Image" Id="ExampleImageInputEdit" Width="330px" Height="300px" />
                </div>
            </div>
            @* Employees section: EMPLOYEES HARD CODED *@
            <h5>Employees</h5>
            <div id="employeesEdit" class="horizontal-items">
                <div id="editStoreAddUserDiv" class="circle-container">
                    <button class="circle btn-style" @onclick="ShowAddUserEditStoreModal"><i
                            class="fa-solid fa-plus"></i></button>
                    <p class="circle-name">Add Employee</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">JS</span>
                    </div>
                    <p class="circle-name">James Smith</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">EM</span>
                    </div>
                    <p class="circle-name">Emma Miller</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">OL</span>
                    </div>
                    <p class="circle-name">Oliver Lewis</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">SC</span>
                    </div>
                    <p class="circle-name">Sophia Carter</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">WL</span>
                    </div>
                    <p class="circle-name">William Lee</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">AV</span>
                    </div>
                    <p class="circle-name">Ava Vasquez</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">BD</span>
                    </div>
                    <p class="circle-name">Benjamin Davis</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">CL</span>
                    </div>
                    <p class="circle-name">Charlotte Lopez</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">EL</span>
                    </div>
                    <p class="circle-name">Ethan Long</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">GM</span>
                    </div>
                    <p class="circle-name">Grace Mitchell</p>
                </div>
            </div>
        </BodyContent>

        <FooterContent>
            <p style="margin-left: auto;"></p>
            <Button Class="Test Button" TextAlignment="center" Variant="primary"
                OnClickFunction="updateStoreInformation">Update Store</Button>
        </FooterContent>
    </Modal>

    @* HARD CODED MODAL: Delete store modal *@
    <Modal Title="Confirm Deletion" Id="deleteStoreModal" Class="standard">
        <BodyContent>
            <h5>Are you SURE you want to delete this store?</h5>
            <TextInput Id="deleteModalTextInput" Label="If so, type DELETE below" />
        </BodyContent>

        <FooterContent>
            <p style="margin-left: auto;"></p>
            <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="deleteStore">Yes,
                Delete</Button>
        </FooterContent>
    </Modal>
</div>

@* + Add Store button fixed to the bottom right of the screen *@
<button class="fixed-bottom-right">
    @* add store button that brings up the Add Store modal *@
    <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="ShowAddStoreModal"
        Icon="fa-solid fa-plus">
        Add Store
    </Button>
</button>

@* Add Store modal *@
<Modal Title="Add Store" Id="addStoreModal" Class="modal-dialog modal-lg" OnCancelFunction="ClosingAddStoreModal">
    <BodyContent>
        <h5>Add Store</h5>
        <p>Add a new store with it's own unique store blueprint.</p>
        @* Name and location (labels and input boxes)*@
        <div class="modal-split-container">
            <div class="modal-split-left-side">
                <TextInput LabelOnTop="false" Id="addModalStoreName" Label="Name" Placeholder="Store Name" />
                <TextInput LabelOnTop="false" Id="addModalStoreLocation" Label="Location" Placeholder="Store Address" />
            </div>
            @* upload image for store component *@
            <div class="modal-split-right-side">
                <ImageInput Label="Upload Image" Id="ExampleImageInputAdd" Width="330px" Height="300px" />
            </div>
        </div>
        @* Employees section*@
        <h5>Employees</h5>
        <div id="employeesAdd" class="horizontal-items">
            <div id="addStoreAddUserDiv" class="circle-container">
                <button class="circle btn-style" @onclick="ShowAddUserAddStoreModal"><i
                        class="fa-solid fa-plus"></i></button>
                <p class="circle-name">Add Employee</p>
            </div>
        </div>
    </BodyContent>

    <FooterContent>
        @* button for adding the store *@
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="createNewStore">Add
            Store</Button>
    </FooterContent>
</Modal>


@* Add User modal for when an employee is being added to a store being created. This is trigged when the + Add Employee button is
    clicked in the Edit or Add Store modal *@
<Modal Title="Add User" id="AddUserModalAddStore" Class="modal-dialog"
    onCancelFunction="ClosingAddUserModalForAddStore">
    <BodyContent>
        <h3>Select a user to add</h3>
        @* This will be populated with the list of users from the DB
            Text is just their name for now, while value could be something like "TUID,FIRST_NAME,LAST_NAME" *@
        <OptionInput ID="AddStoreUserOptionsInput" Class="optionInput" label="Select a user to add"
            optionsText="@UserOptionsText" optionsValues="@UserOptionsValues"
            OnSelectFunction="SetUserThatWillBeAddedToAStore" />

    </BodyContent>

    <FooterContent>
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary"
            OnClickFunction="AddStoreAddNewEmployee">Add
            User</Button>
    </FooterContent>

</Modal>

@* add new user to an existing store. This is when editing a store *@
<Modal Title="Add User" id="AddUserModalEditStore" Class="modal-dialog"
    onCancelFunction="ClosingAddUserModalForEditStore">
    <BodyContent>
        <h3>Select a user to add</h3>
        @* This will be populated with the list of users from the DB
            Text is just their name for now, while value could be something like "TUID,FIRST_NAME,LAST_NAME" *@
        <OptionInput ID="EditStoreUserOptionsInput" Class="optionInput" label="Select a user to add"
            optionsText="@UserOptionsText" optionsValues="@UserOptionsValues"
            OnSelectFunction="SetUserThatWillBeAddedToAStore" />

    </BodyContent>

    <FooterContent>
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary"
            OnClickFunction="EditStoreAddNewEmployee">Add
            User</Button>
    </FooterContent>

</Modal>




<script>

    @* event listeners that load when the page loads  *@
        document.addEventListener("DOMContentLoaded", function () {
            @* Not sure where to add constants, so I am placing it here for now.
                This is used for setting modals z-index back to their default value*@
            const DEFAULT_MODAL_Z_INDEX_VALUE = 1050;
            @* Logic to remove the faded background when clicking off of layered modals *@
                document.addEventListener("click", function (event) {
                    @* if the clicked item is a modal with the "fade class, then change the Z-index of the modals being returned to " *@
                if (event.target.matches(".fade")) {
                        ChangeZIndexOfComponent("addStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                        ChangeZIndexOfComponent("editStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                    }
                });
            @* Logic to remove the faded background when hitting "Escape" when closing layered modals and change the Z-index of the modals being returned to*@
                document.addEventListener("keydown", function () {
                    if (event.key === "Escape") {
                        ChangeZIndexOfComponent("addStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                        @* put the modal being returned to back in focus (closing with escape doesn't return the focus) *@
                        const addStoreModal = document.getElementById("addStoreModal");
                        addStoreModal.focus();

                        ChangeZIndexOfComponent("editStoreModal", DEFAULT_MODAL_Z_INDEX_VALUE);
                        @* put the modal being returned to back in focus (closing with escape doesn't return the focus) *@
                        const editStoreModal = document.getElementById("editStoreModal");
                        editStoreModal.focus();
                    }
                })

        });


    // function for adding an employee to whatever modal needs to see employees. 
    // Places a circle with their name and initials
    function addEmployee(name, initials, targetDiv) {
        //Get the employees div
        const employeesDiv = document.getElementById(targetDiv);

        //Create the main container div for the user  
        const circleContainer = document.createElement("div");
        circleContainer.classList.add("circle-container");

        //Create the circle div
        const circle = document.createElement("div");
        circle.classList.add("circle");

        //Create the initials span
        const initialsSpan = document.createElement("span");
        initialsSpan.classList.add("initials");
        initialsSpan.textContent = initials;

        //Create the name paragraph
        const nameParagraph = document.createElement("p");
        nameParagraph.classList.add("circle-name");
        nameParagraph.textContent = name;

        //Append initials span to the circle
        circle.appendChild(initialsSpan);
        //Append circle and name to the main container
        circleContainer.appendChild(circle);
        circleContainer.appendChild(nameParagraph);

        //Append the circle container to the employees div
        employeesDiv.appendChild(circleContainer);
    }

    @* helper function to get the value from the Option input component in the 
        addEmployee modal when trying to add an employee to a store *@
        function GetEmployeeBeingAddedToStore(targetDiv, strUserValues) {
            @* const employeeOptionInput = document.getElementById(targetDropdownID);
            const strUserValues = employeeOptionInput.value; *@

                @* split the value of the option on commas (That's how I have them stored at the moment) *@
            const arrSplitStrUserValues = strUserValues.split(",");
            @* Get the first and last name *@
            const strFirstName = arrSplitStrUserValues[1];
            const strLastName = arrSplitStrUserValues[2];
            const strName = strFirstName + " " + strLastName;
            @* get the initials fro the names *@
            const strInitials = strFirstName.charAt(0) + strLastName.charAt(0);
            @* create the employee fro the name and initials *@
                addEmployee(strName, strInitials, targetDiv)
        }



    function HideModal(modalId) {
        console.log(modalId);
        /* Danielle Smith - 3/17/2025
        hide modal function that works with button component and id of modal passed in
        call remove modal backdrop twice because opening the delete modal makes two of them for some reason
        we will need to fix this in the future */
        document.getElementById(`${modalId}`).classList.remove('show');
        document.querySelector('.modal-backdrop')?.remove();
        document.querySelector('.modal-backdrop')?.remove();
    }

    function DeleteStore() {
        /* Danielle Smith - 3/18/2025
        function that mimics deleting a store. still checks if the text equals delete.
        if so, close the modal to mimic deleting a store. clear the text box for next use
        otherwise, alert the user */
        let deleteStr = document.getElementById("deleteModalTextInput").value;
        if (deleteStr.equals("DELETE")) {
            document.getElementById("deleteModalTextInput").value = "Delete";
            HideModal("deleteStoreModal");
        }
        else {
            alert("Incorrect input.")
        }
    }

    // show the whichever modal ID is passed into it
    function showModal(modalId) {
        var modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }

    // update the text in an input box
    // This is used right now for just changing the text
    // in the demo for the program
    function updateInputText(inputId, newValue) {
        document.getElementById(inputId).value = newValue;
    }

    @* function to remove all of the elements from a div except for a specific one
        This is being used to clear out the Users in the Add Store modal. The Add Users button
        should stay though. *@
        function clearDivExceptById(divId, exceptionId) {
            const div = document.getElementById(divId);

            @* Lopp through the div children and remove all but the element specified *@
        for (let i = div.children.length - 1; i >= 0; i--) {
                if (div.children[i].id !== exceptionId) {
                    div.children[i].remove();
                }
            }
        }
    @* function to change the z-index of a component
            This was initially made for layering modals on top of eaach other*@
        function ChangeZIndexOfComponent(targetComponentID, intZValue) {
            const component = document.getElementById(targetComponentID);
            component.style.zIndex = intZValue;
        }
</script>

@code {

    //lists to hold the value and names of users for the options inputs used to add employees to a store
    //Test
    private List<string> UserOptionsText { get; set; } = new List<string> { "initializeText" };
    private List<string> UserOptionsValues { get; set; } = new List<string> { "initializeValue" };
    //variable to hold the streing of the currently selected user when adding a user to a store (value will ve received from
    //optionsInput)
    private string strUserValueToAdd = "-1,Test,User";

    //function to update the optionsInput lists to display the users available to add to a store
    private void UpdateUserOptions()
    {
        //set the content of the lists of users
        UserOptionsText = new List<string> { "Homer Simpson", "Marge Simpson", "Bart Simpson", "Sideshow Bob" };
        UserOptionsValues = new List<string> { "1,Homer,Simpson", "2,Marge,Simpson", "3,Bart,Simpson", "4,Sideshow,Bob" };
        //set the starter value to the first value
        if (UserOptionsValues.Count > 0)
        {
            SetUserThatWillBeAddedToAStore(UserOptionsValues[0]);
        }
    }
    //function that sets the user (strUserValueToAdd variable) that will be added to the store
    private void SetUserThatWillBeAddedToAStore(string selectedOption)
    {
        strUserValueToAdd = selectedOption;
    }

    //change text on boxes ONLY FOR DEMO. This has one for each location
    private async Task changeInputTextFlint()
    {
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreLocation", "3192 S Linden Rd, Flint, MI 48507");
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreName", "Flint, MI");
    }
    private async Task changeInputTextDallas()
    {
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreLocation", "35400 Brodie Ln Ste 240, Austin, TX 78745");
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreName", "South Austin, TX");
    }
    private async Task changeInputTextUtica()
    {
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreLocation", "13287 Hall Rd, Utica, MI 48315");
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreName", "Utica, MI");
    }

    // show modals section

    //+ Add Store modal
    private async Task ShowAddStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "addStoreModal");
    }
    //Edit Store modal
    private async Task ShowEditStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "editStoreModal");
    }
    //Delete store modal
    private async Task ShowDeleteStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "deleteStoreModal");
    }
    //Add User modal for when creating a new store
    private async Task ShowAddUserAddStoreModal()
    {
        //get available list of users to populate optionsinput
        UpdateUserOptions();
        //show the add user modal for creating a new store
        await JS.InvokeVoidAsync("showModal", "AddUserModalAddStore");
        //dim the add store modal
        await JS.InvokeVoidAsync("ChangeZIndexOfComponent", "addStoreModal", "1");
    }
    //Add User modal for when editing a store
    private async Task ShowAddUserEditStoreModal()
    {
        //update the available users for the options input
        UpdateUserOptions();
        //show the add user modal for Editing a store
        await JS.InvokeVoidAsync("showModal", "AddUserModalEditStore");
        //dim the edit store modal
        await JS.InvokeVoidAsync("ChangeZIndexOfComponent", "editStoreModal", "1");
    }
    //function used for closing layered up modals to reset the z-value of the underlying modals back to theor default value
    private async void ResetZIndexOfComponent(string strComponentID)
    {
        await JS.InvokeVoidAsync("ChangeZIndexOfComponent", strComponentID, "1050");
    }

    // Basic button fucntions

    //general function to take us to the floorsets page for a specidifc store
    private void floorsetsSubmenuClicked(string strName, string strLocation)
    {
        Navigation.NavigateTo("/floorsets/" + strName + "/" + strLocation);
    }
    //function to take us to the floorsets page for the dallas store
    private void floorsetsSubmenuClickedDallas()
    {
        floorsetsSubmenuClicked("Dallas, TX", "8430 Abrams Rd, Dallas, TX 75243");
    }
    //function to take us to the floorsets page for the flint store
    private void floorsetsSubmenuClickedFlint()
    {
        floorsetsSubmenuClicked("Flint, MI", "3192 S Linden Rd, Flint, MI 48507");
    }
    //function to take us to the floorsets page for the utica store
    private void floorsetsSubmenuClickedUtica()
    {
        floorsetsSubmenuClicked("Utica, MI", "13287 Hall Rd, Utica, MI 48315");
    }

    //test button to see if it was clicked
    private void optionClicked()
    {
        Console.WriteLine("OPTION CLICKED");
    }
    //test button to see if it was clicked
    private void testFunction()
    {

    }
    //test button to see if it was clicked
    private void threeButtons()
    {
        Console.WriteLine("THREE DOTS");
    }

    //function to create a new store
    private void addStore()
    {

    }

    //functun for the three dots on a store
    //opens an optionsinput(component) for each store
    private void StoreOpionInput()
    {

    }
    //function for deleting a store
    private async void deleteStore()
    {
        Console.WriteLine("DELETE THE STORE");
        await JS.InvokeVoidAsync("DeleteStore");
    }
    //function for creating a store
    private async void createNewStore()
    {
        Console.WriteLine("CREATE NEW STORE");
        //clear out the added users for the new store
        await JS.InvokeVoidAsync("clearDivExceptById", "employeesAdd", "addStoreAddUserDiv");
        //close the modal
        await JS.InvokeVoidAsync("HideModal", "addStoreModal");
    }
    //function for adding a new employee when editing a store
    private async void EditStoreAddNewEmployee()
    {
        Console.WriteLine("ADD NEW EMPLOYEE");
        //add an employee to the edit store modal
        await JS.InvokeVoidAsync("GetEmployeeBeingAddedToStore", "employeesEdit", strUserValueToAdd);
        //await JS.InvokeVoidAsync("doNothing");

    }
    //function for adding a new employee when editing a store
    private async void AddStoreAddNewEmployee()
    {
        Console.WriteLine("ADD NEW EMPLOYEE");
        //add an employee to the add store modal
        await JS.InvokeVoidAsync("GetEmployeeBeingAddedToStore", "employeesAdd", strUserValueToAdd);
    }
    //function fir updating a store's info
    private void updateStoreInformation()
    {
        Console.WriteLine("UPDATE THE STORE");
    }
    //function that call the JS function to clear the users from the Add Store Modal.
    //This is used if employees are added, but then they decide to stop the creation of the store
    private async void ClosingAddStoreModal()
    {
        //clear out the added users for the new store
        await JS.InvokeVoidAsync("clearDivExceptById", "employeesAdd", "addStoreAddUserDiv");
    }
    //function for closing the add user modal that's used for adding employees to a new store being created
    private void ClosingAddUserModalForAddStore()
    {
        ResetZIndexOfComponent("addStoreModal");
    }
    //function for closing the add user modal that's used for adding employees to an existing store
    private void ClosingAddUserModalForEditStore()
    {
        ResetZIndexOfComponent("editStoreModal");
    }
}