@* Filename: Stores.razor
Part of Project: PLOT

File Purpose:
This is the Stores dashboard page component

Program Purpose:
The purpose of PLOT is to allow users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/12/2025)

*@

@page "/store-dashboard"
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Store Dashboard</PageTitle>

@* Div to hold the stores *@
<div class="horizontal-items">
    @* First store hard coded *@
    <Card CardText="Flint, MI" CardImage="img/LayoutPhotoExample.png">
        <Dropdown Class="Test Dropdown" Id="flintDropdown"
            DropdownText="@(new List<string> { "Floorsets", "Edit", "Delete" })"
            DropdownLinks="@(new List<string> { "http://localhost:8080/floorsets/Flint, MI/3192 S Linden Rd, Flint, MI 48507", "#editStoreModal", "#deleteStoreModal" })"
            LabelText="Store"
            DropdownIcons="@(new List<string> { "fa-solid fa-note-sticky", "fa-solid fa-pen-to-square", "fa-solid fa-trash-can" })" />
    </Card>

    @* Second store hard coded *@
    <Card CardText="Dallas, TX" CardImage="img/LayoutPhotoExample.png">
        <Dropdown Class="Test Dropdown" Id="DallasDropdown"
            DropdownText="@(new List<string> { "Floorsets", "Edit", "Delete" })"
            DropdownLinks="@(new List<string> { "http://localhost:8080/floorsets/Dallas, TX/8430 Abrams Rd, Dallas, TX 75243", "#editStoreModal", "#deleteStoreModal" })"
            LabelText="Store"
            DropdownIcons="@(new List<string> { "fa-solid fa-note-sticky", "fa-solid fa-pen-to-square", "fa-solid fa-trash-can" })" />
    </Card>

    @* Third store hard coded *@
    <Card CardText="Utica, MI" CardImage="img/LayoutPhotoExample.png">
        <Dropdown Class="Test Dropdown" Id="UticaDropdown"
            DropdownText="@(new List<string> { "Floorsets", "Edit", "Delete" })"
            DropdownLinks="@(new List<string> { "http://localhost:8080/floorsets/Utica, MI/13287 Hall Rd, Utica, MI 48315", "#editStoreModal", "#deleteStoreModal" })"
            LabelText="Store"
            DropdownIcons="@(new List<string> { "fa-solid fa-note-sticky", "fa-solid fa-pen-to-square", "fa-solid fa-trash-can" })" />
    </Card>

    @* modals for the submenus of the ... button on the card *@
    @* HARD CODED MODAL: edit store modal *@
    <Modal Title="Edit Store" Id="editStoreModal" Class="modal-dialog modal-lg">
        <BodyContent>
            <h5>Edit Store</h5>
            <p>Edit this store's information</p>
            @* Name and location *@
            <div class="row">
                <div class="col-lg-6">
                    <TextInput LabelOnTop="false" Id="editModalStoreName" Label="Name" Placeholder="Store Name" />
                    <TextInput LabelOnTop="false" Id="editModalStoreLocation" Label="Location"
                        Placeholder="Store Address" />
                </div>
                @* upload image for store component *@
                <div class="col-lg-6">
                    <ImageInput Label="Upload Image" Id="ExampleImageInputEdit" Width="330px" Height="300px" />
                </div>
            </div>
            @* Employees section: EMPLOYEES HARD CODED *@
            <h5>Employees</h5>
            <div id="employeesEdit" class="horizontal-items">
                <div class="circle-container">
                    <button class="circle btn-style" @onclick="addNewEmployee"><i class="fa-solid fa-plus"></i></button>
                    <p class="name">Add Employee</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">JS</span>
                    </div>
                    <p class="name">James Smith</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">EM</span>
                    </div>
                    <p class="name">Emma Miller</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">OL</span>
                    </div>
                    <p class="name">Oliver Lewis</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">SC</span>
                    </div>
                    <p class="name">Sophia Carter</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">WL</span>
                    </div>
                    <p class="name">William Lee</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">AV</span>
                    </div>
                    <p class="name">Ava Vasquez</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">BD</span>
                    </div>
                    <p class="name">Benjamin Davis</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">CL</span>
                    </div>
                    <p class="name">Charlotte Lopez</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">EL</span>
                    </div>
                    <p class="name">Ethan Long</p>
                </div>

                <div class="circle-container">
                    <div class="circle">
                        <span class="initials">GM</span>
                    </div>
                    <p class="name">Grace Mitchell</p>
                </div>
            </div>
        </BodyContent>

        <FooterContent>
            <p style="margin-left: auto;"></p>
            <Button Class="Test Button" TextAlignment="center" Variant="primary"
                OnClickFunction="updateStoreInformation">Update Store</Button>
        </FooterContent>
    </Modal>

    @* HARD CODED MODAL: Delete store modal *@
    <Modal Title="Confirm Deletion" Id="deleteStoreModal" Class="standard" Variant="danger">
        <BodyContent>
            <h5>Are you SURE you want to delete this store?</h5>
            <TextInput Id="deleteModalTextInput" Label="If so, type DELETE below" />
        </BodyContent>

        <FooterContent>
            <p style="margin-left: auto;"></p>
            <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="deleteStore">Yes,
                Delete</Button>
        </FooterContent>
    </Modal>
</div>

@* + Add Store button fixed to the bottom right of the screen *@
<button class="fixed-bottom-right">
    @* add store button that brings up the Add Store modal *@
    <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="ShowAddStoreModal"
        Icon="fa-solid fa-plus">
        Add Store
    </Button>
</button>

@* Add Store modal *@
<Modal Title="Add Store" Id="addStoreModal" Class="modal-dialog modal-lg">
    <BodyContent>
        <h5>Add Store</h5>
        <p>Add a new store with it's own unique store blueprint.</p>
        @* Name and location (labels and input boxes)*@
        <div class="row">
            <div class="col-lg-6">
                <TextInput LabelOnTop="false" Id="addModalStoreName" Label="Name" Placeholder="Store Name" />
                <TextInput LabelOnTop="false" Id="addModalStoreLocation" Label="Location" Placeholder="Store Address" />
            </div>
            @* upload image for store component *@
            <div class="col-lg-6">
                <ImageInput Label="Upload Image" Id="ExampleImageInputAdd" Width="330px" Height="300px" />
            </div>
        </div>
        @* Employees section*@
        <h5>Employees</h5>
        <div id="employees" class="horizontal-items">
            <div class="circle-container">
                <button class="circle btn-style" @onclick="addNewEmployee"><i class="fa-solid fa-plus"></i></button>
                <p class="name">Add Employee</p>
            </div>
        </div>
    </BodyContent>

    <FooterContent>
        @* button for adding the store *@
        <p style="margin-left: auto;"></p>
        <Button Class="Test Button" TextAlignment="center" Variant="primary" OnClickFunction="createNewStore">Add
            Store</Button>
    </FooterContent>
</Modal>

<script>
    // function for adding an employee to whatever modal needs to see employees. 
    // Places a circle with their name and initials
    // NOT IN USE RIGHT NOW
    function addEmployee(name, initials, targetDiv) {
        // Get the employees div
        const employeesDiv = document.getElementById(targetDiv);

        // Create the main container div
        const circleContainer = document.createElement("div");
        circleContainer.classList.add("circle-container");

        // Create the circle div
        const circle = document.createElement("div");
        circle.classList.add("circle");

        // Create the initials span
        const initialsSpan = document.createElement("span");
        initialsSpan.classList.add("initials");
        initialsSpan.textContent = initials; // Set initials text

        // Create the name paragraph
        const nameParagraph = document.createElement("p");
        nameParagraph.classList.add("name");
        nameParagraph.textContent = name; // Set name text

        // Append initials span to the circle
        circle.appendChild(initialsSpan);
        // Append circle and name to the main container
        circleContainer.appendChild(circle);
        circleContainer.appendChild(nameParagraph);

        // Append the circle container to the employees div
        employeesDiv.appendChild(circleContainer);
    }

    function HideModal(modalId) {
        console.log(modalId);
        /* Danielle Smith - 3/17/2025
        hide modal function that works with button component and id of modal passed in
        call remove modal backdrop twice because opening the delete modal makes two of them for some reason
        we will need to fix this in the future */
        document.getElementById(`${modalId}`).classList.remove('show');
        document.querySelector('.modal-backdrop')?.remove();
        document.querySelector('.modal-backdrop')?.remove();
    }

    function DeleteStore() {
        /* Danielle Smith - 3/18/2025
        function that mimics deleting a store. still checks if the text equals delete.
        if so, close the modal to mimic deleting a store. clear the text box for next use
        otherwise, alert the user */
        let deleteStr = document.getElementById("deleteModalTextInput").value;
        if (deleteStr.equals("DELETE")) {
            document.getElementById("deleteModalTextInput").value = "Delete";
            HideModal("deleteStoreModal");
        }
        else {
            alert("Incorrect input.")
        }
    }

    // show the whichever modal ID is passed into it
    function showModal(modalId) {
        var modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }

    // update the text in an input box
    // This is used right now for just changing the text
    // in the demo for the program
    function updateInputText(inputId, newValue) {
        document.getElementById(inputId).value = newValue;
    } 
</script>

@code {
    //change text on boxes ONLY FOR DEMO. This has one for each location
    private async Task changeInputTextFlint()
    {
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreLocation", "3192 S Linden Rd, Flint, MI 48507");
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreName", "Flint, MI");
    }
    private async Task changeInputTextDallas()
    {
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreLocation", "35400 Brodie Ln Ste 240, Austin, TX 78745");
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreName", "South Austin, TX");
    }
    private async Task changeInputTextUtica()
    {
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreLocation", "13287 Hall Rd, Utica, MI 48315");
        await JS.InvokeVoidAsync("updateInputText", "editModalStoreName", "Utica, MI");
    }

    // show modals section

    //+ Add Store modal
    private async Task ShowAddStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "addStoreModal");
    }
    //Edit Store modal
    private async Task ShowEditStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "editStoreModal");
    }
    //Delete store modal
    private async Task ShowDeleteStoreModal()
    {
        await JS.InvokeVoidAsync("showModal", "deleteStoreModal");
    }

    // Basic button fucntions

    //general function to take us to the floorsets page for a specidifc store
    private void floorsetsSubmenuClicked(string strName, string strLocation)
    {
        Navigation.NavigateTo("/floorsets/" + strName + "/" + strLocation);
    }
    //function to take us to the floorsets page for the dallas store
    private void floorsetsSubmenuClickedDallas()
    {
        floorsetsSubmenuClicked("Dallas, TX", "8430 Abrams Rd, Dallas, TX 75243");
    }
    //function to take us to the floorsets page for the flint store
    private void floorsetsSubmenuClickedFlint()
    {
        floorsetsSubmenuClicked("Flint, MI", "3192 S Linden Rd, Flint, MI 48507");
    }
    //function to take us to the floorsets page for the utica store
    private void floorsetsSubmenuClickedUtica()
    {
        floorsetsSubmenuClicked("Utica, MI", "13287 Hall Rd, Utica, MI 48315");
    }

    //test button to see if it was clicked
    private void optionClicked()
    {
        Console.WriteLine("OPTION CLICKED");
    }
    //test button to see if it was clicked
    private void testFunction()
    {

    }
    //test button to see if it was clicked
    private void threeButtons()
    {
        Console.WriteLine("THREE DOTS");
    }

    //function to create a new store
    private void addStore()
    {

    }

    //functun for the three dots on a store
    //opens an optionsinput(component) for each store
    private void StoreOpionInput()
    {

    }
    //function for deleting a store
    private async void deleteStore()
    {
        Console.WriteLine("DELETE THE STORE");
        await JS.InvokeVoidAsync("DeleteStore");
    }
    //function for creating a store
    private void createNewStore()
    {
        Console.WriteLine("CREATE NEW STORE");
    }
    //function for adding a new employee
    private void addNewEmployee()
    {
        Console.WriteLine("ADD NEW EMPLOYEE");
    }
    //function fir updating a store's info
    private void updateStoreInformation()
    {
        Console.WriteLine("UPDATE THE STORE");
    }
}