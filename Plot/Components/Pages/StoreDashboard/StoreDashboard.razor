@* Filename: Stores.razor
Part of Project: PLOT

File Purpose:
This is the Stores dashboard page component

Program Purpose:
The purpose of PLOT is to allow Users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/12/2025)

*@

@page "/Store-dashboard"

@inject NavigationManager Navigation
@inject StoresHttpClient StoresHttpClient

@using System.Drawing;
@using System.IO;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Store Dashboard</PageTitle>

@* Div to hold the Stores *@
<div class="d-flex flex-wrap gap-4">

    @* loop to generate a card for each Store that exists *@
    @foreach (var Store in Stores)
    {
        var ImageSrc = Store.BLUEPRINT_IMAGE != null ?
        $"data:image/jpeg;base64,{Convert.ToBase64String(Store.BLUEPRINT_IMAGE)}" :
        "https://placecats.com/300/200";

        <Card>
            <a href="@($"/floorsets/{Store.TUID}")" class="w-100 ratio ratio-4x3">
                <CardImage Image="@ImageSrc" />
            </a>
            <CardBody>
                <CardTitle>
                    <a class="text-truncate" href="@($"/floorsets/{Store.TUID}")">
                        @Store.CITY , @Store.STATE
                    </a>
                </CardTitle>
                <Dropdown LabelText="Store">
                    <DropdownLink href="@($"/floorsets/{Store.TUID}")" Icon="fa-solid fa-note-sticky">
                        Floorsets
                    </DropdownLink>

                    <DropdownLink @onclick="async () => await OnEditClick(Store)" Icon="fa-solid fa-pen-to-square"
                        data-bs-target="@($"#edit-store-{Store.TUID}")" data-bs-toggle="modal">
                        Edit</DropdownLink>

                    <DropdownLink Icon="fa-solid fa-trash-can" data-bs-target="@($"#delete-store-{Store.TUID}")"
                        data-bs-toggle="modal">
                        Delete
                    </DropdownLink>
                </Dropdown>
            </CardBody>
        </Card>

        <EditStoreModal id="@($"edit-store-{Store.TUID}")" Store="Store" UpdateStores="UpdateStores" StoreId="Store.TUID" />

        <DeleteStoreModal Store="Store" UpdateStores="UpdateStores" />
    }

    <AddStoreModal id="create-store" UpdateStores="UpdateStores" />

    <Button Class="position-fixed bottom-0 end-0 m-3" TextAlignment="center" Variant="primary" Icon="fa-solid fa-plus"
        data-bs-toggle="modal" data-bs-target="#create-store" OnClickFunction="OnCreateClick">
        Add Store
    </Button>
</div>

@code {
    private List<Data.Models.Stores.Store> Stores = new List<Data.Models.Stores.Store>();

    private async Task UpdateStores()
    {
        var response = await StoresHttpClient.GetListOfStores();

        if (response != null)
        {
            Stores = response;

            foreach (var Store in Stores)
            {
                Console.WriteLine(Store.USER_TUIDS);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateStores();
    }

    private async Task OnEditClick(Data.Models.Stores.Store Store)
    {
        await Task.Run(() => Console.WriteLine("Edit Store"));
        await UpdateStores();

        StateHasChanged();

    }

    private void OnCreateClick()
    {
        @* usersToAdd.Clear(); *@
        @* UpdateUserOptions(); *@
        StateHasChanged();
    }
}