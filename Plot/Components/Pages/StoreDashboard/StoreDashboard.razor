@* Filename: Stores.razor
Part of Project: PLOT

File Purpose:
This is the Stores dashboard page component

Program Purpose:
The purpose of PLOT is to allow Users to easily create, manage, 
and allocate floorsets for Platos Closet. 

Author: Andrew Fulton (3/12/2025)

*@

@page "/Store-dashboard"
@inject NavigationManager Navigation
@inject StoresHttpClient StoresHttpClient
@inject ICookie Cookie
@inject JwtService JwtService
@inject ClaimParserService ClaimParserService
@inject IAuthorizationService AuthorizationService
@attribute [Authorize]

@using System.Drawing;
@using System.IO;
@using Microsoft.AspNetCore.Authorization
@using Plot.Components.PartialComponents.Card
@using Plot.Services
@using Plot.Data.Models.Stores

<PageTitle>Store Dashboard</PageTitle>

@* Div to hold the Stores *@
<div class="d-flex flex-wrap gap-4">

    @* loop to generate a card for each Store that exists *@
    @foreach (var Store in Stores)
    {
        var ImageSrc = Store.BLUEPRINT_IMAGE != null ?
        $"data:image/jpeg;base64,{Convert.ToBase64String(Store.BLUEPRINT_IMAGE)}" :
        "https://placecats.com/300/200";

        <Card>
            <a href="@($"/floorsets/{Store.TUID}")" class="w-100 ratio ratio-4x3">
                <CardImage Image="@ImageSrc" />
            </a>
            <CardBody>
                <CardTitle class="flex-grow-1">
                    <a class="text-truncate" href="@($"/floorsets/{Store.TUID}")">
                        @Store.CITY , @Store.STATE
                    </a>
                </CardTitle>
    
                <AuthorizeView Policy="Manager">
                    <Dropdown LabelText="Store">
                            <DropdownLink href="@($"/floorsets/{Store.TUID}")" Icon="fa-solid fa-note-sticky">
                        Floorsets
                            </DropdownLink>

                    <DropdownLink @onclick="async () => await OnEditClick(Store)" Icon="fa-solid fa-pen-to-square"
                        data-bs-target="@($"#edit-store-{Store.TUID}")" data-bs-toggle="modal">
                        Edit</DropdownLink>

                        <DropdownLink Icon="fa-solid fa-trash-can" data-bs-target="@($"#delete-store-{Store.TUID}")"
                            data-bs-toggle="modal">
                            Delete
                        </DropdownLink>
                    </Dropdown>
                </AuthorizeView>
            </CardBody>
        </Card>

        <AuthorizeView Policy="Manager">
            <EditStoreModal id="@($"edit-store-{Store.TUID}")" Store="Store" UpdateStores="UpdateStores" StoreId="Store.TUID" />

            <DeleteStoreModal Store="Store" UpdateStores="UpdateStores" />
        </AuthorizeView>
    }

    <AuthorizeView Policy="Owner">
        <AddStoreModal id="create-store" UpdateStores="UpdateStores" />

        <Button Class="position-fixed bottom-0 end-0 m-3" TextAlignment="center" Variant="primary"
            Icon="fa-solid fa-plus" data-bs-toggle="modal" data-bs-target="#create-store">
            Add Store
        </Button>
    </AuthorizeView>
</div>

@code {
    private List<Data.Models.Stores.Store> Stores = new List<Data.Models.Stores.Store>();

    private async Task UpdateStores()
    {
        //Get jwt from cookie
        var token = await Cookie.GetValue("Auth");

        //Get the users claims
        var userPrincipal = JwtService.GetValidClaims(token);


        if (userPrincipal != null)
        {
            //Determine if user is an owner
            var authResult = await AuthorizationService.AuthorizeAsync(userPrincipal, "Owner");

            if (authResult.Succeeded)
            {
                //Get a list of all the stores for the owner
                var response = await StoresHttpClient.GetListOfStores();

                Stores = response ?? new();

            }
            else
            {

                var currentUserTUID = ClaimParserService.GetUserId(userPrincipal);

                if (currentUserTUID != null)
                {
                    //Get list of stores based off of user TUID
                    var response = await StoresHttpClient.GetStoreAccessByUserId(currentUserTUID.Value);

                    Stores = response ?? new();
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Get instance information for the dashboard
        if (firstRender)
        {
            await UpdateStores();
            StateHasChanged();
        }

    }

    private async Task OnEditClick(Data.Models.Stores.Store Store)
    {
        await UpdateStores();

        StateHasChanged();
    }
}
