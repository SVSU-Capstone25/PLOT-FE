@inject UsersHttpClient UsersHttpClient
@inject StoresHttpClient StoresHttpClient
@inject IJSRuntime Runtime

@using Plot.Data.Models.Users

<ModalBody>
    <div class="d-flex flex-row gap-2">
        <div class="col-6 d-flex flex-column gap-2 height-custom">
            <label class="w-100 d-flex">
                <span class="fw-bold label-text">Name</span>
                <InputText class="w-75 form-control ms-auto input-field" type="text"
                    @bind-value="AddUpdateStoreModel!.NAME" />
                <div class="text-danger">
                    <ValidationMessage For=@(() => AddUpdateStoreModel.NAME) />
                </div>
            </label>

            <label class="w-100 d-flex">
                <span class="fw-bold label-text">Address</span>
                <InputText class="w-75 form-control ms-auto input-field" type="text"
                    @bind-value="AddUpdateStoreModel!.ADDRESS" />
                <div class="text-danger">
                    <ValidationMessage For=@(() => AddUpdateStoreModel.ADDRESS) />
                </div>
            </label>

            <label class="w-100 d-flex">
                <span class="fw-bold label-text">City</span>
                <InputText class="w-75 form-control ms-auto input-field" type="text"
                    @bind-value="AddUpdateStoreModel!.CITY" />
                <div class="text-danger">
                    <ValidationMessage For=@(() => AddUpdateStoreModel.CITY) />
                </div>
            </label>

            <label class="w-100 d-flex">
                <span class="fw-bold label-text">State</span>
                <InputText class="w-75 form-control ms-auto input-field" type="text"
                    @bind-value="AddUpdateStoreModel!.STATE" />
                <div class="text-danger">
                    <ValidationMessage For=@(() => AddUpdateStoreModel.STATE) />
                </div>
            </label>

            <label class="w-100 d-flex">
                <span class="fw-bold label-text">Zip</span>
                <InputText class="w-75 form-control ms-auto input-field" type="text"
                    @bind-value="AddUpdateStoreModel!.ZIP" />
                <div class="text-danger">
                    <ValidationMessage For=@(() => AddUpdateStoreModel.ZIP) />
                </div>
            </label>

            <label class="w-100 d-flex">
                <span class="fw-bold label-text">Width</span>
                <InputNumber class="w-75 form-control ms-auto input-field" type="Number"
                    @bind-value="AddUpdateStoreModel!.WIDTH" min="1" />
                <div class="text-danger">
                    <ValidationMessage For=@(() => AddUpdateStoreModel.WIDTH) />
                </div>
            </label>

            <label class="w-100 d-flex">
                <span class="fw-bold label-text">Length</span>
                <InputNumber class="w-75 form-control ms-auto " type="Number" @bind-value="AddUpdateStoreModel!.LENGTH"
                    min="1" />
                <div class="text-danger">
                    <ValidationMessage For=@(() => AddUpdateStoreModel.LENGTH) />
                </div>
            </label>
        </div>

        <div class="col-6 d-flex align-items-center">
            <ImageInput Label="Upload Image" Id="@StoreId.ToString()" Height="310px" OnImageUpload="OnImageUpload"
                ImageSrc="ImageSrc" />
        </div>
    </div>

    <section>
        <h5 class="my-4">Employees</h5>
        <div class="d-grid gap-2" style="grid-template-columns: repeat(6,1fr);">
            <div class="d-flex flex-column align-items-center">
                <button type="button" class="btn btn-secondary btn-circle" style="--bs-btn-font-size: .75rem;"
                    data-bs-toggle="modal" data-bs-target="@AddEmployeeTarget">
                    <i class="fa-solid fa-plus"></i>
                </button>
                <p class="circle-name">Add Employee</p>
            </div>

            @foreach (var User in Users.ToList())
            {   // Andrew Miller (4/27/2025): Puts employees on Add or Edit Store Modal.
                // To exclude the Root user, checks that User.TUID is not 0
                // Previously Users.Skip(1).ToList() was used. That caused a bug where
                // the Add Store Modal skipped over the first employee added
                if (User != null && User.FIRST_NAME != null && User.LAST_NAME != null && User.TUID != 0)
                {
                    <div class="d-flex flex-column align-items-center">
                        <button type="button" class="btn btn-secondary btn-circle position-relative"
                            style="--bs-btn-font-size: .75rem;" @onclick="async () => await OnDeleteUserClick(User.TUID)">
                            @User.FIRST_NAME![0]@User.LAST_NAME![0]
                            <span
                                class="minus-badge position-absolute top-0 start-100 translate-middle bg-danger rounded-circle">
                                <i class="fa-solid fa-minus p-1"></i>
                            </span>

                        </button>
                        <p class="circle-name">@User.FIRST_NAME</p>
                    </div>
                }

            }
        </div>
    </section>
</ModalBody>

@code {
    /// <summary>
    /// Used to grab/set values of stores from the Add/Edit Modal form
    /// </summary>
    [Parameter] public Data.Models.Stores.UpdatePublicInfoStore? AddUpdateStoreModel { get; set; }
    
    [Parameter] public string? StoreName { get; set; } = "";
    
    /// <summary>
    /// The ID of the store currently being edited (-1 when creating a store)
    /// </summary>
    [Parameter] public required int StoreId { get; set; }
    
    /// <summary>
    /// ID of the Add Employee Modal for this store. Used to switch to the store's
    /// respected AddEmployeeToStoreModal
    /// </summary>
    [Parameter] public required string AddEmployeeTarget { get; set; }

    /// <summary>
    /// List of users that have/will have access to the store 
    /// </summary>
    [Parameter] public List<Data.Models.Users.UserDTO> Users { get; set; } = new();

    /// <summary>
    /// Method passed in from the parent to remove a user from the store
    /// </summary>
    [Parameter] public required EventCallback<int> DeleteUser { get; set; }
    
    /// <summary>
    /// Holds the base64 of an image for the store BP.
    /// The ImageInput component in the modal is set to this string (This displays the image in the modal)
    /// Optional parameter, passed in from parent component as parameter
    /// </summary>
    [Parameter] public string? ImageSrc { get; set; }

    /// <summary>
    /// When the modal is initialized, set the imageinput component to show the
    /// image of the selected store (return nothing when creating a store for a blank input)
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    protected override void OnInitialized()
    {
        /*
        if (AddUpdateStoreModel == null) return;

        ImageSrc = AddUpdateStoreModel.BLUEPRINT_IMAGE != null ?
        $"data:image/jpeg;base64,{Convert.ToBase64String(AddUpdateStoreModel.BLUEPRINT_IMAGE)}" : "";
        */
    }

    /// <summary>
    /// Delete a user from the list of users in a store when their circle is clicked on
    /// </summary>
    /// <param name="tuid">The TUID of the user to remove from the store </param>
    /// <returns> void </returns>
    private async Task OnDeleteUserClick(int tuid)
    {
        await Task.Run(() => Console.WriteLine($"Delete User #{tuid}"));
        await DeleteUser.InvokeAsync(tuid);
    }

    /// <summary>
    /// Sets the store model's image to the file selected as the store's blueprint
    /// </summary>
    /// <param name="e"> used to pass in the file change event so the BP image can be 
    /// converted to a byte array </param>
    /// <returns> void </returns>
    private async Task OnImageUpload(InputFileChangeEventArgs e)
    {
        try {
            await Task.Run(() => Console.WriteLine("Upload Image"));
            var file = e.File;
            using var stream = file.OpenReadStream(file.Size);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var originalImageBytes = memoryStream.ToArray();
            await Task.Run(() => Console.WriteLine("Original image bytes:" + originalImageBytes.Length));
            var compressedImageBytes = await Runtime.InvokeAsync<byte[]>("compressImage", originalImageBytes, 480, 360, 1);
            await Task.Run(() => Console.WriteLine("Compressed image bytes:" + compressedImageBytes.Length));
            
            if (AddUpdateStoreModel != null)
            {
                AddUpdateStoreModel.BLUEPRINT_IMAGE = compressedImageBytes;
            }
        }
        catch (Exception exception)
        {
            Console.WriteLine("Image uploading/compressing error: " + exception);
        }
    }
}