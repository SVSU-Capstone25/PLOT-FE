@inject UsersHttpClient UsersHttpClient

@using Plot.Data.Models.Stores

<Modal @attributes="Attributes" class="standard">
    <ModalHeader Title="Add Employee" Variant="standard" />
    <EditForm Model="AddEmployeesModel"
        OnValidSubmit="async () => await OnAddEmployeesSubmit.InvokeAsync(AddEmployeesModel!.USERS)">
        <ModalBody>
            <OptionInput id="addEmployeeOptionsInput">
                <OptionInputHeader>Select an Employee to Add</OptionInputHeader>
                <InputSelect class="form-select" multiple @bind-Value="AddEmployeesModel!.USERS">
                    @foreach (var User in Users)
                    {
                        <OptionInputOption value="@User.TUID">
                            @User.FIRST_NAME @User.LAST_NAME
                        </OptionInputOption>
                    }
                </InputSelect>
            </OptionInput>

        </ModalBody>

        <div class="modal-footer">
            <button type="button" class="btn btn-danger text-white" data-bs-toggle="modal"
                data-bs-target="@AddEmployeeTarget">Cancel</button>
            <Button TextAlignment="center" Variant="primary" type="submit" data-bs-toggle="modal"
                data-bs-target="@AddEmployeeTarget">Add User</Button>
        </div>
    </EditForm>
</Modal>

@code {

    public record AddEmployees
    {
        public required string[] USERS { get; set; }
    }

    [Parameter] public required string AddEmployeeTarget { get; set; }
    [Parameter] public required EventCallback<string[]> OnAddEmployeesSubmit { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    [SupplyParameterFromForm] private AddEmployees? AddEmployeesModel { get; set; }

    private List<Data.Models.Users.UserDTO> Users = new List<Data.Models.Users.UserDTO>();

    private async Task UpdateUsers()
    {
        var response = await UsersHttpClient.GetAllUsers();

        if (response != null)
        {
            Users = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateUsers();
    }

    protected override void OnInitialized()
    {
        AddEmployeesModel ??= new()
        {
            USERS = []
        };
    }
}