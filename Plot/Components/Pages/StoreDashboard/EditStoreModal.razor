@inject StoresHttpClient StoresHttpClient
@inject UsersHttpClient UsersHttpClient


<Modal @attributes="Attributes" SizeClass="modal-lg">
    <ModalHeader Title="Update Store Information" />
    <EditForm Model="EditStoreModel" OnValidSubmit="async () => await OnEditStoreSubmit()">

        <AddUpdateStoreModalBody AddUpdateStoreModel="EditStoreModel" StoreId="StoreId"/>

        <ModalFooter>
            <Button Class="Button" TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                Update Store
            </Button>
        </ModalFooter>
    </EditForm>
</Modal>

@code {
    [Parameter] public required Data.Models.Stores.Store Store { get; set; }
    [Parameter] public required EventCallback UpdateStores { get; set; }
    [Parameter] public required int StoreId { get; set; }
    [Parameter] public required List<Data.Models.Users.UserDTO> usersToAdd{ get; set; }
    [Parameter] public required List<Data.Models.Users.UserDTO> usersToDelete{ get; set; }

    [SupplyParameterFromForm] private Data.Models.Stores.UpdatePublicInfoStore? EditStoreModel { get; set; }

    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    protected override void OnInitialized()
    {
        EditStoreModel ??= new Data.Models.Stores.UpdatePublicInfoStore
        {
            NAME = Store.NAME!,
            ADDRESS = Store.ADDRESS!,
            CITY = Store.CITY!,
            STATE = Store.STATE!,
            ZIP = Store.ZIP!,
            WIDTH = Store.WIDTH,
            LENGTH = Store.LENGTH,
            BLUEPRINT_IMAGE = Store.BLUEPRINT_IMAGE,
            USER_TUIDS = ""
        };
    }

    private async Task OnEditStoreSubmit()
    {
        await Task.Run(() => Console.WriteLine("Update store: " + StoreId));

        if (EditStoreModel == null) return;




        if(usersToDelete.Count > 0)
        {
            Console.WriteLine("Before loop");
            foreach(var user in usersToDelete)
            {
                Plot.Data.Models.Users.DeleteUserFromStoreRequest deleteUserAccess = new Plot.Data.Models.Users.DeleteUserFromStoreRequest
                {
                    USER_TUID = user.TUID,
                    STORE_TUID = StoreId
                };

                await UsersHttpClient.DeleteFromStore(deleteUserAccess);

                Console.WriteLine("Delete: "+user.TUID+" "+user.FIRST_NAME);
            }
        }


        if(usersToAdd.Count > 0)
        {
            foreach(var user in usersToAdd)
            {
                //Create a new access model for updateing a users store access
                Plot.Data.Models.Users.UpdateAccessListRequest updateUserAccess = new Plot.Data.Models.Users.UpdateAccessListRequest
                {
                    USER_TUID = user.TUID,
                    STORE_TUIDS = new List<int> { StoreId }
                };
                //Send the list to BE to add the new store access for the user
                // returns a httpstatuscode
                await UsersHttpClient.UpdateAccessList(updateUserAccess);

                EditStoreModel.USER_TUIDS += user.TUID +",";
            }
            if(EditStoreModel.USER_TUIDS != null)
            {
                EditStoreModel.USER_TUIDS = EditStoreModel.USER_TUIDS.TrimEnd(',');
            }
        }

        Console.WriteLine("USER_TUIDS: "+EditStoreModel.USER_TUIDS);

        

        var response = await StoresHttpClient.UpdatePublicInfo(StoreId, EditStoreModel);

        Console.WriteLine(response);

        if (response != System.Net.HttpStatusCode.OK) return;

        await UpdateStores.InvokeAsync();

        Console.WriteLine("Printing users in store after saving:");
        foreach (var user in usersToAdd)
        {
            Console.WriteLine(user.FIRST_NAME+" "+user.LAST_NAME);
        }

    }

}