@inject StoresHttpClient StoresHttpClient
@inject UsersHttpClient UsersHttpClient
@inject ToastService ToastService
@inject IJSRuntime JS

@using Plot.Services

<Modal @attributes="Attributes" SizeClass="modal-lg">
    <ModalHeader Title="Update Store Information" />
    <EditForm Model="EditStoreModel" OnValidSubmit="async () => await OnEditStoreSubmit()"
        OnInvalidSubmit="OnInvalidEditStoreSubmit">
        <AddUpdateStoreModalBody AddUpdateStoreModel="EditStoreModel" StoreId="StoreId"
            AddEmployeeTarget="@($"#add-employee-{StoreId}")" Users="Users.Values.ToList()" DeleteUser="DeleteUser" />

        <ModalFooter OnCancelClick="async () => await ClearEditStoreModel()">
            <Button TextAlignment="center" Variant="primary" type="submit" data-bs-dismiss="modal">
                Update Store
            </Button>
        </ModalFooter>
    </EditForm>
</Modal>

<AddEmployeeToStoreModal id="@($"add-employee-{Store.TUID}")" AddEmployeeTarget="@($"#edit-store-{Store.TUID}")"
    OnAddEmployeesSubmit="OnAddEmployeesSubmit" ImageSrc="ImageSrc" />

<script>
    // Sets background image - For initialization
    // OnImageUpload (in AddUpdateStoreModalBody.razor) doesn't set image on initialization
    // only when the user uploads the image
    function setBackgroundImage(StoreId, ImageSrc) {
        console.log("set background image");
        let image_input = document.getElementById(StoreId + "-container");
        image_input.style.backgroundImage = `url(${ImageSrc})`;
        image_input.style.backgroundSize = "cover";
        image_input.style.backgroundPosition = "center";
    }
</script>


@code {
    /// <summary>
    /// Store object passed in from parent (Store Dashboard)
    /// </summary
    [Parameter] public required Data.Models.Stores.Store Store { get; set; }

    /// <summary>
    /// method passed in from parent (Store Dashboard) to update the current stores available.
    /// </summary>
    [Parameter] public required EventCallback UpdateStores { get; set; }

    /// <summary>
    /// The ID of the store currently being edited
    /// </summary>
    [Parameter] public required int StoreId { get; set; }

    /// <summary>
    /// Captures and stores any additional attributes that are not explicitly defined on the component
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public required Dictionary<string, object> Attributes { get; set; }

    /// <summary>
    /// Model used to grab/set values of stores from the Edit Modal form
    /// </summary>
    [SupplyParameterFromForm] private Data.Models.Stores.UpdatePublicInfoStore? EditStoreModel { get; set; }

    /// <summary>
    /// Holds all of the users that are/will be associated with a store
    /// </summary>
    private Dictionary<int, Data.Models.Users.UserDTO> Users = new Dictionary<int, Data.Models.Users.UserDTO>();

    /// <summary>
    /// Holds comma-delimited string of ids for users that are part of the store at initialization
    /// or when restarting the modal
    /// Used to revert changes when clicking cancel
    /// </summary>
    private string? EmployeesAtStart;

    /// <summary>
    /// Holds string used for the image source, ImageSrc for the ImageInput component in AddUpdateStoreModalBody
    /// </summary>
    private string? ImageSrc;

    /// <summary>
    /// OnAfterRenderAsync, asynchronous call after rendering. If this is the first render,
    /// sets ImageSrc as the EditStoreModel's BLUEPRINT_IMAGE
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ImageSrc = EditStoreModel!.BLUEPRINT_IMAGE != null
            ? $"data:image/jpeg;base64,{Convert.ToBase64String(EditStoreModel!.BLUEPRINT_IMAGE)}" : "";

            if (!string.IsNullOrEmpty(ImageSrc))
            {
                // Ensure that storeId is correctly passed in
                await JS.InvokeVoidAsync("setBackgroundImage", StoreId, ImageSrc);
                Console.WriteLine("Exiting the asynchronous invocation of the setBackgroundImage method");
            }
        }
    }

    /// <summary>
    /// Updates the Users Dictionary to include all of the employees that should
    /// be associated with the store
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    private async Task UpdateUsers()
    {
        var currentUsers = await StoresHttpClient.GetUsersAtStore(StoreId);

        if (currentUsers != null)
        {
            currentUsers.ForEach((currentUser) =>
            {
                Users.TryAdd(currentUser.TUID, currentUser);
            });
        }

        if (EditStoreModel != null)
        {
            if (EditStoreModel.USER_TUIDS != null && EditStoreModel.USER_TUIDS != string.Empty)
            {
                var addedUsers = await UsersHttpClient.GetUsersByString(new Data.Models.Users.UsersByStringRequest()
                {
                    TUIDS = EditStoreModel.USER_TUIDS
                });

                if (addedUsers != null)
                {
                    foreach (var addedUser in addedUsers)
                    {
                        var success = Users.TryAdd(addedUser.TUID, addedUser);
                        await InvokeAsync(StateHasChanged); // Needed to add employees
                    }
                }
            }
        }
    }

    /// <summary>
    /// Remove a user from the dictionary Users. This will remove their association to the store
    /// </summary>
    /// <param name="tuid">The TUID of the user to remove from the store </param>
    /// <returns> void </returns>
    private async Task DeleteUser(int tuid)
    {
        await Task.Run(() => Users.Remove(tuid));
    }

    /// <summary>
    /// Creates a new EditStoreModel when the modal is created.
    /// The values are filled in from the component's Store parameter
    /// in the call to ResetEditStoreModel
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    protected override void OnInitialized()
    {
        EditStoreModel = new();
        ResetEditStoreModel();
    }

    /// <summary>
    /// Fills in the values of EditStoreModel from the Store
    /// parameter. Used at initialization and also when resetting
    /// the store
    public void ResetEditStoreModel()
    {
        Console.WriteLine("Resetting edit store model");

        EditStoreModel!.NAME = Store!.NAME;
        EditStoreModel!.ADDRESS = Store!.ADDRESS;
        EditStoreModel!.CITY = Store!.CITY;
        EditStoreModel!.STATE = Store!.STATE;
        EditStoreModel!.ZIP = Store!.ZIP;
        EditStoreModel!.WIDTH = Store!.WIDTH;
        EditStoreModel!.LENGTH = Store!.LENGTH;
        EditStoreModel!.BLUEPRINT_IMAGE = Store!.BLUEPRINT_IMAGE;
        EditStoreModel!.USER_TUIDS = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// populates the Users dictionary with the current employees of the store
    /// when the modal is initially created
    /// </summary>
    /// <param name=""> No parameters taken </param>
    /// <returns> void </returns>
    protected override async Task OnInitializedAsync()
    {
        await UpdateUsers();
        EmployeesAtStart = EditStoreModel!.USER_TUIDS;
    }

    /// <summary>
    /// Takes the employee(s) being added from the AddEmployeeToStoreModal and
    /// marks them to be associated with the store
    /// </summary>
    /// <param name="employees"> list of employees from the the AddEmployeeToStoreModal </param>
    /// <returns> void </returns>
    private async Task OnAddEmployeesSubmit(string[] employees)
    {
        List<string> employeesList = new List<string>(employees);

        string joinedEmployees = string.Join(",", employeesList);

        EditStoreModel!.USER_TUIDS = joinedEmployees;

        if (EditStoreModel != null)
        {
            if (EditStoreModel.USER_TUIDS != null && EditStoreModel.USER_TUIDS != string.Empty)
            {
                var addedUsers = await UsersHttpClient.GetUsersByString(new Data.Models.Users.UsersByStringRequest()
                {
                    TUIDS = EditStoreModel.USER_TUIDS
                });

                if (addedUsers != null)
                {
                    foreach (var addedUser in addedUsers)
                    {
                        var success = Users.TryAdd(addedUser.TUID, addedUser);
                        await InvokeAsync(StateHasChanged); // Needed to add employees
                    }
                }
            }
        }
    }

    /// <summary>
    /// Attempts to update the store if the values in EditStoreModel are valid
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    private async Task OnEditStoreSubmit()
    {
        if (EditStoreModel == null)
        {
            ToastService.ShowError("There was an error editing the store!");
            return;
        }

        string joinedEmployees = string.Join(",", Users.Keys.ToList());

        EmployeesAtStart = joinedEmployees;

        EditStoreModel!.USER_TUIDS = joinedEmployees;

        var response = await StoresHttpClient.UpdatePublicInfo(StoreId, EditStoreModel);

        if (response != System.Net.HttpStatusCode.OK)
        {
            ToastService.ShowError("There was an error editing the store!");
        }
        else
        {
            ToastService.ShowSuccess("Your edits have been saved!");
            await UpdateStores.InvokeAsync();
            await InvokeAsync(StateHasChanged);
        }
        await ClearEditStoreModel();

    }

    /// <summary>
    /// Called when the store has invalid values while trying to update. This is called from the EditForm
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    private void OnInvalidEditStoreSubmit()
    {
        ToastService.ShowError("There was an error editing the store!");
    }

    /// <summary>
    /// removes all of the values from the Users, resets EditStoreModel,
    /// resets background image, resets employees, and calls to UpdateUsers
    /// </summary>
    /// <param name=""> no parameters taken </param>
    /// <returns> void </returns>
    private async Task ClearEditStoreModel()
    {
        Users.Clear();
        await InvokeAsync(ResetEditStoreModel);
        await JS.InvokeVoidAsync("setBackgroundImage", StoreId, ImageSrc);
        EditStoreModel!.USER_TUIDS = EmployeesAtStart;
        await UpdateUsers();

        await InvokeAsync(StateHasChanged);
    }
}
